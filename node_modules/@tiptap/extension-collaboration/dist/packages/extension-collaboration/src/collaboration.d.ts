import { Extension } from '@tiptap/core';
import { ySyncPlugin } from 'y-prosemirror';
declare type YSyncOpts = Parameters<typeof ySyncPlugin>[1];
declare module '@tiptap/core' {
    interface Commands<ReturnType> {
        collaboration: {
            /**
             * Undo recent changes
             * @example editor.commands.undo()
             */
            undo: () => ReturnType;
            /**
             * Reapply reverted changes
             * @example editor.commands.redo()
             */
            redo: () => ReturnType;
        };
    }
}
export interface CollaborationOptions {
    /**
     * An initialized Y.js document.
     * @example new Y.Doc()
     */
    document: any;
    /**
     * Name of a Y.js fragment, can be changed to sync multiple fields with one Y.js document.
     * @default 'default'
     * @example 'my-custom-field'
     */
    field: string;
    /**
     * A raw Y.js fragment, can be used instead of `document` and `field`.
     * @example new Y.Doc().getXmlFragment('body')
     */
    fragment: any;
    /**
     * Fired when the content from Yjs is initially rendered to Tiptap.
     */
    onFirstRender?: () => void;
    ySyncOptions?: YSyncOpts;
}
/**
 * This extension allows you to collaborate with others in real-time.
 * @see https://tiptap.dev/api/extensions/collaboration
 */
export declare const Collaboration: Extension<CollaborationOptions, any>;
export {};
