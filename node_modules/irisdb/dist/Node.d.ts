import { Adapter, Callback, JsonValue, TypeGuard, Unsubscribe } from './types.ts';
export declare const DIRECTORY_VALUE: {};
/**
 * Check if the value is a directory (object with no keys {})
 * @param value
 */
export declare const isDirectory: (value: JsonValue) => boolean;
/**
 * Nodes represent queries into the tree. The actual tree data is stored by Adapters.
 *
 * Node can be a branch node (directory) or a leaf node (value).
 */
export declare class Node {
    id: string;
    parent: Node | null;
    private children;
    private onSubscriptions;
    private forEachSubscriptions;
    private adapters;
    private counter;
    /**
     */
    constructor({ id, adapters, parent }?: NodeProps);
    /**
     * Get a child node
     * @param key
     * @returns {Node}
     * @example node.get('apps/canvas/documents/test').put({name: 'Test Document'})
     * @example node.get('apps').get('canvas').get('documents').get('test').on((value) => console.log(`Document name: ${value.name}`))
     */
    get(key: string): Node;
    private putValue;
    private putChildValues;
    /**
     * Set a value to the node. If the value is an object, it will be converted to child nodes.
     * @param value
     * @example node.get('apps/canvas/documents/test').put({name: 'Test Canvas'})
     */
    put(value: JsonValue, updatedAt?: number, expiresAt?: number): Promise<void>;
    /**
     * Subscribe to all child nodes, returned in the same object
     */
    open<T = JsonValue>(callback: Callback<T>, recursion?: number, typeGuard?: (value: Record<string, JsonValue>) => T): Unsubscribe;
    /**
     * Subscribe to the node's value
     */
    on<T = JsonValue>(callback: Callback<T>, returnIfUndefined?: boolean, recursion?: number, typeGuard?: TypeGuard<T>, latestOnly?: boolean): Unsubscribe;
    private notifyChange;
    /**
     * Subscribe to child nodes
     * @param callback
     */
    forEach<T = JsonValue>(callback: Callback<T>, recursion?: number, typeGuard?: TypeGuard<T>): Unsubscribe;
    /**
     * Same as on(), but will unsubscribe after the first callback
     * @param callback
     */
    once<T = JsonValue>(callback?: Callback<T>, returnIfUndefined?: boolean, recursion?: number, typeGuard?: (value: JsonValue) => T): Promise<T | undefined>;
}
export type NodeProps = {
    id?: string;
    adapters?: Adapter[];
    parent?: Node | null;
};
//# sourceMappingURL=Node.d.ts.map