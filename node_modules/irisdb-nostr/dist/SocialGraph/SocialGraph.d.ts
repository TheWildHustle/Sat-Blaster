import { NostrEvent } from '@nostr-dev-kit/ndk';
/**
 * A social graph, or "web of trust," for Nostr users and their followers, built from Nostr follow list events.
 *
 * Uses include:
 *
 * - Data Filtering: Display content only from users you follow or those followed by your friends.
 * - Connection Indicators: Show on user avatars and profiles, for example:
 *     - "2nd degree connection": A user followed by someone you follow.
 *     - "Follows you": A user who follows you.
 *     - Mutual friends: Indicates how many of your friends follow a user.
 *     - Follower count: Shows how many known followers a user has.
 */
export declare class SocialGraph {
    private root;
    private followDistanceByUser;
    private usersByFollowDistance;
    private followedByUser;
    private followersByUser;
    private latestFollowEventTimestamps;
    /**
     * @param root "Root user" of the social graph.
     * Follow distance to this user is 0. Users followed by this user are at distance 1, and so on.
     */
    constructor(root: string);
    /**
     * Change the root user of the social graph, recalculating follow distances.
     * @param root
     */
    setRoot(root: string): void;
    /**
     * Handle a follow event, updating the social graph.
     * @param evs
     */
    handleEvent(evs: NostrEvent | Array<NostrEvent>): void;
    /**
     * Check if a user is following another user.
     * @param follower
     * @param followedUser
     */
    isFollowing(follower: string, followedUser: string): boolean;
    /**
     * Get the follow distance from the root user to another user.
     * @param user
     */
    getFollowDistance(user: string): number;
    private addUserByFollowDistance;
    private addFollower;
    private removeFollower;
    /**
     * Get the number of known followers for a user.
     * @param address
     */
    followerCount(address: string): number;
    /**
     * Get the number of users you follow that follow a given user.
     * @param address
     */
    followedByFriendsCount(address: string): number;
    /**
     * Get the users you follow that are following a given user.
     * @param address
     */
    followedByFriends(address: string): Set<string>;
    /**
     * Get the users followed by a given user.
     * @param user
     * @param includeSelf
     */
    getFollowedByUser(user: string, includeSelf?: boolean): Set<string>;
    /**
     * Get the known followers of a given user.
     * @param address
     */
    getFollowersByUser(address: string): Set<string>;
}
//# sourceMappingURL=SocialGraph.d.ts.map