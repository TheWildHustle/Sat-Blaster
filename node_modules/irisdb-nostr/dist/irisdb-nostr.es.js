var gi = Object.defineProperty;
var bi = (t, e, n) => e in t ? gi(t, e, { enumerable: !0, configurable: !0, writable: !0, value: n }) : t[e] = n;
var M = (t, e, n) => (bi(t, typeof e != "symbol" ? e + "" : e, n), n);
import { localState, Node, Adapters } from "irisdb";
const crypto$6 = typeof globalThis == "object" && "crypto" in globalThis ? globalThis.crypto : void 0;
function number$8(t) {
  if (!Number.isSafeInteger(t) || t < 0)
    throw new Error(`positive integer expected, not ${t}`);
}
function isBytes$7(t) {
  return t instanceof Uint8Array || t != null && typeof t == "object" && t.constructor.name === "Uint8Array";
}
function bytes$8(t, ...e) {
  if (!isBytes$7(t))
    throw new Error("Uint8Array expected");
  if (e.length > 0 && !e.includes(t.length))
    throw new Error(`Uint8Array expected of length ${e}, not of length=${t.length}`);
}
function hash$7(t) {
  if (typeof t != "function" || typeof t.create != "function")
    throw new Error("Hash should be wrapped by utils.wrapConstructor");
  number$8(t.outputLen), number$8(t.blockLen);
}
function exists$7(t, e = !0) {
  if (t.destroyed)
    throw new Error("Hash instance has been destroyed");
  if (e && t.finished)
    throw new Error("Hash#digest() has already been called");
}
function output$7(t, e) {
  bytes$8(t);
  const n = e.outputLen;
  if (t.length < n)
    throw new Error(`digestInto() expects output buffer of length at least ${n}`);
}
/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */
const createView$6 = (t) => new DataView(t.buffer, t.byteOffset, t.byteLength), rotr$6 = (t, e) => t << 32 - e | t >>> e;
new Uint8Array(new Uint32Array([287454020]).buffer)[0];
const hexes$7 = /* @__PURE__ */ Array.from({ length: 256 }, (t, e) => e.toString(16).padStart(2, "0"));
function bytesToHex$7(t) {
  bytes$8(t);
  let e = "";
  for (let n = 0; n < t.length; n++)
    e += hexes$7[t[n]];
  return e;
}
const asciis$2 = { _0: 48, _9: 57, _A: 65, _F: 70, _a: 97, _f: 102 };
function asciiToBase16$2(t) {
  if (t >= asciis$2._0 && t <= asciis$2._9)
    return t - asciis$2._0;
  if (t >= asciis$2._A && t <= asciis$2._F)
    return t - (asciis$2._A - 10);
  if (t >= asciis$2._a && t <= asciis$2._f)
    return t - (asciis$2._a - 10);
}
function hexToBytes$7(t) {
  if (typeof t != "string")
    throw new Error("hex string expected, got " + typeof t);
  const e = t.length, n = e / 2;
  if (e % 2)
    throw new Error("padded hex string expected, got unpadded hex of length " + e);
  const r = new Uint8Array(n);
  for (let s = 0, o = 0; s < n; s++, o += 2) {
    const a = asciiToBase16$2(t.charCodeAt(o)), c = asciiToBase16$2(t.charCodeAt(o + 1));
    if (a === void 0 || c === void 0) {
      const h = t[o] + t[o + 1];
      throw new Error('hex string expected, got non-hex character "' + h + '" at index ' + o);
    }
    r[s] = a * 16 + c;
  }
  return r;
}
function utf8ToBytes$c(t) {
  if (typeof t != "string")
    throw new Error(`utf8ToBytes expected string, got ${typeof t}`);
  return new Uint8Array(new TextEncoder().encode(t));
}
function toBytes$7(t) {
  return typeof t == "string" && (t = utf8ToBytes$c(t)), bytes$8(t), t;
}
function concatBytes$9(...t) {
  let e = 0;
  for (let r = 0; r < t.length; r++) {
    const s = t[r];
    bytes$8(s), e += s.length;
  }
  const n = new Uint8Array(e);
  for (let r = 0, s = 0; r < t.length; r++) {
    const o = t[r];
    n.set(o, s), s += o.length;
  }
  return n;
}
let Hash$6 = class {
  // Safe version that clones internal state
  clone() {
    return this._cloneInto();
  }
};
function wrapConstructor$6(t) {
  const e = (r) => t().update(toBytes$7(r)).digest(), n = t();
  return e.outputLen = n.outputLen, e.blockLen = n.blockLen, e.create = () => t(), e;
}
function randomBytes$5(t = 32) {
  if (crypto$6 && typeof crypto$6.getRandomValues == "function")
    return crypto$6.getRandomValues(new Uint8Array(t));
  throw new Error("crypto.getRandomValues must be defined");
}
function number$7(t) {
  if (!Number.isSafeInteger(t) || t < 0)
    throw new Error(`Wrong positive integer: ${t}`);
}
function bytes$7(t, ...e) {
  if (!(t instanceof Uint8Array))
    throw new Error("Expected Uint8Array");
  if (e.length > 0 && !e.includes(t.length))
    throw new Error(`Expected Uint8Array of length ${e}, not of length=${t.length}`);
}
function hash$6(t) {
  if (typeof t != "function" || typeof t.create != "function")
    throw new Error("Hash should be wrapped by utils.wrapConstructor");
  number$7(t.outputLen), number$7(t.blockLen);
}
function exists$6(t, e = !0) {
  if (t.destroyed)
    throw new Error("Hash instance has been destroyed");
  if (e && t.finished)
    throw new Error("Hash#digest() has already been called");
}
function output$6(t, e) {
  bytes$7(t);
  const n = e.outputLen;
  if (t.length < n)
    throw new Error(`digestInto() expects output buffer of length at least ${n}`);
}
const crypto$5 = typeof globalThis == "object" && "crypto" in globalThis ? globalThis.crypto : void 0;
/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */
const u8a$7 = (t) => t instanceof Uint8Array, createView$5 = (t) => new DataView(t.buffer, t.byteOffset, t.byteLength), rotr$5 = (t, e) => t << 32 - e | t >>> e, isLE$7 = new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68;
if (!isLE$7)
  throw new Error("Non little-endian hardware is not supported");
function utf8ToBytes$b(t) {
  if (typeof t != "string")
    throw new Error(`utf8ToBytes expected string, got ${typeof t}`);
  return new Uint8Array(new TextEncoder().encode(t));
}
function toBytes$6(t) {
  if (typeof t == "string" && (t = utf8ToBytes$b(t)), !u8a$7(t))
    throw new Error(`expected Uint8Array, got ${typeof t}`);
  return t;
}
function concatBytes$8(...t) {
  const e = new Uint8Array(t.reduce((r, s) => r + s.length, 0));
  let n = 0;
  return t.forEach((r) => {
    if (!u8a$7(r))
      throw new Error("Uint8Array expected");
    e.set(r, n), n += r.length;
  }), e;
}
let Hash$5 = class {
  // Safe version that clones internal state
  clone() {
    return this._cloneInto();
  }
};
function wrapConstructor$5(t) {
  const e = (r) => t().update(toBytes$6(r)).digest(), n = t();
  return e.outputLen = n.outputLen, e.blockLen = n.blockLen, e.create = () => t(), e;
}
function randomBytes$4(t = 32) {
  if (crypto$5 && typeof crypto$5.getRandomValues == "function")
    return crypto$5.getRandomValues(new Uint8Array(t));
  throw new Error("crypto.getRandomValues must be defined");
}
function setBigUint64$6(t, e, n, r) {
  if (typeof t.setBigUint64 == "function")
    return t.setBigUint64(e, n, r);
  const s = BigInt(32), o = BigInt(4294967295), a = Number(n >> s & o), c = Number(n & o), h = r ? 4 : 0, p = r ? 0 : 4;
  t.setUint32(e + h, a, r), t.setUint32(e + p, c, r);
}
let SHA2$5 = class extends Hash$5 {
  constructor(e, n, r, s) {
    super(), this.blockLen = e, this.outputLen = n, this.padOffset = r, this.isLE = s, this.finished = !1, this.length = 0, this.pos = 0, this.destroyed = !1, this.buffer = new Uint8Array(e), this.view = createView$5(this.buffer);
  }
  update(e) {
    exists$6(this);
    const { view: n, buffer: r, blockLen: s } = this;
    e = toBytes$6(e);
    const o = e.length;
    for (let a = 0; a < o; ) {
      const c = Math.min(s - this.pos, o - a);
      if (c === s) {
        const h = createView$5(e);
        for (; s <= o - a; a += s)
          this.process(h, a);
        continue;
      }
      r.set(e.subarray(a, a + c), this.pos), this.pos += c, a += c, this.pos === s && (this.process(n, 0), this.pos = 0);
    }
    return this.length += e.length, this.roundClean(), this;
  }
  digestInto(e) {
    exists$6(this), output$6(e, this), this.finished = !0;
    const { buffer: n, view: r, blockLen: s, isLE: o } = this;
    let { pos: a } = this;
    n[a++] = 128, this.buffer.subarray(a).fill(0), this.padOffset > s - a && (this.process(r, 0), a = 0);
    for (let y = a; y < s; y++)
      n[y] = 0;
    setBigUint64$6(r, s - 8, BigInt(this.length * 8), o), this.process(r, 0);
    const c = createView$5(e), h = this.outputLen;
    if (h % 4)
      throw new Error("_sha2: outputLen should be aligned to 32bit");
    const p = h / 4, g = this.get();
    if (p > g.length)
      throw new Error("_sha2: outputLen bigger than state");
    for (let y = 0; y < p; y++)
      c.setUint32(4 * y, g[y], o);
  }
  digest() {
    const { buffer: e, outputLen: n } = this;
    this.digestInto(e);
    const r = e.slice(0, n);
    return this.destroy(), r;
  }
  _cloneInto(e) {
    e || (e = new this.constructor()), e.set(...this.get());
    const { blockLen: n, buffer: r, length: s, finished: o, destroyed: a, pos: c } = this;
    return e.length = s, e.pos = c, e.finished = o, e.destroyed = a, s % n && e.buffer.set(r), e;
  }
};
const Chi$6 = (t, e, n) => t & e ^ ~t & n, Maj$6 = (t, e, n) => t & e ^ t & n ^ e & n, SHA256_K$6 = /* @__PURE__ */ new Uint32Array([
  1116352408,
  1899447441,
  3049323471,
  3921009573,
  961987163,
  1508970993,
  2453635748,
  2870763221,
  3624381080,
  310598401,
  607225278,
  1426881987,
  1925078388,
  2162078206,
  2614888103,
  3248222580,
  3835390401,
  4022224774,
  264347078,
  604807628,
  770255983,
  1249150122,
  1555081692,
  1996064986,
  2554220882,
  2821834349,
  2952996808,
  3210313671,
  3336571891,
  3584528711,
  113926993,
  338241895,
  666307205,
  773529912,
  1294757372,
  1396182291,
  1695183700,
  1986661051,
  2177026350,
  2456956037,
  2730485921,
  2820302411,
  3259730800,
  3345764771,
  3516065817,
  3600352804,
  4094571909,
  275423344,
  430227734,
  506948616,
  659060556,
  883997877,
  958139571,
  1322822218,
  1537002063,
  1747873779,
  1955562222,
  2024104815,
  2227730452,
  2361852424,
  2428436474,
  2756734187,
  3204031479,
  3329325298
]), IV$5 = /* @__PURE__ */ new Uint32Array([
  1779033703,
  3144134277,
  1013904242,
  2773480762,
  1359893119,
  2600822924,
  528734635,
  1541459225
]), SHA256_W$6 = /* @__PURE__ */ new Uint32Array(64);
let SHA256$6 = class extends SHA2$5 {
  constructor() {
    super(64, 32, 8, !1), this.A = IV$5[0] | 0, this.B = IV$5[1] | 0, this.C = IV$5[2] | 0, this.D = IV$5[3] | 0, this.E = IV$5[4] | 0, this.F = IV$5[5] | 0, this.G = IV$5[6] | 0, this.H = IV$5[7] | 0;
  }
  get() {
    const { A: e, B: n, C: r, D: s, E: o, F: a, G: c, H: h } = this;
    return [e, n, r, s, o, a, c, h];
  }
  // prettier-ignore
  set(e, n, r, s, o, a, c, h) {
    this.A = e | 0, this.B = n | 0, this.C = r | 0, this.D = s | 0, this.E = o | 0, this.F = a | 0, this.G = c | 0, this.H = h | 0;
  }
  process(e, n) {
    for (let y = 0; y < 16; y++, n += 4)
      SHA256_W$6[y] = e.getUint32(n, !1);
    for (let y = 16; y < 64; y++) {
      const $ = SHA256_W$6[y - 15], k = SHA256_W$6[y - 2], S = rotr$5($, 7) ^ rotr$5($, 18) ^ $ >>> 3, w = rotr$5(k, 17) ^ rotr$5(k, 19) ^ k >>> 10;
      SHA256_W$6[y] = w + SHA256_W$6[y - 7] + S + SHA256_W$6[y - 16] | 0;
    }
    let { A: r, B: s, C: o, D: a, E: c, F: h, G: p, H: g } = this;
    for (let y = 0; y < 64; y++) {
      const $ = rotr$5(c, 6) ^ rotr$5(c, 11) ^ rotr$5(c, 25), k = g + $ + Chi$6(c, h, p) + SHA256_K$6[y] + SHA256_W$6[y] | 0, w = (rotr$5(r, 2) ^ rotr$5(r, 13) ^ rotr$5(r, 22)) + Maj$6(r, s, o) | 0;
      g = p, p = h, h = c, c = a + k | 0, a = o, o = s, s = r, r = k + w | 0;
    }
    r = r + this.A | 0, s = s + this.B | 0, o = o + this.C | 0, a = a + this.D | 0, c = c + this.E | 0, h = h + this.F | 0, p = p + this.G | 0, g = g + this.H | 0, this.set(r, s, o, a, c, h, p, g);
  }
  roundClean() {
    SHA256_W$6.fill(0);
  }
  destroy() {
    this.set(0, 0, 0, 0, 0, 0, 0, 0), this.buffer.fill(0);
  }
};
const sha256$6 = /* @__PURE__ */ wrapConstructor$5(() => new SHA256$6());
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
const _0n$i = BigInt(0), _1n$j = BigInt(1), _2n$b = BigInt(2), u8a$6 = (t) => t instanceof Uint8Array, hexes$6 = /* @__PURE__ */ Array.from({ length: 256 }, (t, e) => e.toString(16).padStart(2, "0"));
function bytesToHex$6(t) {
  if (!u8a$6(t))
    throw new Error("Uint8Array expected");
  let e = "";
  for (let n = 0; n < t.length; n++)
    e += hexes$6[t[n]];
  return e;
}
function numberToHexUnpadded$3(t) {
  const e = t.toString(16);
  return e.length & 1 ? `0${e}` : e;
}
function hexToNumber$3(t) {
  if (typeof t != "string")
    throw new Error("hex string expected, got " + typeof t);
  return BigInt(t === "" ? "0" : `0x${t}`);
}
function hexToBytes$6(t) {
  if (typeof t != "string")
    throw new Error("hex string expected, got " + typeof t);
  const e = t.length;
  if (e % 2)
    throw new Error("padded hex string expected, got unpadded hex of length " + e);
  const n = new Uint8Array(e / 2);
  for (let r = 0; r < n.length; r++) {
    const s = r * 2, o = t.slice(s, s + 2), a = Number.parseInt(o, 16);
    if (Number.isNaN(a) || a < 0)
      throw new Error("Invalid byte sequence");
    n[r] = a;
  }
  return n;
}
function bytesToNumberBE$3(t) {
  return hexToNumber$3(bytesToHex$6(t));
}
function bytesToNumberLE$3(t) {
  if (!u8a$6(t))
    throw new Error("Uint8Array expected");
  return hexToNumber$3(bytesToHex$6(Uint8Array.from(t).reverse()));
}
function numberToBytesBE$3(t, e) {
  return hexToBytes$6(t.toString(16).padStart(e * 2, "0"));
}
function numberToBytesLE$3(t, e) {
  return numberToBytesBE$3(t, e).reverse();
}
function numberToVarBytesBE$3(t) {
  return hexToBytes$6(numberToHexUnpadded$3(t));
}
function ensureBytes$4(t, e, n) {
  let r;
  if (typeof e == "string")
    try {
      r = hexToBytes$6(e);
    } catch (o) {
      throw new Error(`${t} must be valid hex string, got "${e}". Cause: ${o}`);
    }
  else if (u8a$6(e))
    r = Uint8Array.from(e);
  else
    throw new Error(`${t} must be hex string or Uint8Array`);
  const s = r.length;
  if (typeof n == "number" && s !== n)
    throw new Error(`${t} expected ${n} bytes, got ${s}`);
  return r;
}
function concatBytes$7(...t) {
  const e = new Uint8Array(t.reduce((r, s) => r + s.length, 0));
  let n = 0;
  return t.forEach((r) => {
    if (!u8a$6(r))
      throw new Error("Uint8Array expected");
    e.set(r, n), n += r.length;
  }), e;
}
function equalBytes$5(t, e) {
  if (t.length !== e.length)
    return !1;
  for (let n = 0; n < t.length; n++)
    if (t[n] !== e[n])
      return !1;
  return !0;
}
function utf8ToBytes$a(t) {
  if (typeof t != "string")
    throw new Error(`utf8ToBytes expected string, got ${typeof t}`);
  return new Uint8Array(new TextEncoder().encode(t));
}
function bitLen$3(t) {
  let e;
  for (e = 0; t > _0n$i; t >>= _1n$j, e += 1)
    ;
  return e;
}
function bitGet$3(t, e) {
  return t >> BigInt(e) & _1n$j;
}
const bitSet$3 = (t, e, n) => t | (n ? _1n$j : _0n$i) << BigInt(e), bitMask$3 = (t) => (_2n$b << BigInt(t - 1)) - _1n$j, u8n$3 = (t) => new Uint8Array(t), u8fr$3 = (t) => Uint8Array.from(t);
function createHmacDrbg$3(t, e, n) {
  if (typeof t != "number" || t < 2)
    throw new Error("hashLen must be a number");
  if (typeof e != "number" || e < 2)
    throw new Error("qByteLen must be a number");
  if (typeof n != "function")
    throw new Error("hmacFn must be a function");
  let r = u8n$3(t), s = u8n$3(t), o = 0;
  const a = () => {
    r.fill(1), s.fill(0), o = 0;
  }, c = (...y) => n(s, r, ...y), h = (y = u8n$3()) => {
    s = c(u8fr$3([0]), y), r = c(), y.length !== 0 && (s = c(u8fr$3([1]), y), r = c());
  }, p = () => {
    if (o++ >= 1e3)
      throw new Error("drbg: tried 1000 values");
    let y = 0;
    const $ = [];
    for (; y < e; ) {
      r = c();
      const k = r.slice();
      $.push(k), y += r.length;
    }
    return concatBytes$7(...$);
  };
  return (y, $) => {
    a(), h(y);
    let k;
    for (; !(k = $(p())); )
      h();
    return a(), k;
  };
}
const validatorFns$3 = {
  bigint: (t) => typeof t == "bigint",
  function: (t) => typeof t == "function",
  boolean: (t) => typeof t == "boolean",
  string: (t) => typeof t == "string",
  stringOrUint8Array: (t) => typeof t == "string" || t instanceof Uint8Array,
  isSafeInteger: (t) => Number.isSafeInteger(t),
  array: (t) => Array.isArray(t),
  field: (t, e) => e.Fp.isValid(t),
  hash: (t) => typeof t == "function" && Number.isSafeInteger(t.outputLen)
};
function validateObject$3(t, e, n = {}) {
  const r = (s, o, a) => {
    const c = validatorFns$3[o];
    if (typeof c != "function")
      throw new Error(`Invalid validator "${o}", expected function`);
    const h = t[s];
    if (!(a && h === void 0) && !c(h, t))
      throw new Error(`Invalid param ${String(s)}=${h} (${typeof h}), expected ${o}`);
  };
  for (const [s, o] of Object.entries(e))
    r(s, o, !1);
  for (const [s, o] of Object.entries(n))
    r(s, o, !0);
  return t;
}
const ut$3 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  bitGet: bitGet$3,
  bitLen: bitLen$3,
  bitMask: bitMask$3,
  bitSet: bitSet$3,
  bytesToHex: bytesToHex$6,
  bytesToNumberBE: bytesToNumberBE$3,
  bytesToNumberLE: bytesToNumberLE$3,
  concatBytes: concatBytes$7,
  createHmacDrbg: createHmacDrbg$3,
  ensureBytes: ensureBytes$4,
  equalBytes: equalBytes$5,
  hexToBytes: hexToBytes$6,
  hexToNumber: hexToNumber$3,
  numberToBytesBE: numberToBytesBE$3,
  numberToBytesLE: numberToBytesLE$3,
  numberToHexUnpadded: numberToHexUnpadded$3,
  numberToVarBytesBE: numberToVarBytesBE$3,
  utf8ToBytes: utf8ToBytes$a,
  validateObject: validateObject$3
}, Symbol.toStringTag, { value: "Module" }));
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
const _0n$h = BigInt(0), _1n$i = BigInt(1), _2n$a = BigInt(2), _3n$7 = BigInt(3), _4n$3 = BigInt(4), _5n$3 = BigInt(5), _8n$3 = BigInt(8);
BigInt(9);
BigInt(16);
function mod$3(t, e) {
  const n = t % e;
  return n >= _0n$h ? n : e + n;
}
function pow$3(t, e, n) {
  if (n <= _0n$h || e < _0n$h)
    throw new Error("Expected power/modulo > 0");
  if (n === _1n$i)
    return _0n$h;
  let r = _1n$i;
  for (; e > _0n$h; )
    e & _1n$i && (r = r * t % n), t = t * t % n, e >>= _1n$i;
  return r;
}
function pow2$3(t, e, n) {
  let r = t;
  for (; e-- > _0n$h; )
    r *= r, r %= n;
  return r;
}
function invert$3(t, e) {
  if (t === _0n$h || e <= _0n$h)
    throw new Error(`invert: expected positive integers, got n=${t} mod=${e}`);
  let n = mod$3(t, e), r = e, s = _0n$h, o = _1n$i;
  for (; n !== _0n$h; ) {
    const c = r / n, h = r % n, p = s - o * c;
    r = n, n = h, s = o, o = p;
  }
  if (r !== _1n$i)
    throw new Error("invert: does not exist");
  return mod$3(s, e);
}
function tonelliShanks$3(t) {
  const e = (t - _1n$i) / _2n$a;
  let n, r, s;
  for (n = t - _1n$i, r = 0; n % _2n$a === _0n$h; n /= _2n$a, r++)
    ;
  for (s = _2n$a; s < t && pow$3(s, e, t) !== t - _1n$i; s++)
    ;
  if (r === 1) {
    const a = (t + _1n$i) / _4n$3;
    return function(h, p) {
      const g = h.pow(p, a);
      if (!h.eql(h.sqr(g), p))
        throw new Error("Cannot find square root");
      return g;
    };
  }
  const o = (n + _1n$i) / _2n$a;
  return function(c, h) {
    if (c.pow(h, e) === c.neg(c.ONE))
      throw new Error("Cannot find square root");
    let p = r, g = c.pow(c.mul(c.ONE, s), n), y = c.pow(h, o), $ = c.pow(h, n);
    for (; !c.eql($, c.ONE); ) {
      if (c.eql($, c.ZERO))
        return c.ZERO;
      let k = 1;
      for (let w = c.sqr($); k < p && !c.eql(w, c.ONE); k++)
        w = c.sqr(w);
      const S = c.pow(g, _1n$i << BigInt(p - k - 1));
      g = c.sqr(S), y = c.mul(y, S), $ = c.mul($, g), p = k;
    }
    return y;
  };
}
function FpSqrt$3(t) {
  if (t % _4n$3 === _3n$7) {
    const e = (t + _1n$i) / _4n$3;
    return function(r, s) {
      const o = r.pow(s, e);
      if (!r.eql(r.sqr(o), s))
        throw new Error("Cannot find square root");
      return o;
    };
  }
  if (t % _8n$3 === _5n$3) {
    const e = (t - _5n$3) / _8n$3;
    return function(r, s) {
      const o = r.mul(s, _2n$a), a = r.pow(o, e), c = r.mul(s, a), h = r.mul(r.mul(c, _2n$a), a), p = r.mul(c, r.sub(h, r.ONE));
      if (!r.eql(r.sqr(p), s))
        throw new Error("Cannot find square root");
      return p;
    };
  }
  return tonelliShanks$3(t);
}
const FIELD_FIELDS$3 = [
  "create",
  "isValid",
  "is0",
  "neg",
  "inv",
  "sqrt",
  "sqr",
  "eql",
  "add",
  "sub",
  "mul",
  "pow",
  "div",
  "addN",
  "subN",
  "mulN",
  "sqrN"
];
function validateField$3(t) {
  const e = {
    ORDER: "bigint",
    MASK: "bigint",
    BYTES: "isSafeInteger",
    BITS: "isSafeInteger"
  }, n = FIELD_FIELDS$3.reduce((r, s) => (r[s] = "function", r), e);
  return validateObject$3(t, n);
}
function FpPow$3(t, e, n) {
  if (n < _0n$h)
    throw new Error("Expected power > 0");
  if (n === _0n$h)
    return t.ONE;
  if (n === _1n$i)
    return e;
  let r = t.ONE, s = e;
  for (; n > _0n$h; )
    n & _1n$i && (r = t.mul(r, s)), s = t.sqr(s), n >>= _1n$i;
  return r;
}
function FpInvertBatch$3(t, e) {
  const n = new Array(e.length), r = e.reduce((o, a, c) => t.is0(a) ? o : (n[c] = o, t.mul(o, a)), t.ONE), s = t.inv(r);
  return e.reduceRight((o, a, c) => t.is0(a) ? o : (n[c] = t.mul(o, n[c]), t.mul(o, a)), s), n;
}
function nLength$3(t, e) {
  const n = e !== void 0 ? e : t.toString(2).length, r = Math.ceil(n / 8);
  return { nBitLength: n, nByteLength: r };
}
function Field$3(t, e, n = !1, r = {}) {
  if (t <= _0n$h)
    throw new Error(`Expected Field ORDER > 0, got ${t}`);
  const { nBitLength: s, nByteLength: o } = nLength$3(t, e);
  if (o > 2048)
    throw new Error("Field lengths over 2048 bytes are not supported");
  const a = FpSqrt$3(t), c = Object.freeze({
    ORDER: t,
    BITS: s,
    BYTES: o,
    MASK: bitMask$3(s),
    ZERO: _0n$h,
    ONE: _1n$i,
    create: (h) => mod$3(h, t),
    isValid: (h) => {
      if (typeof h != "bigint")
        throw new Error(`Invalid field element: expected bigint, got ${typeof h}`);
      return _0n$h <= h && h < t;
    },
    is0: (h) => h === _0n$h,
    isOdd: (h) => (h & _1n$i) === _1n$i,
    neg: (h) => mod$3(-h, t),
    eql: (h, p) => h === p,
    sqr: (h) => mod$3(h * h, t),
    add: (h, p) => mod$3(h + p, t),
    sub: (h, p) => mod$3(h - p, t),
    mul: (h, p) => mod$3(h * p, t),
    pow: (h, p) => FpPow$3(c, h, p),
    div: (h, p) => mod$3(h * invert$3(p, t), t),
    // Same as above, but doesn't normalize
    sqrN: (h) => h * h,
    addN: (h, p) => h + p,
    subN: (h, p) => h - p,
    mulN: (h, p) => h * p,
    inv: (h) => invert$3(h, t),
    sqrt: r.sqrt || ((h) => a(c, h)),
    invertBatch: (h) => FpInvertBatch$3(c, h),
    // TODO: do we really need constant cmov?
    // We don't have const-time bigints anyway, so probably will be not very useful
    cmov: (h, p, g) => g ? p : h,
    toBytes: (h) => n ? numberToBytesLE$3(h, o) : numberToBytesBE$3(h, o),
    fromBytes: (h) => {
      if (h.length !== o)
        throw new Error(`Fp.fromBytes: expected ${o}, got ${h.length}`);
      return n ? bytesToNumberLE$3(h) : bytesToNumberBE$3(h);
    }
  });
  return Object.freeze(c);
}
function getFieldBytesLength$1(t) {
  if (typeof t != "bigint")
    throw new Error("field order must be bigint");
  const e = t.toString(2).length;
  return Math.ceil(e / 8);
}
function getMinHashLength$1(t) {
  const e = getFieldBytesLength$1(t);
  return e + Math.ceil(e / 2);
}
function mapHashToField$1(t, e, n = !1) {
  const r = t.length, s = getFieldBytesLength$1(e), o = getMinHashLength$1(e);
  if (r < 16 || r < o || r > 1024)
    throw new Error(`expected ${o}-1024 bytes of input, got ${r}`);
  const a = n ? bytesToNumberBE$3(t) : bytesToNumberLE$3(t), c = mod$3(a, e - _1n$i) + _1n$i;
  return n ? numberToBytesLE$3(c, s) : numberToBytesBE$3(c, s);
}
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
const _0n$g = BigInt(0), _1n$h = BigInt(1);
function wNAF$3(t, e) {
  const n = (s, o) => {
    const a = o.negate();
    return s ? a : o;
  }, r = (s) => {
    const o = Math.ceil(e / s) + 1, a = 2 ** (s - 1);
    return { windows: o, windowSize: a };
  };
  return {
    constTimeNegate: n,
    // non-const time multiplication ladder
    unsafeLadder(s, o) {
      let a = t.ZERO, c = s;
      for (; o > _0n$g; )
        o & _1n$h && (a = a.add(c)), c = c.double(), o >>= _1n$h;
      return a;
    },
    /**
     * Creates a wNAF precomputation window. Used for caching.
     * Default window size is set by `utils.precompute()` and is equal to 8.
     * Number of precomputed points depends on the curve size:
     * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:
     * - 𝑊 is the window size
     * - 𝑛 is the bitlength of the curve order.
     * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.
     * @returns precomputed point tables flattened to a single array
     */
    precomputeWindow(s, o) {
      const { windows: a, windowSize: c } = r(o), h = [];
      let p = s, g = p;
      for (let y = 0; y < a; y++) {
        g = p, h.push(g);
        for (let $ = 1; $ < c; $++)
          g = g.add(p), h.push(g);
        p = g.double();
      }
      return h;
    },
    /**
     * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.
     * @param W window size
     * @param precomputes precomputed tables
     * @param n scalar (we don't check here, but should be less than curve order)
     * @returns real and fake (for const-time) points
     */
    wNAF(s, o, a) {
      const { windows: c, windowSize: h } = r(s);
      let p = t.ZERO, g = t.BASE;
      const y = BigInt(2 ** s - 1), $ = 2 ** s, k = BigInt(s);
      for (let S = 0; S < c; S++) {
        const w = S * h;
        let x = Number(a & y);
        a >>= k, x > h && (x -= $, a += _1n$h);
        const A = w, N = w + Math.abs(x) - 1, C = S % 2 !== 0, W = x < 0;
        x === 0 ? g = g.add(n(C, o[A])) : p = p.add(n(W, o[N]));
      }
      return { p, f: g };
    },
    wNAFCached(s, o, a, c) {
      const h = s._WINDOW_SIZE || 1;
      let p = o.get(s);
      return p || (p = this.precomputeWindow(s, h), h !== 1 && o.set(s, c(p))), this.wNAF(h, p, a);
    }
  };
}
function validateBasic$3(t) {
  return validateField$3(t.Fp), validateObject$3(t, {
    n: "bigint",
    h: "bigint",
    Gx: "field",
    Gy: "field"
  }, {
    nBitLength: "isSafeInteger",
    nByteLength: "isSafeInteger"
  }), Object.freeze({
    ...nLength$3(t.n, t.nBitLength),
    ...t,
    p: t.Fp.ORDER
  });
}
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
function validatePointOpts$3(t) {
  const e = validateBasic$3(t);
  validateObject$3(e, {
    a: "field",
    b: "field"
  }, {
    allowedPrivateKeyLengths: "array",
    wrapPrivateKey: "boolean",
    isTorsionFree: "function",
    clearCofactor: "function",
    allowInfinityPoint: "boolean",
    fromBytes: "function",
    toBytes: "function"
  });
  const { endo: n, Fp: r, a: s } = e;
  if (n) {
    if (!r.eql(s, r.ZERO))
      throw new Error("Endomorphism can only be defined for Koblitz curves that have a=0");
    if (typeof n != "object" || typeof n.beta != "bigint" || typeof n.splitScalar != "function")
      throw new Error("Expected endomorphism with beta: bigint and splitScalar: function");
  }
  return Object.freeze({ ...e });
}
const { bytesToNumberBE: b2n$3, hexToBytes: h2b$3 } = ut$3, DER$3 = {
  // asn.1 DER encoding utils
  Err: class extends Error {
    constructor(e = "") {
      super(e);
    }
  },
  _parseInt(t) {
    const { Err: e } = DER$3;
    if (t.length < 2 || t[0] !== 2)
      throw new e("Invalid signature integer tag");
    const n = t[1], r = t.subarray(2, n + 2);
    if (!n || r.length !== n)
      throw new e("Invalid signature integer: wrong length");
    if (r[0] & 128)
      throw new e("Invalid signature integer: negative");
    if (r[0] === 0 && !(r[1] & 128))
      throw new e("Invalid signature integer: unnecessary leading zero");
    return { d: b2n$3(r), l: t.subarray(n + 2) };
  },
  toSig(t) {
    const { Err: e } = DER$3, n = typeof t == "string" ? h2b$3(t) : t;
    if (!(n instanceof Uint8Array))
      throw new Error("ui8a expected");
    let r = n.length;
    if (r < 2 || n[0] != 48)
      throw new e("Invalid signature tag");
    if (n[1] !== r - 2)
      throw new e("Invalid signature: incorrect length");
    const { d: s, l: o } = DER$3._parseInt(n.subarray(2)), { d: a, l: c } = DER$3._parseInt(o);
    if (c.length)
      throw new e("Invalid signature: left bytes after parsing");
    return { r: s, s: a };
  },
  hexFromSig(t) {
    const e = (p) => Number.parseInt(p[0], 16) & 8 ? "00" + p : p, n = (p) => {
      const g = p.toString(16);
      return g.length & 1 ? `0${g}` : g;
    }, r = e(n(t.s)), s = e(n(t.r)), o = r.length / 2, a = s.length / 2, c = n(o), h = n(a);
    return `30${n(a + o + 4)}02${h}${s}02${c}${r}`;
  }
}, _0n$f = BigInt(0), _1n$g = BigInt(1);
BigInt(2);
const _3n$6 = BigInt(3);
BigInt(4);
function weierstrassPoints$3(t) {
  const e = validatePointOpts$3(t), { Fp: n } = e, r = e.toBytes || ((S, w, x) => {
    const A = w.toAffine();
    return concatBytes$7(Uint8Array.from([4]), n.toBytes(A.x), n.toBytes(A.y));
  }), s = e.fromBytes || ((S) => {
    const w = S.subarray(1), x = n.fromBytes(w.subarray(0, n.BYTES)), A = n.fromBytes(w.subarray(n.BYTES, 2 * n.BYTES));
    return { x, y: A };
  });
  function o(S) {
    const { a: w, b: x } = e, A = n.sqr(S), N = n.mul(A, S);
    return n.add(n.add(N, n.mul(S, w)), x);
  }
  if (!n.eql(n.sqr(e.Gy), o(e.Gx)))
    throw new Error("bad generator point: equation left != right");
  function a(S) {
    return typeof S == "bigint" && _0n$f < S && S < e.n;
  }
  function c(S) {
    if (!a(S))
      throw new Error("Expected valid bigint: 0 < bigint < curve.n");
  }
  function h(S) {
    const { allowedPrivateKeyLengths: w, nByteLength: x, wrapPrivateKey: A, n: N } = e;
    if (w && typeof S != "bigint") {
      if (S instanceof Uint8Array && (S = bytesToHex$6(S)), typeof S != "string" || !w.includes(S.length))
        throw new Error("Invalid key");
      S = S.padStart(x * 2, "0");
    }
    let C;
    try {
      C = typeof S == "bigint" ? S : bytesToNumberBE$3(ensureBytes$4("private key", S, x));
    } catch {
      throw new Error(`private key must be ${x} bytes, hex or bigint, not ${typeof S}`);
    }
    return A && (C = mod$3(C, N)), c(C), C;
  }
  const p = /* @__PURE__ */ new Map();
  function g(S) {
    if (!(S instanceof y))
      throw new Error("ProjectivePoint expected");
  }
  class y {
    constructor(w, x, A) {
      if (this.px = w, this.py = x, this.pz = A, w == null || !n.isValid(w))
        throw new Error("x required");
      if (x == null || !n.isValid(x))
        throw new Error("y required");
      if (A == null || !n.isValid(A))
        throw new Error("z required");
    }
    // Does not validate if the point is on-curve.
    // Use fromHex instead, or call assertValidity() later.
    static fromAffine(w) {
      const { x, y: A } = w || {};
      if (!w || !n.isValid(x) || !n.isValid(A))
        throw new Error("invalid affine point");
      if (w instanceof y)
        throw new Error("projective point not allowed");
      const N = (C) => n.eql(C, n.ZERO);
      return N(x) && N(A) ? y.ZERO : new y(x, A, n.ONE);
    }
    get x() {
      return this.toAffine().x;
    }
    get y() {
      return this.toAffine().y;
    }
    /**
     * Takes a bunch of Projective Points but executes only one
     * inversion on all of them. Inversion is very slow operation,
     * so this improves performance massively.
     * Optimization: converts a list of projective points to a list of identical points with Z=1.
     */
    static normalizeZ(w) {
      const x = n.invertBatch(w.map((A) => A.pz));
      return w.map((A, N) => A.toAffine(x[N])).map(y.fromAffine);
    }
    /**
     * Converts hash string or Uint8Array to Point.
     * @param hex short/long ECDSA hex
     */
    static fromHex(w) {
      const x = y.fromAffine(s(ensureBytes$4("pointHex", w)));
      return x.assertValidity(), x;
    }
    // Multiplies generator point by privateKey.
    static fromPrivateKey(w) {
      return y.BASE.multiply(h(w));
    }
    // "Private method", don't use it directly
    _setWindowSize(w) {
      this._WINDOW_SIZE = w, p.delete(this);
    }
    // A point on curve is valid if it conforms to equation.
    assertValidity() {
      if (this.is0()) {
        if (e.allowInfinityPoint && !n.is0(this.py))
          return;
        throw new Error("bad point: ZERO");
      }
      const { x: w, y: x } = this.toAffine();
      if (!n.isValid(w) || !n.isValid(x))
        throw new Error("bad point: x or y not FE");
      const A = n.sqr(x), N = o(w);
      if (!n.eql(A, N))
        throw new Error("bad point: equation left != right");
      if (!this.isTorsionFree())
        throw new Error("bad point: not in prime-order subgroup");
    }
    hasEvenY() {
      const { y: w } = this.toAffine();
      if (n.isOdd)
        return !n.isOdd(w);
      throw new Error("Field doesn't support isOdd");
    }
    /**
     * Compare one point to another.
     */
    equals(w) {
      g(w);
      const { px: x, py: A, pz: N } = this, { px: C, py: W, pz: q } = w, I = n.eql(n.mul(x, q), n.mul(C, N)), L = n.eql(n.mul(A, q), n.mul(W, N));
      return I && L;
    }
    /**
     * Flips point to one corresponding to (x, -y) in Affine coordinates.
     */
    negate() {
      return new y(this.px, n.neg(this.py), this.pz);
    }
    // Renes-Costello-Batina exception-free doubling formula.
    // There is 30% faster Jacobian formula, but it is not complete.
    // https://eprint.iacr.org/2015/1060, algorithm 3
    // Cost: 8M + 3S + 3*a + 2*b3 + 15add.
    double() {
      const { a: w, b: x } = e, A = n.mul(x, _3n$6), { px: N, py: C, pz: W } = this;
      let q = n.ZERO, I = n.ZERO, L = n.ZERO, P = n.mul(N, N), ie = n.mul(C, C), te = n.mul(W, W), T = n.mul(N, C);
      return T = n.add(T, T), L = n.mul(N, W), L = n.add(L, L), q = n.mul(w, L), I = n.mul(A, te), I = n.add(q, I), q = n.sub(ie, I), I = n.add(ie, I), I = n.mul(q, I), q = n.mul(T, q), L = n.mul(A, L), te = n.mul(w, te), T = n.sub(P, te), T = n.mul(w, T), T = n.add(T, L), L = n.add(P, P), P = n.add(L, P), P = n.add(P, te), P = n.mul(P, T), I = n.add(I, P), te = n.mul(C, W), te = n.add(te, te), P = n.mul(te, T), q = n.sub(q, P), L = n.mul(te, ie), L = n.add(L, L), L = n.add(L, L), new y(q, I, L);
    }
    // Renes-Costello-Batina exception-free addition formula.
    // There is 30% faster Jacobian formula, but it is not complete.
    // https://eprint.iacr.org/2015/1060, algorithm 1
    // Cost: 12M + 0S + 3*a + 3*b3 + 23add.
    add(w) {
      g(w);
      const { px: x, py: A, pz: N } = this, { px: C, py: W, pz: q } = w;
      let I = n.ZERO, L = n.ZERO, P = n.ZERO;
      const ie = e.a, te = n.mul(e.b, _3n$6);
      let T = n.mul(x, C), O = n.mul(A, W), K = n.mul(N, q), ae = n.add(x, A), E = n.add(C, W);
      ae = n.mul(ae, E), E = n.add(T, O), ae = n.sub(ae, E), E = n.add(x, N);
      let B = n.add(C, q);
      return E = n.mul(E, B), B = n.add(T, K), E = n.sub(E, B), B = n.add(A, N), I = n.add(W, q), B = n.mul(B, I), I = n.add(O, K), B = n.sub(B, I), P = n.mul(ie, E), I = n.mul(te, K), P = n.add(I, P), I = n.sub(O, P), P = n.add(O, P), L = n.mul(I, P), O = n.add(T, T), O = n.add(O, T), K = n.mul(ie, K), E = n.mul(te, E), O = n.add(O, K), K = n.sub(T, K), K = n.mul(ie, K), E = n.add(E, K), T = n.mul(O, E), L = n.add(L, T), T = n.mul(B, E), I = n.mul(ae, I), I = n.sub(I, T), T = n.mul(ae, O), P = n.mul(B, P), P = n.add(P, T), new y(I, L, P);
    }
    subtract(w) {
      return this.add(w.negate());
    }
    is0() {
      return this.equals(y.ZERO);
    }
    wNAF(w) {
      return k.wNAFCached(this, p, w, (x) => {
        const A = n.invertBatch(x.map((N) => N.pz));
        return x.map((N, C) => N.toAffine(A[C])).map(y.fromAffine);
      });
    }
    /**
     * Non-constant-time multiplication. Uses double-and-add algorithm.
     * It's faster, but should only be used when you don't care about
     * an exposed private key e.g. sig verification, which works over *public* keys.
     */
    multiplyUnsafe(w) {
      const x = y.ZERO;
      if (w === _0n$f)
        return x;
      if (c(w), w === _1n$g)
        return this;
      const { endo: A } = e;
      if (!A)
        return k.unsafeLadder(this, w);
      let { k1neg: N, k1: C, k2neg: W, k2: q } = A.splitScalar(w), I = x, L = x, P = this;
      for (; C > _0n$f || q > _0n$f; )
        C & _1n$g && (I = I.add(P)), q & _1n$g && (L = L.add(P)), P = P.double(), C >>= _1n$g, q >>= _1n$g;
      return N && (I = I.negate()), W && (L = L.negate()), L = new y(n.mul(L.px, A.beta), L.py, L.pz), I.add(L);
    }
    /**
     * Constant time multiplication.
     * Uses wNAF method. Windowed method may be 10% faster,
     * but takes 2x longer to generate and consumes 2x memory.
     * Uses precomputes when available.
     * Uses endomorphism for Koblitz curves.
     * @param scalar by which the point would be multiplied
     * @returns New point
     */
    multiply(w) {
      c(w);
      let x = w, A, N;
      const { endo: C } = e;
      if (C) {
        const { k1neg: W, k1: q, k2neg: I, k2: L } = C.splitScalar(x);
        let { p: P, f: ie } = this.wNAF(q), { p: te, f: T } = this.wNAF(L);
        P = k.constTimeNegate(W, P), te = k.constTimeNegate(I, te), te = new y(n.mul(te.px, C.beta), te.py, te.pz), A = P.add(te), N = ie.add(T);
      } else {
        const { p: W, f: q } = this.wNAF(x);
        A = W, N = q;
      }
      return y.normalizeZ([A, N])[0];
    }
    /**
     * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.
     * Not using Strauss-Shamir trick: precomputation tables are faster.
     * The trick could be useful if both P and Q are not G (not in our case).
     * @returns non-zero affine point
     */
    multiplyAndAddUnsafe(w, x, A) {
      const N = y.BASE, C = (q, I) => I === _0n$f || I === _1n$g || !q.equals(N) ? q.multiplyUnsafe(I) : q.multiply(I), W = C(this, x).add(C(w, A));
      return W.is0() ? void 0 : W;
    }
    // Converts Projective point to affine (x, y) coordinates.
    // Can accept precomputed Z^-1 - for example, from invertBatch.
    // (x, y, z) ∋ (x=x/z, y=y/z)
    toAffine(w) {
      const { px: x, py: A, pz: N } = this, C = this.is0();
      w == null && (w = C ? n.ONE : n.inv(N));
      const W = n.mul(x, w), q = n.mul(A, w), I = n.mul(N, w);
      if (C)
        return { x: n.ZERO, y: n.ZERO };
      if (!n.eql(I, n.ONE))
        throw new Error("invZ was invalid");
      return { x: W, y: q };
    }
    isTorsionFree() {
      const { h: w, isTorsionFree: x } = e;
      if (w === _1n$g)
        return !0;
      if (x)
        return x(y, this);
      throw new Error("isTorsionFree() has not been declared for the elliptic curve");
    }
    clearCofactor() {
      const { h: w, clearCofactor: x } = e;
      return w === _1n$g ? this : x ? x(y, this) : this.multiplyUnsafe(e.h);
    }
    toRawBytes(w = !0) {
      return this.assertValidity(), r(y, this, w);
    }
    toHex(w = !0) {
      return bytesToHex$6(this.toRawBytes(w));
    }
  }
  y.BASE = new y(e.Gx, e.Gy, n.ONE), y.ZERO = new y(n.ZERO, n.ONE, n.ZERO);
  const $ = e.nBitLength, k = wNAF$3(y, e.endo ? Math.ceil($ / 2) : $);
  return {
    CURVE: e,
    ProjectivePoint: y,
    normPrivateKeyToScalar: h,
    weierstrassEquation: o,
    isWithinCurveOrder: a
  };
}
function validateOpts$3(t) {
  const e = validateBasic$3(t);
  return validateObject$3(e, {
    hash: "hash",
    hmac: "function",
    randomBytes: "function"
  }, {
    bits2int: "function",
    bits2int_modN: "function",
    lowS: "boolean"
  }), Object.freeze({ lowS: !0, ...e });
}
function weierstrass$3(t) {
  const e = validateOpts$3(t), { Fp: n, n: r } = e, s = n.BYTES + 1, o = 2 * n.BYTES + 1;
  function a(E) {
    return _0n$f < E && E < n.ORDER;
  }
  function c(E) {
    return mod$3(E, r);
  }
  function h(E) {
    return invert$3(E, r);
  }
  const { ProjectivePoint: p, normPrivateKeyToScalar: g, weierstrassEquation: y, isWithinCurveOrder: $ } = weierstrassPoints$3({
    ...e,
    toBytes(E, B, H) {
      const Q = B.toAffine(), F = n.toBytes(Q.x), ce = concatBytes$7;
      return H ? ce(Uint8Array.from([B.hasEvenY() ? 2 : 3]), F) : ce(Uint8Array.from([4]), F, n.toBytes(Q.y));
    },
    fromBytes(E) {
      const B = E.length, H = E[0], Q = E.subarray(1);
      if (B === s && (H === 2 || H === 3)) {
        const F = bytesToNumberBE$3(Q);
        if (!a(F))
          throw new Error("Point is not on curve");
        const ce = y(F);
        let oe = n.sqrt(ce);
        const le = (oe & _1n$g) === _1n$g;
        return (H & 1) === 1 !== le && (oe = n.neg(oe)), { x: F, y: oe };
      } else if (B === o && H === 4) {
        const F = n.fromBytes(Q.subarray(0, n.BYTES)), ce = n.fromBytes(Q.subarray(n.BYTES, 2 * n.BYTES));
        return { x: F, y: ce };
      } else
        throw new Error(`Point of length ${B} was invalid. Expected ${s} compressed bytes or ${o} uncompressed bytes`);
    }
  }), k = (E) => bytesToHex$6(numberToBytesBE$3(E, e.nByteLength));
  function S(E) {
    const B = r >> _1n$g;
    return E > B;
  }
  function w(E) {
    return S(E) ? c(-E) : E;
  }
  const x = (E, B, H) => bytesToNumberBE$3(E.slice(B, H));
  class A {
    constructor(B, H, Q) {
      this.r = B, this.s = H, this.recovery = Q, this.assertValidity();
    }
    // pair (bytes of r, bytes of s)
    static fromCompact(B) {
      const H = e.nByteLength;
      return B = ensureBytes$4("compactSignature", B, H * 2), new A(x(B, 0, H), x(B, H, 2 * H));
    }
    // DER encoded ECDSA signature
    // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script
    static fromDER(B) {
      const { r: H, s: Q } = DER$3.toSig(ensureBytes$4("DER", B));
      return new A(H, Q);
    }
    assertValidity() {
      if (!$(this.r))
        throw new Error("r must be 0 < r < CURVE.n");
      if (!$(this.s))
        throw new Error("s must be 0 < s < CURVE.n");
    }
    addRecoveryBit(B) {
      return new A(this.r, this.s, B);
    }
    recoverPublicKey(B) {
      const { r: H, s: Q, recovery: F } = this, ce = L(ensureBytes$4("msgHash", B));
      if (F == null || ![0, 1, 2, 3].includes(F))
        throw new Error("recovery id invalid");
      const oe = F === 2 || F === 3 ? H + e.n : H;
      if (oe >= n.ORDER)
        throw new Error("recovery id 2 or 3 invalid");
      const le = F & 1 ? "03" : "02", ve = p.fromHex(le + k(oe)), xe = h(oe), Se = c(-ce * xe), Te = c(Q * xe), Ae = p.BASE.multiplyAndAddUnsafe(ve, Se, Te);
      if (!Ae)
        throw new Error("point at infinify");
      return Ae.assertValidity(), Ae;
    }
    // Signatures should be low-s, to prevent malleability.
    hasHighS() {
      return S(this.s);
    }
    normalizeS() {
      return this.hasHighS() ? new A(this.r, c(-this.s), this.recovery) : this;
    }
    // DER-encoded
    toDERRawBytes() {
      return hexToBytes$6(this.toDERHex());
    }
    toDERHex() {
      return DER$3.hexFromSig({ r: this.r, s: this.s });
    }
    // padded bytes of r, then padded bytes of s
    toCompactRawBytes() {
      return hexToBytes$6(this.toCompactHex());
    }
    toCompactHex() {
      return k(this.r) + k(this.s);
    }
  }
  const N = {
    isValidPrivateKey(E) {
      try {
        return g(E), !0;
      } catch {
        return !1;
      }
    },
    normPrivateKeyToScalar: g,
    /**
     * Produces cryptographically secure private key from random of size
     * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.
     */
    randomPrivateKey: () => {
      const E = getMinHashLength$1(e.n);
      return mapHashToField$1(e.randomBytes(E), e.n);
    },
    /**
     * Creates precompute table for an arbitrary EC point. Makes point "cached".
     * Allows to massively speed-up `point.multiply(scalar)`.
     * @returns cached point
     * @example
     * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));
     * fast.multiply(privKey); // much faster ECDH now
     */
    precompute(E = 8, B = p.BASE) {
      return B._setWindowSize(E), B.multiply(BigInt(3)), B;
    }
  };
  function C(E, B = !0) {
    return p.fromPrivateKey(E).toRawBytes(B);
  }
  function W(E) {
    const B = E instanceof Uint8Array, H = typeof E == "string", Q = (B || H) && E.length;
    return B ? Q === s || Q === o : H ? Q === 2 * s || Q === 2 * o : E instanceof p;
  }
  function q(E, B, H = !0) {
    if (W(E))
      throw new Error("first arg must be private key");
    if (!W(B))
      throw new Error("second arg must be public key");
    return p.fromHex(B).multiply(g(E)).toRawBytes(H);
  }
  const I = e.bits2int || function(E) {
    const B = bytesToNumberBE$3(E), H = E.length * 8 - e.nBitLength;
    return H > 0 ? B >> BigInt(H) : B;
  }, L = e.bits2int_modN || function(E) {
    return c(I(E));
  }, P = bitMask$3(e.nBitLength);
  function ie(E) {
    if (typeof E != "bigint")
      throw new Error("bigint expected");
    if (!(_0n$f <= E && E < P))
      throw new Error(`bigint expected < 2^${e.nBitLength}`);
    return numberToBytesBE$3(E, e.nByteLength);
  }
  function te(E, B, H = T) {
    if (["recovered", "canonical"].some((de) => de in H))
      throw new Error("sign() legacy options not supported");
    const { hash: Q, randomBytes: F } = e;
    let { lowS: ce, prehash: oe, extraEntropy: le } = H;
    ce == null && (ce = !0), E = ensureBytes$4("msgHash", E), oe && (E = ensureBytes$4("prehashed msgHash", Q(E)));
    const ve = L(E), xe = g(B), Se = [ie(xe), ie(ve)];
    if (le != null) {
      const de = le === !0 ? F(n.BYTES) : le;
      Se.push(ensureBytes$4("extraEntropy", de));
    }
    const Te = concatBytes$7(...Se), Ae = ve;
    function Oe(de) {
      const Ue = I(de);
      if (!$(Ue))
        return;
      const Ve = h(Ue), _e = p.BASE.multiply(Ue).toAffine(), Be = c(_e.x);
      if (Be === _0n$f)
        return;
      const Pe = c(Ve * c(Ae + Be * xe));
      if (Pe === _0n$f)
        return;
      let qe = (_e.x === Be ? 0 : 2) | Number(_e.y & _1n$g), Xe = Pe;
      return ce && S(Pe) && (Xe = w(Pe), qe ^= 1), new A(Be, Xe, qe);
    }
    return { seed: Te, k2sig: Oe };
  }
  const T = { lowS: e.lowS, prehash: !1 }, O = { lowS: e.lowS, prehash: !1 };
  function K(E, B, H = T) {
    const { seed: Q, k2sig: F } = te(E, B, H), ce = e;
    return createHmacDrbg$3(ce.hash.outputLen, ce.nByteLength, ce.hmac)(Q, F);
  }
  p.BASE._setWindowSize(8);
  function ae(E, B, H, Q = O) {
    var _e;
    const F = E;
    if (B = ensureBytes$4("msgHash", B), H = ensureBytes$4("publicKey", H), "strict" in Q)
      throw new Error("options.strict was renamed to lowS");
    const { lowS: ce, prehash: oe } = Q;
    let le, ve;
    try {
      if (typeof F == "string" || F instanceof Uint8Array)
        try {
          le = A.fromDER(F);
        } catch (Be) {
          if (!(Be instanceof DER$3.Err))
            throw Be;
          le = A.fromCompact(F);
        }
      else if (typeof F == "object" && typeof F.r == "bigint" && typeof F.s == "bigint") {
        const { r: Be, s: Pe } = F;
        le = new A(Be, Pe);
      } else
        throw new Error("PARSE");
      ve = p.fromHex(H);
    } catch (Be) {
      if (Be.message === "PARSE")
        throw new Error("signature must be Signature instance, Uint8Array or hex string");
      return !1;
    }
    if (ce && le.hasHighS())
      return !1;
    oe && (B = e.hash(B));
    const { r: xe, s: Se } = le, Te = L(B), Ae = h(Se), Oe = c(Te * Ae), de = c(xe * Ae), Ue = (_e = p.BASE.multiplyAndAddUnsafe(ve, Oe, de)) == null ? void 0 : _e.toAffine();
    return Ue ? c(Ue.x) === xe : !1;
  }
  return {
    CURVE: e,
    getPublicKey: C,
    getSharedSecret: q,
    sign: K,
    verify: ae,
    ProjectivePoint: p,
    Signature: A,
    utils: N
  };
}
let HMAC$6 = class extends Hash$5 {
  constructor(e, n) {
    super(), this.finished = !1, this.destroyed = !1, hash$6(e);
    const r = toBytes$6(n);
    if (this.iHash = e.create(), typeof this.iHash.update != "function")
      throw new Error("Expected instance of class which extends utils.Hash");
    this.blockLen = this.iHash.blockLen, this.outputLen = this.iHash.outputLen;
    const s = this.blockLen, o = new Uint8Array(s);
    o.set(r.length > s ? e.create().update(r).digest() : r);
    for (let a = 0; a < o.length; a++)
      o[a] ^= 54;
    this.iHash.update(o), this.oHash = e.create();
    for (let a = 0; a < o.length; a++)
      o[a] ^= 106;
    this.oHash.update(o), o.fill(0);
  }
  update(e) {
    return exists$6(this), this.iHash.update(e), this;
  }
  digestInto(e) {
    exists$6(this), bytes$7(e, this.outputLen), this.finished = !0, this.iHash.digestInto(e), this.oHash.update(e), this.oHash.digestInto(e), this.destroy();
  }
  digest() {
    const e = new Uint8Array(this.oHash.outputLen);
    return this.digestInto(e), e;
  }
  _cloneInto(e) {
    e || (e = Object.create(Object.getPrototypeOf(this), {}));
    const { oHash: n, iHash: r, finished: s, destroyed: o, blockLen: a, outputLen: c } = this;
    return e = e, e.finished = s, e.destroyed = o, e.blockLen = a, e.outputLen = c, e.oHash = n._cloneInto(e.oHash), e.iHash = r._cloneInto(e.iHash), e;
  }
  destroy() {
    this.destroyed = !0, this.oHash.destroy(), this.iHash.destroy();
  }
};
const hmac$6 = (t, e, n) => new HMAC$6(t, e).update(n).digest();
hmac$6.create = (t, e) => new HMAC$6(t, e);
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
function getHash$3(t) {
  return {
    hash: t,
    hmac: (e, ...n) => hmac$6(t, e, concatBytes$8(...n)),
    randomBytes: randomBytes$4
  };
}
function createCurve$3(t, e) {
  const n = (r) => weierstrass$3({ ...t, ...getHash$3(r) });
  return Object.freeze({ ...n(e), create: n });
}
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
const secp256k1P$3 = BigInt("0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f"), secp256k1N$3 = BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141"), _1n$f = BigInt(1), _2n$9 = BigInt(2), divNearest$3 = (t, e) => (t + e / _2n$9) / e;
function sqrtMod$3(t) {
  const e = secp256k1P$3, n = BigInt(3), r = BigInt(6), s = BigInt(11), o = BigInt(22), a = BigInt(23), c = BigInt(44), h = BigInt(88), p = t * t * t % e, g = p * p * t % e, y = pow2$3(g, n, e) * g % e, $ = pow2$3(y, n, e) * g % e, k = pow2$3($, _2n$9, e) * p % e, S = pow2$3(k, s, e) * k % e, w = pow2$3(S, o, e) * S % e, x = pow2$3(w, c, e) * w % e, A = pow2$3(x, h, e) * x % e, N = pow2$3(A, c, e) * w % e, C = pow2$3(N, n, e) * g % e, W = pow2$3(C, a, e) * S % e, q = pow2$3(W, r, e) * p % e, I = pow2$3(q, _2n$9, e);
  if (!Fp$3.eql(Fp$3.sqr(I), t))
    throw new Error("Cannot find square root");
  return I;
}
const Fp$3 = Field$3(secp256k1P$3, void 0, void 0, { sqrt: sqrtMod$3 }), secp256k1$3 = createCurve$3({
  a: BigInt(0),
  b: BigInt(7),
  Fp: Fp$3,
  n: secp256k1N$3,
  // Base point (x, y) aka generator point
  Gx: BigInt("55066263022277343669578718895168534326250603453777594175500187360389116729240"),
  Gy: BigInt("32670510020758816978083085130507043184471273380659243275938904335757337482424"),
  h: BigInt(1),
  lowS: !0,
  /**
   * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.
   * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.
   * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.
   * Explanation: https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066
   */
  endo: {
    beta: BigInt("0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee"),
    splitScalar: (t) => {
      const e = secp256k1N$3, n = BigInt("0x3086d221a7d46bcde86c90e49284eb15"), r = -_1n$f * BigInt("0xe4437ed6010e88286f547fa90abfe4c3"), s = BigInt("0x114ca50f7a8e2f3f657c1108d9d44cfd8"), o = n, a = BigInt("0x100000000000000000000000000000000"), c = divNearest$3(o * t, e), h = divNearest$3(-r * t, e);
      let p = mod$3(t - c * n - h * s, e), g = mod$3(-c * r - h * o, e);
      const y = p > a, $ = g > a;
      if (y && (p = e - p), $ && (g = e - g), p > a || g > a)
        throw new Error("splitScalar: Endomorphism failed, k=" + t);
      return { k1neg: y, k1: p, k2neg: $, k2: g };
    }
  }
}, sha256$6), _0n$e = BigInt(0), fe$2 = (t) => typeof t == "bigint" && _0n$e < t && t < secp256k1P$3, ge$2 = (t) => typeof t == "bigint" && _0n$e < t && t < secp256k1N$3, TAGGED_HASH_PREFIXES$2 = {};
function taggedHash$2(t, ...e) {
  let n = TAGGED_HASH_PREFIXES$2[t];
  if (n === void 0) {
    const r = sha256$6(Uint8Array.from(t, (s) => s.charCodeAt(0)));
    n = concatBytes$7(r, r), TAGGED_HASH_PREFIXES$2[t] = n;
  }
  return sha256$6(concatBytes$7(n, ...e));
}
const pointToBytes$2 = (t) => t.toRawBytes(!0).slice(1), numTo32b$2 = (t) => numberToBytesBE$3(t, 32), modP$2 = (t) => mod$3(t, secp256k1P$3), modN$2 = (t) => mod$3(t, secp256k1N$3), Point$3 = secp256k1$3.ProjectivePoint, GmulAdd$2 = (t, e, n) => Point$3.BASE.multiplyAndAddUnsafe(t, e, n);
function schnorrGetExtPubKey$2(t) {
  let e = secp256k1$3.utils.normPrivateKeyToScalar(t), n = Point$3.fromPrivateKey(e);
  return { scalar: n.hasEvenY() ? e : modN$2(-e), bytes: pointToBytes$2(n) };
}
function lift_x$2(t) {
  if (!fe$2(t))
    throw new Error("bad x: need 0 < x < p");
  const e = modP$2(t * t), n = modP$2(e * t + BigInt(7));
  let r = sqrtMod$3(n);
  r % _2n$9 !== _0n$e && (r = modP$2(-r));
  const s = new Point$3(t, r, _1n$f);
  return s.assertValidity(), s;
}
function challenge$2(...t) {
  return modN$2(bytesToNumberBE$3(taggedHash$2("BIP0340/challenge", ...t)));
}
function schnorrGetPublicKey$2(t) {
  return schnorrGetExtPubKey$2(t).bytes;
}
function schnorrSign$2(t, e, n = randomBytes$4(32)) {
  const r = ensureBytes$4("message", t), { bytes: s, scalar: o } = schnorrGetExtPubKey$2(e), a = ensureBytes$4("auxRand", n, 32), c = numTo32b$2(o ^ bytesToNumberBE$3(taggedHash$2("BIP0340/aux", a))), h = taggedHash$2("BIP0340/nonce", c, s, r), p = modN$2(bytesToNumberBE$3(h));
  if (p === _0n$e)
    throw new Error("sign failed: k is zero");
  const { bytes: g, scalar: y } = schnorrGetExtPubKey$2(p), $ = challenge$2(g, s, r), k = new Uint8Array(64);
  if (k.set(g, 0), k.set(numTo32b$2(modN$2(y + $ * o)), 32), !schnorrVerify$2(k, r, s))
    throw new Error("sign: Invalid signature produced");
  return k;
}
function schnorrVerify$2(t, e, n) {
  const r = ensureBytes$4("signature", t, 64), s = ensureBytes$4("message", e), o = ensureBytes$4("publicKey", n, 32);
  try {
    const a = lift_x$2(bytesToNumberBE$3(o)), c = bytesToNumberBE$3(r.subarray(0, 32));
    if (!fe$2(c))
      return !1;
    const h = bytesToNumberBE$3(r.subarray(32, 64));
    if (!ge$2(h))
      return !1;
    const p = challenge$2(numTo32b$2(c), pointToBytes$2(a), s), g = GmulAdd$2(a, h, modN$2(-p));
    return !(!g || !g.hasEvenY() || g.toAffine().x !== c);
  } catch {
    return !1;
  }
}
const schnorr$2 = {
  getPublicKey: schnorrGetPublicKey$2,
  sign: schnorrSign$2,
  verify: schnorrVerify$2,
  utils: {
    randomPrivateKey: secp256k1$3.utils.randomPrivateKey,
    lift_x: lift_x$2,
    pointToBytes: pointToBytes$2,
    numberToBytesBE: numberToBytesBE$3,
    bytesToNumberBE: bytesToNumberBE$3,
    taggedHash: taggedHash$2,
    mod: mod$3
  }
}, crypto$4 = typeof globalThis == "object" && "crypto" in globalThis ? globalThis.crypto : void 0;
/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */
const u8a$5 = (t) => t instanceof Uint8Array, createView$4 = (t) => new DataView(t.buffer, t.byteOffset, t.byteLength), rotr$4 = (t, e) => t << 32 - e | t >>> e, isLE$6 = new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68;
if (!isLE$6)
  throw new Error("Non little-endian hardware is not supported");
const hexes$5 = Array.from({ length: 256 }, (t, e) => e.toString(16).padStart(2, "0"));
function bytesToHex$5(t) {
  if (!u8a$5(t))
    throw new Error("Uint8Array expected");
  let e = "";
  for (let n = 0; n < t.length; n++)
    e += hexes$5[t[n]];
  return e;
}
function hexToBytes$5(t) {
  if (typeof t != "string")
    throw new Error("hex string expected, got " + typeof t);
  const e = t.length;
  if (e % 2)
    throw new Error("padded hex string expected, got unpadded hex of length " + e);
  const n = new Uint8Array(e / 2);
  for (let r = 0; r < n.length; r++) {
    const s = r * 2, o = t.slice(s, s + 2), a = Number.parseInt(o, 16);
    if (Number.isNaN(a) || a < 0)
      throw new Error("Invalid byte sequence");
    n[r] = a;
  }
  return n;
}
function utf8ToBytes$9(t) {
  if (typeof t != "string")
    throw new Error(`utf8ToBytes expected string, got ${typeof t}`);
  return new Uint8Array(new TextEncoder().encode(t));
}
function toBytes$5(t) {
  if (typeof t == "string" && (t = utf8ToBytes$9(t)), !u8a$5(t))
    throw new Error(`expected Uint8Array, got ${typeof t}`);
  return t;
}
function concatBytes$6(...t) {
  const e = new Uint8Array(t.reduce((r, s) => r + s.length, 0));
  let n = 0;
  return t.forEach((r) => {
    if (!u8a$5(r))
      throw new Error("Uint8Array expected");
    e.set(r, n), n += r.length;
  }), e;
}
let Hash$4 = class {
  // Safe version that clones internal state
  clone() {
    return this._cloneInto();
  }
};
function wrapConstructor$4(t) {
  const e = (r) => t().update(toBytes$5(r)).digest(), n = t();
  return e.outputLen = n.outputLen, e.blockLen = n.blockLen, e.create = () => t(), e;
}
function randomBytes$3(t = 32) {
  if (crypto$4 && typeof crypto$4.getRandomValues == "function")
    return crypto$4.getRandomValues(new Uint8Array(t));
  throw new Error("crypto.getRandomValues must be defined");
}
function number$6(t) {
  if (!Number.isSafeInteger(t) || t < 0)
    throw new Error(`Wrong positive integer: ${t}`);
}
function bool$5(t) {
  if (typeof t != "boolean")
    throw new Error(`Expected boolean, not ${t}`);
}
function bytes$6(t, ...e) {
  if (!(t instanceof Uint8Array))
    throw new Error("Expected Uint8Array");
  if (e.length > 0 && !e.includes(t.length))
    throw new Error(`Expected Uint8Array of length ${e}, not of length=${t.length}`);
}
function hash$5(t) {
  if (typeof t != "function" || typeof t.create != "function")
    throw new Error("Hash should be wrapped by utils.wrapConstructor");
  number$6(t.outputLen), number$6(t.blockLen);
}
function exists$5(t, e = !0) {
  if (t.destroyed)
    throw new Error("Hash instance has been destroyed");
  if (e && t.finished)
    throw new Error("Hash#digest() has already been called");
}
function output$5(t, e) {
  bytes$6(t);
  const n = e.outputLen;
  if (t.length < n)
    throw new Error(`digestInto() expects output buffer of length at least ${n}`);
}
const assert$4 = {
  number: number$6,
  bool: bool$5,
  bytes: bytes$6,
  hash: hash$5,
  exists: exists$5,
  output: output$5
};
function setBigUint64$5(t, e, n, r) {
  if (typeof t.setBigUint64 == "function")
    return t.setBigUint64(e, n, r);
  const s = BigInt(32), o = BigInt(4294967295), a = Number(n >> s & o), c = Number(n & o), h = r ? 4 : 0, p = r ? 0 : 4;
  t.setUint32(e + h, a, r), t.setUint32(e + p, c, r);
}
let SHA2$4 = class extends Hash$4 {
  constructor(e, n, r, s) {
    super(), this.blockLen = e, this.outputLen = n, this.padOffset = r, this.isLE = s, this.finished = !1, this.length = 0, this.pos = 0, this.destroyed = !1, this.buffer = new Uint8Array(e), this.view = createView$4(this.buffer);
  }
  update(e) {
    assert$4.exists(this);
    const { view: n, buffer: r, blockLen: s } = this;
    e = toBytes$5(e);
    const o = e.length;
    for (let a = 0; a < o; ) {
      const c = Math.min(s - this.pos, o - a);
      if (c === s) {
        const h = createView$4(e);
        for (; s <= o - a; a += s)
          this.process(h, a);
        continue;
      }
      r.set(e.subarray(a, a + c), this.pos), this.pos += c, a += c, this.pos === s && (this.process(n, 0), this.pos = 0);
    }
    return this.length += e.length, this.roundClean(), this;
  }
  digestInto(e) {
    assert$4.exists(this), assert$4.output(e, this), this.finished = !0;
    const { buffer: n, view: r, blockLen: s, isLE: o } = this;
    let { pos: a } = this;
    n[a++] = 128, this.buffer.subarray(a).fill(0), this.padOffset > s - a && (this.process(r, 0), a = 0);
    for (let y = a; y < s; y++)
      n[y] = 0;
    setBigUint64$5(r, s - 8, BigInt(this.length * 8), o), this.process(r, 0);
    const c = createView$4(e), h = this.outputLen;
    if (h % 4)
      throw new Error("_sha2: outputLen should be aligned to 32bit");
    const p = h / 4, g = this.get();
    if (p > g.length)
      throw new Error("_sha2: outputLen bigger than state");
    for (let y = 0; y < p; y++)
      c.setUint32(4 * y, g[y], o);
  }
  digest() {
    const { buffer: e, outputLen: n } = this;
    this.digestInto(e);
    const r = e.slice(0, n);
    return this.destroy(), r;
  }
  _cloneInto(e) {
    e || (e = new this.constructor()), e.set(...this.get());
    const { blockLen: n, buffer: r, length: s, finished: o, destroyed: a, pos: c } = this;
    return e.length = s, e.pos = c, e.finished = o, e.destroyed = a, s % n && e.buffer.set(r), e;
  }
};
const Chi$5 = (t, e, n) => t & e ^ ~t & n, Maj$5 = (t, e, n) => t & e ^ t & n ^ e & n, SHA256_K$5 = new Uint32Array([
  1116352408,
  1899447441,
  3049323471,
  3921009573,
  961987163,
  1508970993,
  2453635748,
  2870763221,
  3624381080,
  310598401,
  607225278,
  1426881987,
  1925078388,
  2162078206,
  2614888103,
  3248222580,
  3835390401,
  4022224774,
  264347078,
  604807628,
  770255983,
  1249150122,
  1555081692,
  1996064986,
  2554220882,
  2821834349,
  2952996808,
  3210313671,
  3336571891,
  3584528711,
  113926993,
  338241895,
  666307205,
  773529912,
  1294757372,
  1396182291,
  1695183700,
  1986661051,
  2177026350,
  2456956037,
  2730485921,
  2820302411,
  3259730800,
  3345764771,
  3516065817,
  3600352804,
  4094571909,
  275423344,
  430227734,
  506948616,
  659060556,
  883997877,
  958139571,
  1322822218,
  1537002063,
  1747873779,
  1955562222,
  2024104815,
  2227730452,
  2361852424,
  2428436474,
  2756734187,
  3204031479,
  3329325298
]), IV$4 = new Uint32Array([
  1779033703,
  3144134277,
  1013904242,
  2773480762,
  1359893119,
  2600822924,
  528734635,
  1541459225
]), SHA256_W$5 = new Uint32Array(64);
let SHA256$5 = class extends SHA2$4 {
  constructor() {
    super(64, 32, 8, !1), this.A = IV$4[0] | 0, this.B = IV$4[1] | 0, this.C = IV$4[2] | 0, this.D = IV$4[3] | 0, this.E = IV$4[4] | 0, this.F = IV$4[5] | 0, this.G = IV$4[6] | 0, this.H = IV$4[7] | 0;
  }
  get() {
    const { A: e, B: n, C: r, D: s, E: o, F: a, G: c, H: h } = this;
    return [e, n, r, s, o, a, c, h];
  }
  // prettier-ignore
  set(e, n, r, s, o, a, c, h) {
    this.A = e | 0, this.B = n | 0, this.C = r | 0, this.D = s | 0, this.E = o | 0, this.F = a | 0, this.G = c | 0, this.H = h | 0;
  }
  process(e, n) {
    for (let y = 0; y < 16; y++, n += 4)
      SHA256_W$5[y] = e.getUint32(n, !1);
    for (let y = 16; y < 64; y++) {
      const $ = SHA256_W$5[y - 15], k = SHA256_W$5[y - 2], S = rotr$4($, 7) ^ rotr$4($, 18) ^ $ >>> 3, w = rotr$4(k, 17) ^ rotr$4(k, 19) ^ k >>> 10;
      SHA256_W$5[y] = w + SHA256_W$5[y - 7] + S + SHA256_W$5[y - 16] | 0;
    }
    let { A: r, B: s, C: o, D: a, E: c, F: h, G: p, H: g } = this;
    for (let y = 0; y < 64; y++) {
      const $ = rotr$4(c, 6) ^ rotr$4(c, 11) ^ rotr$4(c, 25), k = g + $ + Chi$5(c, h, p) + SHA256_K$5[y] + SHA256_W$5[y] | 0, w = (rotr$4(r, 2) ^ rotr$4(r, 13) ^ rotr$4(r, 22)) + Maj$5(r, s, o) | 0;
      g = p, p = h, h = c, c = a + k | 0, a = o, o = s, s = r, r = k + w | 0;
    }
    r = r + this.A | 0, s = s + this.B | 0, o = o + this.C | 0, a = a + this.D | 0, c = c + this.E | 0, h = h + this.F | 0, p = p + this.G | 0, g = g + this.H | 0, this.set(r, s, o, a, c, h, p, g);
  }
  roundClean() {
    SHA256_W$5.fill(0);
  }
  destroy() {
    this.set(0, 0, 0, 0, 0, 0, 0, 0), this.buffer.fill(0);
  }
}, SHA224$2 = class extends SHA256$5 {
  constructor() {
    super(), this.A = -1056596264, this.B = 914150663, this.C = 812702999, this.D = -150054599, this.E = -4191439, this.F = 1750603025, this.G = 1694076839, this.H = -1090891868, this.outputLen = 28;
  }
};
const sha256$5 = wrapConstructor$4(() => new SHA256$5());
wrapConstructor$4(() => new SHA224$2());
/*! scure-base - MIT License (c) 2022 Paul Miller (paulmillr.com) */
function assertNumber$1(t) {
  if (!Number.isSafeInteger(t))
    throw new Error(`Wrong integer: ${t}`);
}
function chain$2(...t) {
  const e = (s, o) => (a) => s(o(a)), n = Array.from(t).reverse().reduce((s, o) => s ? e(s, o.encode) : o.encode, void 0), r = t.reduce((s, o) => s ? e(s, o.decode) : o.decode, void 0);
  return { encode: n, decode: r };
}
function alphabet$2(t) {
  return {
    encode: (e) => {
      if (!Array.isArray(e) || e.length && typeof e[0] != "number")
        throw new Error("alphabet.encode input should be an array of numbers");
      return e.map((n) => {
        if (assertNumber$1(n), n < 0 || n >= t.length)
          throw new Error(`Digit index outside alphabet: ${n} (alphabet: ${t.length})`);
        return t[n];
      });
    },
    decode: (e) => {
      if (!Array.isArray(e) || e.length && typeof e[0] != "string")
        throw new Error("alphabet.decode input should be array of strings");
      return e.map((n) => {
        if (typeof n != "string")
          throw new Error(`alphabet.decode: not string element=${n}`);
        const r = t.indexOf(n);
        if (r === -1)
          throw new Error(`Unknown letter: "${n}". Allowed: ${t}`);
        return r;
      });
    }
  };
}
function join$2(t = "") {
  if (typeof t != "string")
    throw new Error("join separator should be string");
  return {
    encode: (e) => {
      if (!Array.isArray(e) || e.length && typeof e[0] != "string")
        throw new Error("join.encode input should be array of strings");
      for (let n of e)
        if (typeof n != "string")
          throw new Error(`join.encode: non-string input=${n}`);
      return e.join(t);
    },
    decode: (e) => {
      if (typeof e != "string")
        throw new Error("join.decode input should be string");
      return e.split(t);
    }
  };
}
function padding$2(t, e = "=") {
  if (assertNumber$1(t), typeof e != "string")
    throw new Error("padding chr should be string");
  return {
    encode(n) {
      if (!Array.isArray(n) || n.length && typeof n[0] != "string")
        throw new Error("padding.encode input should be array of strings");
      for (let r of n)
        if (typeof r != "string")
          throw new Error(`padding.encode: non-string input=${r}`);
      for (; n.length * t % 8; )
        n.push(e);
      return n;
    },
    decode(n) {
      if (!Array.isArray(n) || n.length && typeof n[0] != "string")
        throw new Error("padding.encode input should be array of strings");
      for (let s of n)
        if (typeof s != "string")
          throw new Error(`padding.decode: non-string input=${s}`);
      let r = n.length;
      if (r * t % 8)
        throw new Error("Invalid padding: string should have whole number of bytes");
      for (; r > 0 && n[r - 1] === e; r--)
        if (!((r - 1) * t % 8))
          throw new Error("Invalid padding: string has too much padding");
      return n.slice(0, r);
    }
  };
}
function normalize$3(t) {
  if (typeof t != "function")
    throw new Error("normalize fn should be function");
  return { encode: (e) => e, decode: (e) => t(e) };
}
function convertRadix$2(t, e, n) {
  if (e < 2)
    throw new Error(`convertRadix: wrong from=${e}, base cannot be less than 2`);
  if (n < 2)
    throw new Error(`convertRadix: wrong to=${n}, base cannot be less than 2`);
  if (!Array.isArray(t))
    throw new Error("convertRadix: data should be array");
  if (!t.length)
    return [];
  let r = 0;
  const s = [], o = Array.from(t);
  for (o.forEach((a) => {
    if (assertNumber$1(a), a < 0 || a >= e)
      throw new Error(`Wrong integer: ${a}`);
  }); ; ) {
    let a = 0, c = !0;
    for (let h = r; h < o.length; h++) {
      const p = o[h], g = e * a + p;
      if (!Number.isSafeInteger(g) || e * a / e !== a || g - p !== e * a)
        throw new Error("convertRadix: carry overflow");
      if (a = g % n, o[h] = Math.floor(g / n), !Number.isSafeInteger(o[h]) || o[h] * n + a !== g)
        throw new Error("convertRadix: carry overflow");
      if (c)
        o[h] ? c = !1 : r = h;
      else
        continue;
    }
    if (s.push(a), c)
      break;
  }
  for (let a = 0; a < t.length - 1 && t[a] === 0; a++)
    s.push(0);
  return s.reverse();
}
const gcd$2 = (t, e) => e ? gcd$2(e, t % e) : t, radix2carry$2 = (t, e) => t + (e - gcd$2(t, e));
function convertRadix2$2(t, e, n, r) {
  if (!Array.isArray(t))
    throw new Error("convertRadix2: data should be array");
  if (e <= 0 || e > 32)
    throw new Error(`convertRadix2: wrong from=${e}`);
  if (n <= 0 || n > 32)
    throw new Error(`convertRadix2: wrong to=${n}`);
  if (radix2carry$2(e, n) > 32)
    throw new Error(`convertRadix2: carry overflow from=${e} to=${n} carryBits=${radix2carry$2(e, n)}`);
  let s = 0, o = 0;
  const a = 2 ** n - 1, c = [];
  for (const h of t) {
    if (assertNumber$1(h), h >= 2 ** e)
      throw new Error(`convertRadix2: invalid data word=${h} from=${e}`);
    if (s = s << e | h, o + e > 32)
      throw new Error(`convertRadix2: carry overflow pos=${o} from=${e}`);
    for (o += e; o >= n; o -= n)
      c.push((s >> o - n & a) >>> 0);
    s &= 2 ** o - 1;
  }
  if (s = s << n - o & a, !r && o >= e)
    throw new Error("Excess padding");
  if (!r && s)
    throw new Error(`Non-zero padding: ${s}`);
  return r && o > 0 && c.push(s >>> 0), c;
}
function radix$2(t) {
  return assertNumber$1(t), {
    encode: (e) => {
      if (!(e instanceof Uint8Array))
        throw new Error("radix.encode input should be Uint8Array");
      return convertRadix$2(Array.from(e), 2 ** 8, t);
    },
    decode: (e) => {
      if (!Array.isArray(e) || e.length && typeof e[0] != "number")
        throw new Error("radix.decode input should be array of strings");
      return Uint8Array.from(convertRadix$2(e, t, 2 ** 8));
    }
  };
}
function radix2$2(t, e = !1) {
  if (assertNumber$1(t), t <= 0 || t > 32)
    throw new Error("radix2: bits should be in (0..32]");
  if (radix2carry$2(8, t) > 32 || radix2carry$2(t, 8) > 32)
    throw new Error("radix2: carry overflow");
  return {
    encode: (n) => {
      if (!(n instanceof Uint8Array))
        throw new Error("radix2.encode input should be Uint8Array");
      return convertRadix2$2(Array.from(n), 8, t, !e);
    },
    decode: (n) => {
      if (!Array.isArray(n) || n.length && typeof n[0] != "number")
        throw new Error("radix2.decode input should be array of strings");
      return Uint8Array.from(convertRadix2$2(n, t, 8, e));
    }
  };
}
function unsafeWrapper$1(t) {
  if (typeof t != "function")
    throw new Error("unsafeWrapper fn should be function");
  return function(...e) {
    try {
      return t.apply(null, e);
    } catch {
    }
  };
}
const base16$1 = chain$2(radix2$2(4), alphabet$2("0123456789ABCDEF"), join$2("")), base32$1 = chain$2(radix2$2(5), alphabet$2("ABCDEFGHIJKLMNOPQRSTUVWXYZ234567"), padding$2(5), join$2(""));
chain$2(radix2$2(5), alphabet$2("0123456789ABCDEFGHIJKLMNOPQRSTUV"), padding$2(5), join$2(""));
chain$2(radix2$2(5), alphabet$2("0123456789ABCDEFGHJKMNPQRSTVWXYZ"), join$2(""), normalize$3((t) => t.toUpperCase().replace(/O/g, "0").replace(/[IL]/g, "1")));
const base64$1 = chain$2(radix2$2(6), alphabet$2("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"), padding$2(6), join$2("")), base64url$1 = chain$2(radix2$2(6), alphabet$2("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"), padding$2(6), join$2("")), genBase58$2 = (t) => chain$2(radix$2(58), alphabet$2(t), join$2("")), base58$2 = genBase58$2("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz");
genBase58$2("123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ");
genBase58$2("rpshnaf39wBUDNEGHJKLM4PQRST7VWXYZ2bcdeCg65jkm8oFqi1tuvAxyz");
const XMR_BLOCK_LEN$1 = [0, 2, 3, 5, 6, 7, 9, 10, 11], base58xmr$1 = {
  encode(t) {
    let e = "";
    for (let n = 0; n < t.length; n += 8) {
      const r = t.subarray(n, n + 8);
      e += base58$2.encode(r).padStart(XMR_BLOCK_LEN$1[r.length], "1");
    }
    return e;
  },
  decode(t) {
    let e = [];
    for (let n = 0; n < t.length; n += 11) {
      const r = t.slice(n, n + 11), s = XMR_BLOCK_LEN$1.indexOf(r.length), o = base58$2.decode(r);
      for (let a = 0; a < o.length - s; a++)
        if (o[a] !== 0)
          throw new Error("base58xmr: wrong padding");
      e = e.concat(Array.from(o.slice(o.length - s)));
    }
    return Uint8Array.from(e);
  }
}, BECH_ALPHABET$1 = chain$2(alphabet$2("qpzry9x8gf2tvdw0s3jn54khce6mua7l"), join$2("")), POLYMOD_GENERATORS$1 = [996825010, 642813549, 513874426, 1027748829, 705979059];
function bech32Polymod$1(t) {
  const e = t >> 25;
  let n = (t & 33554431) << 5;
  for (let r = 0; r < POLYMOD_GENERATORS$1.length; r++)
    (e >> r & 1) === 1 && (n ^= POLYMOD_GENERATORS$1[r]);
  return n;
}
function bechChecksum$1(t, e, n = 1) {
  const r = t.length;
  let s = 1;
  for (let o = 0; o < r; o++) {
    const a = t.charCodeAt(o);
    if (a < 33 || a > 126)
      throw new Error(`Invalid prefix (${t})`);
    s = bech32Polymod$1(s) ^ a >> 5;
  }
  s = bech32Polymod$1(s);
  for (let o = 0; o < r; o++)
    s = bech32Polymod$1(s) ^ t.charCodeAt(o) & 31;
  for (let o of e)
    s = bech32Polymod$1(s) ^ o;
  for (let o = 0; o < 6; o++)
    s = bech32Polymod$1(s);
  return s ^= n, BECH_ALPHABET$1.encode(convertRadix2$2([s % 2 ** 30], 30, 5, !1));
}
function genBech32$1(t) {
  const e = t === "bech32" ? 1 : 734539939, n = radix2$2(5), r = n.decode, s = n.encode, o = unsafeWrapper$1(r);
  function a(g, y, $ = 90) {
    if (typeof g != "string")
      throw new Error(`bech32.encode prefix should be string, not ${typeof g}`);
    if (!Array.isArray(y) || y.length && typeof y[0] != "number")
      throw new Error(`bech32.encode words should be array of numbers, not ${typeof y}`);
    const k = g.length + 7 + y.length;
    if ($ !== !1 && k > $)
      throw new TypeError(`Length ${k} exceeds limit ${$}`);
    return g = g.toLowerCase(), `${g}1${BECH_ALPHABET$1.encode(y)}${bechChecksum$1(g, y, e)}`;
  }
  function c(g, y = 90) {
    if (typeof g != "string")
      throw new Error(`bech32.decode input should be string, not ${typeof g}`);
    if (g.length < 8 || y !== !1 && g.length > y)
      throw new TypeError(`Wrong string length: ${g.length} (${g}). Expected (8..${y})`);
    const $ = g.toLowerCase();
    if (g !== $ && g !== g.toUpperCase())
      throw new Error("String must be lowercase or uppercase");
    g = $;
    const k = g.lastIndexOf("1");
    if (k === 0 || k === -1)
      throw new Error('Letter "1" must be present between prefix and data only');
    const S = g.slice(0, k), w = g.slice(k + 1);
    if (w.length < 6)
      throw new Error("Data must be at least 6 characters long");
    const x = BECH_ALPHABET$1.decode(w).slice(0, -6), A = bechChecksum$1(S, x, e);
    if (!w.endsWith(A))
      throw new Error(`Invalid checksum in ${g}: expected "${A}"`);
    return { prefix: S, words: x };
  }
  const h = unsafeWrapper$1(c);
  function p(g) {
    const { prefix: y, words: $ } = c(g, !1);
    return { prefix: y, words: $, bytes: r($) };
  }
  return { encode: a, decode: c, decodeToBytes: p, decodeUnsafe: h, fromWords: r, fromWordsUnsafe: o, toWords: s };
}
const bech32$1 = genBech32$1("bech32");
genBech32$1("bech32m");
const utf8$1 = {
  encode: (t) => new TextDecoder().decode(t),
  decode: (t) => new TextEncoder().encode(t)
}, hex$1 = chain$2(radix2$2(4), alphabet$2("0123456789abcdef"), join$2(""), normalize$3((t) => {
  if (typeof t != "string" || t.length % 2)
    throw new TypeError(`hex.decode: expected string, got ${typeof t} with length ${t.length}`);
  return t.toLowerCase();
})), CODERS$1 = {
  utf8: utf8$1,
  hex: hex$1,
  base16: base16$1,
  base32: base32$1,
  base64: base64$1,
  base64url: base64url$1,
  base58: base58$2,
  base58xmr: base58xmr$1
};
`${Object.keys(CODERS$1).join(", ")}`;
function number$5(t) {
  if (!Number.isSafeInteger(t) || t < 0)
    throw new Error(`positive integer expected, not ${t}`);
}
function bool$4(t) {
  if (typeof t != "boolean")
    throw new Error(`boolean expected, not ${t}`);
}
function isBytes$6(t) {
  return t instanceof Uint8Array || t != null && typeof t == "object" && t.constructor.name === "Uint8Array";
}
function bytes$5(t, ...e) {
  if (!isBytes$6(t))
    throw new Error("Uint8Array expected");
  if (e.length > 0 && !e.includes(t.length))
    throw new Error(`Uint8Array expected of length ${e}, not of length=${t.length}`);
}
/*! noble-ciphers - MIT License (c) 2023 Paul Miller (paulmillr.com) */
const u32$1 = (t) => new Uint32Array(t.buffer, t.byteOffset, Math.floor(t.byteLength / 4)), isLE$5 = new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68;
if (!isLE$5)
  throw new Error("Non little-endian hardware is not supported");
function utf8ToBytes$8(t) {
  if (typeof t != "string")
    throw new Error(`string expected, got ${typeof t}`);
  return new Uint8Array(new TextEncoder().encode(t));
}
function checkOpts$2(t, e) {
  if (e == null || typeof e != "object")
    throw new Error("options must be defined");
  return Object.assign(t, e);
}
function equalBytes$4(t, e) {
  if (t.length !== e.length)
    return !1;
  let n = 0;
  for (let r = 0; r < t.length; r++)
    n |= t[r] ^ e[r];
  return n === 0;
}
const wrapCipher = /* @__NO_SIDE_EFFECTS__ */ (t, e) => (Object.assign(e, t), e), BLOCK_SIZE = 16, POLY = 283;
function mul2(t) {
  return t << 1 ^ POLY & -(t >> 7);
}
function mul(t, e) {
  let n = 0;
  for (; e > 0; e >>= 1)
    n ^= t & -(e & 1), t = mul2(t);
  return n;
}
const sbox = /* @__PURE__ */ (() => {
  let t = new Uint8Array(256);
  for (let n = 0, r = 1; n < 256; n++, r ^= mul2(r))
    t[n] = r;
  const e = new Uint8Array(256);
  e[0] = 99;
  for (let n = 0; n < 255; n++) {
    let r = t[255 - n];
    r |= r << 8, e[t[n]] = (r ^ r >> 4 ^ r >> 5 ^ r >> 6 ^ r >> 7 ^ 99) & 255;
  }
  return e;
})(), invSbox = /* @__PURE__ */ sbox.map((t, e) => sbox.indexOf(e)), rotr32_8 = (t) => t << 24 | t >>> 8, rotl32_8 = (t) => t << 8 | t >>> 24;
function genTtable(t, e) {
  if (t.length !== 256)
    throw new Error("Wrong sbox length");
  const n = new Uint32Array(256).map((p, g) => e(t[g])), r = n.map(rotl32_8), s = r.map(rotl32_8), o = s.map(rotl32_8), a = new Uint32Array(256 * 256), c = new Uint32Array(256 * 256), h = new Uint16Array(256 * 256);
  for (let p = 0; p < 256; p++)
    for (let g = 0; g < 256; g++) {
      const y = p * 256 + g;
      a[y] = n[p] ^ r[g], c[y] = s[p] ^ o[g], h[y] = t[p] << 8 | t[g];
    }
  return { sbox: t, sbox2: h, T0: n, T1: r, T2: s, T3: o, T01: a, T23: c };
}
const tableEncoding = /* @__PURE__ */ genTtable(sbox, (t) => mul(t, 3) << 24 | t << 16 | t << 8 | mul(t, 2)), tableDecoding = /* @__PURE__ */ genTtable(invSbox, (t) => mul(t, 11) << 24 | mul(t, 13) << 16 | mul(t, 9) << 8 | mul(t, 14)), xPowers = /* @__PURE__ */ (() => {
  const t = new Uint8Array(16);
  for (let e = 0, n = 1; e < 16; e++, n = mul2(n))
    t[e] = n;
  return t;
})();
function expandKeyLE(t) {
  bytes$5(t);
  const e = t.length;
  if (![16, 24, 32].includes(e))
    throw new Error(`aes: wrong key size: should be 16, 24 or 32, got: ${e}`);
  const { sbox2: n } = tableEncoding, r = u32$1(t), s = r.length, o = (c) => applySbox(n, c, c, c, c), a = new Uint32Array(e + 28);
  a.set(r);
  for (let c = s; c < a.length; c++) {
    let h = a[c - 1];
    c % s === 0 ? h = o(rotr32_8(h)) ^ xPowers[c / s - 1] : s > 6 && c % s === 4 && (h = o(h)), a[c] = a[c - s] ^ h;
  }
  return a;
}
function expandKeyDecLE(t) {
  const e = expandKeyLE(t), n = e.slice(), r = e.length, { sbox2: s } = tableEncoding, { T0: o, T1: a, T2: c, T3: h } = tableDecoding;
  for (let p = 0; p < r; p += 4)
    for (let g = 0; g < 4; g++)
      n[p + g] = e[r - p - 4 + g];
  e.fill(0);
  for (let p = 4; p < r - 4; p++) {
    const g = n[p], y = applySbox(s, g, g, g, g);
    n[p] = o[y & 255] ^ a[y >>> 8 & 255] ^ c[y >>> 16 & 255] ^ h[y >>> 24];
  }
  return n;
}
function apply0123(t, e, n, r, s, o) {
  return t[n << 8 & 65280 | r >>> 8 & 255] ^ e[s >>> 8 & 65280 | o >>> 24 & 255];
}
function applySbox(t, e, n, r, s) {
  return t[e & 255 | n & 65280] | t[r >>> 16 & 255 | s >>> 16 & 65280] << 16;
}
function encrypt$3(t, e, n, r, s) {
  const { sbox2: o, T01: a, T23: c } = tableEncoding;
  let h = 0;
  e ^= t[h++], n ^= t[h++], r ^= t[h++], s ^= t[h++];
  const p = t.length / 4 - 2;
  for (let S = 0; S < p; S++) {
    const w = t[h++] ^ apply0123(a, c, e, n, r, s), x = t[h++] ^ apply0123(a, c, n, r, s, e), A = t[h++] ^ apply0123(a, c, r, s, e, n), N = t[h++] ^ apply0123(a, c, s, e, n, r);
    e = w, n = x, r = A, s = N;
  }
  const g = t[h++] ^ applySbox(o, e, n, r, s), y = t[h++] ^ applySbox(o, n, r, s, e), $ = t[h++] ^ applySbox(o, r, s, e, n), k = t[h++] ^ applySbox(o, s, e, n, r);
  return { s0: g, s1: y, s2: $, s3: k };
}
function decrypt$3(t, e, n, r, s) {
  const { sbox2: o, T01: a, T23: c } = tableDecoding;
  let h = 0;
  e ^= t[h++], n ^= t[h++], r ^= t[h++], s ^= t[h++];
  const p = t.length / 4 - 2;
  for (let S = 0; S < p; S++) {
    const w = t[h++] ^ apply0123(a, c, e, s, r, n), x = t[h++] ^ apply0123(a, c, n, e, s, r), A = t[h++] ^ apply0123(a, c, r, n, e, s), N = t[h++] ^ apply0123(a, c, s, r, n, e);
    e = w, n = x, r = A, s = N;
  }
  const g = t[h++] ^ applySbox(o, e, s, r, n), y = t[h++] ^ applySbox(o, n, e, s, r), $ = t[h++] ^ applySbox(o, r, n, e, s), k = t[h++] ^ applySbox(o, s, r, n, e);
  return { s0: g, s1: y, s2: $, s3: k };
}
function getDst(t, e) {
  if (!e)
    return new Uint8Array(t);
  if (bytes$5(e), e.length < t)
    throw new Error(`aes: wrong destination length, expected at least ${t}, got: ${e.length}`);
  return e;
}
function validateBlockDecrypt(t) {
  if (bytes$5(t), t.length % BLOCK_SIZE !== 0)
    throw new Error(`aes/(cbc-ecb).decrypt ciphertext should consist of blocks with size ${BLOCK_SIZE}`);
}
function validateBlockEncrypt(t, e, n) {
  let r = t.length;
  const s = r % BLOCK_SIZE;
  if (!e && s !== 0)
    throw new Error("aec/(cbc-ecb): unpadded plaintext with disabled padding");
  const o = u32$1(t);
  if (e) {
    let h = BLOCK_SIZE - s;
    h || (h = BLOCK_SIZE), r = r + h;
  }
  const a = getDst(r, n), c = u32$1(a);
  return { b: o, o: c, out: a };
}
function validatePCKS(t, e) {
  if (!e)
    return t;
  const n = t.length;
  if (!n)
    throw new Error("aes/pcks5: empty ciphertext not allowed");
  const r = t[n - 1];
  if (r <= 0 || r > 16)
    throw new Error(`aes/pcks5: wrong padding byte: ${r}`);
  const s = t.subarray(0, -r);
  for (let o = 0; o < r; o++)
    if (t[n - o - 1] !== r)
      throw new Error("aes/pcks5: wrong padding");
  return s;
}
function padPCKS(t) {
  const e = new Uint8Array(16), n = u32$1(e);
  e.set(t);
  const r = BLOCK_SIZE - t.length;
  for (let s = BLOCK_SIZE - r; s < BLOCK_SIZE; s++)
    e[s] = r;
  return n;
}
const cbc = /* @__PURE__ */ wrapCipher({ blockSize: 16, nonceLength: 16 }, function(e, n, r = {}) {
  bytes$5(e), bytes$5(n, 16);
  const s = !r.disablePadding;
  return {
    encrypt: (o, a) => {
      const c = expandKeyLE(e), { b: h, o: p, out: g } = validateBlockEncrypt(o, s, a), y = u32$1(n);
      let $ = y[0], k = y[1], S = y[2], w = y[3], x = 0;
      for (; x + 4 <= h.length; )
        $ ^= h[x + 0], k ^= h[x + 1], S ^= h[x + 2], w ^= h[x + 3], { s0: $, s1: k, s2: S, s3: w } = encrypt$3(c, $, k, S, w), p[x++] = $, p[x++] = k, p[x++] = S, p[x++] = w;
      if (s) {
        const A = padPCKS(o.subarray(x * 4));
        $ ^= A[0], k ^= A[1], S ^= A[2], w ^= A[3], { s0: $, s1: k, s2: S, s3: w } = encrypt$3(c, $, k, S, w), p[x++] = $, p[x++] = k, p[x++] = S, p[x++] = w;
      }
      return c.fill(0), g;
    },
    decrypt: (o, a) => {
      validateBlockDecrypt(o);
      const c = expandKeyDecLE(e), h = u32$1(n), p = getDst(o.length, a), g = u32$1(o), y = u32$1(p);
      let $ = h[0], k = h[1], S = h[2], w = h[3];
      for (let x = 0; x + 4 <= g.length; ) {
        const A = $, N = k, C = S, W = w;
        $ = g[x + 0], k = g[x + 1], S = g[x + 2], w = g[x + 3];
        const { s0: q, s1: I, s2: L, s3: P } = decrypt$3(c, $, k, S, w);
        y[x++] = q ^ A, y[x++] = I ^ N, y[x++] = L ^ C, y[x++] = P ^ W;
      }
      return c.fill(0), validatePCKS(p, s);
    }
  };
}), sigma16$1 = utf8ToBytes$8("expand 16-byte k"), sigma32$1 = utf8ToBytes$8("expand 32-byte k"), sigma16_32$1 = u32$1(sigma16$1), sigma32_32$1 = u32$1(sigma32$1);
function rotl$2(t, e) {
  return t << e | t >>> 32 - e;
}
function isAligned32$1(t) {
  return t.byteOffset % 4 === 0;
}
const BLOCK_LEN = 64, BLOCK_LEN32 = 16, MAX_COUNTER = 2 ** 32 - 1, U32_EMPTY = new Uint32Array();
function runCipher(t, e, n, r, s, o, a, c) {
  const h = s.length, p = new Uint8Array(BLOCK_LEN), g = u32$1(p), y = isAligned32$1(s) && isAligned32$1(o), $ = y ? u32$1(s) : U32_EMPTY, k = y ? u32$1(o) : U32_EMPTY;
  for (let S = 0; S < h; a++) {
    if (t(e, n, r, g, a, c), a >= MAX_COUNTER)
      throw new Error("arx: counter overflow");
    const w = Math.min(BLOCK_LEN, h - S);
    if (y && w === BLOCK_LEN) {
      const x = S / 4;
      if (S % 4 !== 0)
        throw new Error("arx: invalid block position");
      for (let A = 0, N; A < BLOCK_LEN32; A++)
        N = x + A, k[N] = $[N] ^ g[A];
      S += BLOCK_LEN;
      continue;
    }
    for (let x = 0, A; x < w; x++)
      A = S + x, o[A] = s[A] ^ p[x];
    S += w;
  }
}
function createCipher(t, e) {
  const { allowShortKeys: n, extendNonceFn: r, counterLength: s, counterRight: o, rounds: a } = checkOpts$2({ allowShortKeys: !1, counterLength: 8, counterRight: !1, rounds: 20 }, e);
  if (typeof t != "function")
    throw new Error("core must be a function");
  return number$5(s), number$5(a), bool$4(o), bool$4(n), (c, h, p, g, y = 0) => {
    bytes$5(c), bytes$5(h), bytes$5(p);
    const $ = p.length;
    if (g || (g = new Uint8Array($)), bytes$5(g), number$5(y), y < 0 || y >= MAX_COUNTER)
      throw new Error("arx: counter overflow");
    if (g.length < $)
      throw new Error(`arx: output (${g.length}) is shorter than data (${$})`);
    const k = [];
    let S = c.length, w, x;
    if (S === 32)
      w = c.slice(), k.push(w), x = sigma32_32$1;
    else if (S === 16 && n)
      w = new Uint8Array(32), w.set(c), w.set(c, 16), x = sigma16_32$1, k.push(w);
    else
      throw new Error(`arx: invalid 32-byte key, got length=${S}`);
    isAligned32$1(h) || (h = h.slice(), k.push(h));
    const A = u32$1(w);
    if (r) {
      if (h.length !== 24)
        throw new Error("arx: extended nonce must be 24 bytes");
      r(x, A, u32$1(h.subarray(0, 16)), A), h = h.subarray(16);
    }
    const N = 16 - s;
    if (N !== h.length)
      throw new Error(`arx: nonce must be ${N} or 16 bytes`);
    if (N !== 12) {
      const W = new Uint8Array(12);
      W.set(h, o ? 0 : 12 - h.length), h = W, k.push(h);
    }
    const C = u32$1(h);
    for (runCipher(t, x, A, C, p, g, y, a); k.length > 0; )
      k.pop().fill(0);
    return g;
  };
}
function chachaCore$1(t, e, n, r, s, o = 20) {
  let a = t[0], c = t[1], h = t[2], p = t[3], g = e[0], y = e[1], $ = e[2], k = e[3], S = e[4], w = e[5], x = e[6], A = e[7], N = s, C = n[0], W = n[1], q = n[2], I = a, L = c, P = h, ie = p, te = g, T = y, O = $, K = k, ae = S, E = w, B = x, H = A, Q = N, F = C, ce = W, oe = q;
  for (let ve = 0; ve < o; ve += 2)
    I = I + te | 0, Q = rotl$2(Q ^ I, 16), ae = ae + Q | 0, te = rotl$2(te ^ ae, 12), I = I + te | 0, Q = rotl$2(Q ^ I, 8), ae = ae + Q | 0, te = rotl$2(te ^ ae, 7), L = L + T | 0, F = rotl$2(F ^ L, 16), E = E + F | 0, T = rotl$2(T ^ E, 12), L = L + T | 0, F = rotl$2(F ^ L, 8), E = E + F | 0, T = rotl$2(T ^ E, 7), P = P + O | 0, ce = rotl$2(ce ^ P, 16), B = B + ce | 0, O = rotl$2(O ^ B, 12), P = P + O | 0, ce = rotl$2(ce ^ P, 8), B = B + ce | 0, O = rotl$2(O ^ B, 7), ie = ie + K | 0, oe = rotl$2(oe ^ ie, 16), H = H + oe | 0, K = rotl$2(K ^ H, 12), ie = ie + K | 0, oe = rotl$2(oe ^ ie, 8), H = H + oe | 0, K = rotl$2(K ^ H, 7), I = I + T | 0, oe = rotl$2(oe ^ I, 16), B = B + oe | 0, T = rotl$2(T ^ B, 12), I = I + T | 0, oe = rotl$2(oe ^ I, 8), B = B + oe | 0, T = rotl$2(T ^ B, 7), L = L + O | 0, Q = rotl$2(Q ^ L, 16), H = H + Q | 0, O = rotl$2(O ^ H, 12), L = L + O | 0, Q = rotl$2(Q ^ L, 8), H = H + Q | 0, O = rotl$2(O ^ H, 7), P = P + K | 0, F = rotl$2(F ^ P, 16), ae = ae + F | 0, K = rotl$2(K ^ ae, 12), P = P + K | 0, F = rotl$2(F ^ P, 8), ae = ae + F | 0, K = rotl$2(K ^ ae, 7), ie = ie + te | 0, ce = rotl$2(ce ^ ie, 16), E = E + ce | 0, te = rotl$2(te ^ E, 12), ie = ie + te | 0, ce = rotl$2(ce ^ ie, 8), E = E + ce | 0, te = rotl$2(te ^ E, 7);
  let le = 0;
  r[le++] = a + I | 0, r[le++] = c + L | 0, r[le++] = h + P | 0, r[le++] = p + ie | 0, r[le++] = g + te | 0, r[le++] = y + T | 0, r[le++] = $ + O | 0, r[le++] = k + K | 0, r[le++] = S + ae | 0, r[le++] = w + E | 0, r[le++] = x + B | 0, r[le++] = A + H | 0, r[le++] = N + Q | 0, r[le++] = C + F | 0, r[le++] = W + ce | 0, r[le++] = q + oe | 0;
}
const chacha20$1 = /* @__PURE__ */ createCipher(chachaCore$1, {
  counterRight: !1,
  counterLength: 4,
  allowShortKeys: !1
});
let HMAC$5 = class extends Hash$4 {
  constructor(e, n) {
    super(), this.finished = !1, this.destroyed = !1, assert$4.hash(e);
    const r = toBytes$5(n);
    if (this.iHash = e.create(), typeof this.iHash.update != "function")
      throw new Error("Expected instance of class which extends utils.Hash");
    this.blockLen = this.iHash.blockLen, this.outputLen = this.iHash.outputLen;
    const s = this.blockLen, o = new Uint8Array(s);
    o.set(r.length > s ? e.create().update(r).digest() : r);
    for (let a = 0; a < o.length; a++)
      o[a] ^= 54;
    this.iHash.update(o), this.oHash = e.create();
    for (let a = 0; a < o.length; a++)
      o[a] ^= 106;
    this.oHash.update(o), o.fill(0);
  }
  update(e) {
    return assert$4.exists(this), this.iHash.update(e), this;
  }
  digestInto(e) {
    assert$4.exists(this), assert$4.bytes(e, this.outputLen), this.finished = !0, this.iHash.digestInto(e), this.oHash.update(e), this.oHash.digestInto(e), this.destroy();
  }
  digest() {
    const e = new Uint8Array(this.oHash.outputLen);
    return this.digestInto(e), e;
  }
  _cloneInto(e) {
    e || (e = Object.create(Object.getPrototypeOf(this), {}));
    const { oHash: n, iHash: r, finished: s, destroyed: o, blockLen: a, outputLen: c } = this;
    return e = e, e.finished = s, e.destroyed = o, e.blockLen = a, e.outputLen = c, e.oHash = n._cloneInto(e.oHash), e.iHash = r._cloneInto(e.iHash), e;
  }
  destroy() {
    this.destroyed = !0, this.oHash.destroy(), this.iHash.destroy();
  }
};
const hmac$5 = (t, e, n) => new HMAC$5(t, e).update(n).digest();
hmac$5.create = (t, e) => new HMAC$5(t, e);
function extract$1(t, e, n) {
  return assert$4.hash(t), hmac$5(t, toBytes$5(n), toBytes$5(e));
}
const HKDF_COUNTER$1 = new Uint8Array([0]), EMPTY_BUFFER$1 = new Uint8Array();
function expand$1(t, e, n, r = 32) {
  if (assert$4.hash(t), assert$4.number(r), r > 255 * t.outputLen)
    throw new Error("Length should be <= 255*HashLen");
  const s = Math.ceil(r / t.outputLen);
  n === void 0 && (n = EMPTY_BUFFER$1);
  const o = new Uint8Array(s * t.outputLen), a = hmac$5.create(t, e), c = a._cloneInto(), h = new Uint8Array(a.outputLen);
  for (let p = 0; p < s; p++)
    HKDF_COUNTER$1[0] = p + 1, c.update(p === 0 ? EMPTY_BUFFER$1 : h).update(n).update(HKDF_COUNTER$1).digestInto(h), o.set(h, t.outputLen * p), a._cloneInto(c);
  return a.destroy(), c.destroy(), h.fill(0), HKDF_COUNTER$1.fill(0), o.slice(0, r);
}
var __defProp$1 = Object.defineProperty, __defNormalProp = (t, e, n) => e in t ? __defProp$1(t, e, { enumerable: !0, configurable: !0, writable: !0, value: n }) : t[e] = n, __export$1 = (t, e) => {
  for (var n in e)
    __defProp$1(t, n, { get: e[n], enumerable: !0 });
}, __publicField = (t, e, n) => (__defNormalProp(t, typeof e != "symbol" ? e + "" : e, n), n), verifiedSymbol$1 = Symbol("verified"), isRecord$1 = (t) => t instanceof Object;
function validateEvent$1(t) {
  if (!isRecord$1(t) || typeof t.kind != "number" || typeof t.content != "string" || typeof t.created_at != "number" || typeof t.pubkey != "string" || !t.pubkey.match(/^[a-f0-9]{64}$/) || !Array.isArray(t.tags))
    return !1;
  for (let e = 0; e < t.tags.length; e++) {
    let n = t.tags[e];
    if (!Array.isArray(n))
      return !1;
    for (let r = 0; r < n.length; r++)
      if (typeof n[r] == "object")
        return !1;
  }
  return !0;
}
var utils_exports$1 = {};
__export$1(utils_exports$1, {
  Queue: () => Queue$1,
  QueueNode: () => QueueNode,
  binarySearch: () => binarySearch,
  insertEventIntoAscendingList: () => insertEventIntoAscendingList$1,
  insertEventIntoDescendingList: () => insertEventIntoDescendingList$1,
  normalizeURL: () => normalizeURL$1,
  utf8Decoder: () => utf8Decoder$1,
  utf8Encoder: () => utf8Encoder$1
});
var utf8Decoder$1 = new TextDecoder("utf-8"), utf8Encoder$1 = new TextEncoder();
function normalizeURL$1(t) {
  t.indexOf("://") === -1 && (t = "wss://" + t);
  let e = new URL(t);
  return e.pathname = e.pathname.replace(/\/+/g, "/"), e.pathname.endsWith("/") && (e.pathname = e.pathname.slice(0, -1)), (e.port === "80" && e.protocol === "ws:" || e.port === "443" && e.protocol === "wss:") && (e.port = ""), e.searchParams.sort(), e.hash = "", e.toString();
}
function insertEventIntoDescendingList$1(t, e) {
  const [n, r] = binarySearch(t, (s) => e.id === s.id ? 0 : e.created_at === s.created_at ? -1 : s.created_at - e.created_at);
  return r || t.splice(n, 0, e), t;
}
function insertEventIntoAscendingList$1(t, e) {
  const [n, r] = binarySearch(t, (s) => e.id === s.id ? 0 : e.created_at === s.created_at ? -1 : e.created_at - s.created_at);
  return r || t.splice(n, 0, e), t;
}
function binarySearch(t, e) {
  let n = 0, r = t.length - 1;
  for (; n <= r; ) {
    const s = Math.floor((n + r) / 2), o = e(t[s]);
    if (o === 0)
      return [s, !0];
    o < 0 ? r = s - 1 : n = s + 1;
  }
  return [n, !1];
}
var QueueNode = class {
  constructor(t) {
    M(this, "value");
    M(this, "next", null);
    M(this, "prev", null);
    this.value = t;
  }
}, Queue$1 = class {
  constructor() {
    M(this, "first");
    M(this, "last");
    this.first = null, this.last = null;
  }
  enqueue(e) {
    const n = new QueueNode(e);
    return this.last ? this.last === this.first ? (this.last = n, this.last.prev = this.first, this.first.next = n) : (n.prev = this.last, this.last.next = n, this.last = n) : (this.first = n, this.last = n), !0;
  }
  dequeue() {
    if (!this.first)
      return null;
    if (this.first === this.last) {
      const n = this.first;
      return this.first = null, this.last = null, n.value;
    }
    const e = this.first;
    return this.first = e.next, e.value;
  }
}, JS = class {
  generateSecretKey() {
    return schnorr$2.utils.randomPrivateKey();
  }
  getPublicKey(t) {
    return bytesToHex$5(schnorr$2.getPublicKey(t));
  }
  finalizeEvent(t, e) {
    const n = t;
    return n.pubkey = bytesToHex$5(schnorr$2.getPublicKey(e)), n.id = getEventHash$2(n), n.sig = bytesToHex$5(schnorr$2.sign(getEventHash$2(n), e)), n[verifiedSymbol$1] = !0, n;
  }
  verifyEvent(t) {
    if (typeof t[verifiedSymbol$1] == "boolean")
      return t[verifiedSymbol$1];
    const e = getEventHash$2(t);
    if (e !== t.id)
      return t[verifiedSymbol$1] = !1, !1;
    try {
      const n = schnorr$2.verify(t.sig, e, t.pubkey);
      return t[verifiedSymbol$1] = n, n;
    } catch {
      return t[verifiedSymbol$1] = !1, !1;
    }
  }
};
function serializeEvent$1(t) {
  if (!validateEvent$1(t))
    throw new Error("can't serialize event with wrong or missing properties");
  return JSON.stringify([0, t.pubkey, t.created_at, t.kind, t.tags, t.content]);
}
function getEventHash$2(t) {
  let e = sha256$5(utf8Encoder$1.encode(serializeEvent$1(t)));
  return bytesToHex$5(e);
}
var i = new JS(), generateSecretKey = i.generateSecretKey, getPublicKey$1 = i.getPublicKey, finalizeEvent = i.finalizeEvent, verifyEvent = i.verifyEvent, kinds_exports = {};
__export$1(kinds_exports, {
  Application: () => Application,
  BadgeAward: () => BadgeAward,
  BadgeDefinition: () => BadgeDefinition,
  BlockedRelaysList: () => BlockedRelaysList,
  BookmarkList: () => BookmarkList,
  Bookmarksets: () => Bookmarksets,
  Calendar: () => Calendar,
  CalendarEventRSVP: () => CalendarEventRSVP,
  ChannelCreation: () => ChannelCreation,
  ChannelHideMessage: () => ChannelHideMessage,
  ChannelMessage: () => ChannelMessage,
  ChannelMetadata: () => ChannelMetadata,
  ChannelMuteUser: () => ChannelMuteUser,
  ClassifiedListing: () => ClassifiedListing,
  ClientAuth: () => ClientAuth,
  CommunitiesList: () => CommunitiesList,
  CommunityDefinition: () => CommunityDefinition,
  CommunityPostApproval: () => CommunityPostApproval,
  Contacts: () => Contacts,
  CreateOrUpdateProduct: () => CreateOrUpdateProduct,
  CreateOrUpdateStall: () => CreateOrUpdateStall,
  Curationsets: () => Curationsets,
  Date: () => Date2,
  DraftClassifiedListing: () => DraftClassifiedListing,
  DraftLong: () => DraftLong,
  Emojisets: () => Emojisets,
  EncryptedDirectMessage: () => EncryptedDirectMessage,
  EncryptedDirectMessages: () => EncryptedDirectMessages,
  EventDeletion: () => EventDeletion,
  FileMetadata: () => FileMetadata,
  FileServerPreference: () => FileServerPreference,
  Followsets: () => Followsets,
  GenericRepost: () => GenericRepost,
  Genericlists: () => Genericlists,
  HTTPAuth: () => HTTPAuth,
  Handlerinformation: () => Handlerinformation,
  Handlerrecommendation: () => Handlerrecommendation,
  Highlights: () => Highlights,
  InterestsList: () => InterestsList,
  Interestsets: () => Interestsets,
  JobFeedback: () => JobFeedback,
  JobRequest: () => JobRequest,
  JobResult: () => JobResult,
  Label: () => Label,
  LightningPubRPC: () => LightningPubRPC,
  LiveChatMessage: () => LiveChatMessage,
  LiveEvent: () => LiveEvent,
  LongFormArticle: () => LongFormArticle,
  Metadata: () => Metadata,
  Mutelist: () => Mutelist,
  NWCWalletInfo: () => NWCWalletInfo,
  NWCWalletRequest: () => NWCWalletRequest,
  NWCWalletResponse: () => NWCWalletResponse,
  NostrConnect: () => NostrConnect,
  OpenTimestamps: () => OpenTimestamps,
  Pinlist: () => Pinlist,
  ProblemTracker: () => ProblemTracker,
  ProfileBadges: () => ProfileBadges,
  PublicChatsList: () => PublicChatsList,
  Reaction: () => Reaction,
  RecommendRelay: () => RecommendRelay,
  RelayList: () => RelayList,
  Relaysets: () => Relaysets,
  Report: () => Report,
  Reporting: () => Reporting,
  Repost: () => Repost,
  SearchRelaysList: () => SearchRelaysList,
  ShortTextNote: () => ShortTextNote,
  Time: () => Time,
  UserEmojiList: () => UserEmojiList,
  UserStatuses: () => UserStatuses,
  Zap: () => Zap,
  ZapGoal: () => ZapGoal,
  ZapRequest: () => ZapRequest,
  classifyKind: () => classifyKind,
  isEphemeralKind: () => isEphemeralKind,
  isParameterizedReplaceableKind: () => isParameterizedReplaceableKind,
  isRegularKind: () => isRegularKind,
  isReplaceableKind: () => isReplaceableKind
});
function isRegularKind(t) {
  return 1e3 <= t && t < 1e4 || [1, 2, 4, 5, 6, 7, 8, 16, 40, 41, 42, 43, 44].includes(t);
}
function isReplaceableKind(t) {
  return [0, 3].includes(t) || 1e4 <= t && t < 2e4;
}
function isEphemeralKind(t) {
  return 2e4 <= t && t < 3e4;
}
function isParameterizedReplaceableKind(t) {
  return 3e4 <= t && t < 4e4;
}
function classifyKind(t) {
  return isRegularKind(t) ? "regular" : isReplaceableKind(t) ? "replaceable" : isEphemeralKind(t) ? "ephemeral" : isParameterizedReplaceableKind(t) ? "parameterized" : "unknown";
}
var Metadata = 0, ShortTextNote = 1, RecommendRelay = 2, Contacts = 3, EncryptedDirectMessage = 4, EncryptedDirectMessages = 4, EventDeletion = 5, Repost = 6, Reaction = 7, BadgeAward = 8, GenericRepost = 16, ChannelCreation = 40, ChannelMetadata = 41, ChannelMessage = 42, ChannelHideMessage = 43, ChannelMuteUser = 44, OpenTimestamps = 1040, FileMetadata = 1063, LiveChatMessage = 1311, ProblemTracker = 1971, Report = 1984, Reporting = 1984, Label = 1985, CommunityPostApproval = 4550, JobRequest = 5999, JobResult = 6999, JobFeedback = 7e3, ZapGoal = 9041, ZapRequest = 9734, Zap = 9735, Highlights = 9802, Mutelist = 1e4, Pinlist = 10001, RelayList = 10002, BookmarkList = 10003, CommunitiesList = 10004, PublicChatsList = 10005, BlockedRelaysList = 10006, SearchRelaysList = 10007, InterestsList = 10015, UserEmojiList = 10030, FileServerPreference = 10096, NWCWalletInfo = 13194, LightningPubRPC = 21e3, ClientAuth = 22242, NWCWalletRequest = 23194, NWCWalletResponse = 23195, NostrConnect = 24133, HTTPAuth = 27235, Followsets = 3e4, Genericlists = 30001, Relaysets = 30002, Bookmarksets = 30003, Curationsets = 30004, ProfileBadges = 30008, BadgeDefinition = 30009, Interestsets = 30015, CreateOrUpdateStall = 30017, CreateOrUpdateProduct = 30018, LongFormArticle = 30023, DraftLong = 30024, Emojisets = 30030, Application = 30078, LiveEvent = 30311, UserStatuses = 30315, ClassifiedListing = 30402, DraftClassifiedListing = 30403, Date2 = 31922, Time = 31923, Calendar = 31924, CalendarEventRSVP = 31925, Handlerrecommendation = 31989, Handlerinformation = 31990, CommunityDefinition = 34550;
function matchFilter$1(t, e) {
  if (t.ids && t.ids.indexOf(e.id) === -1 && !t.ids.some((n) => e.id.startsWith(n)) || t.kinds && t.kinds.indexOf(e.kind) === -1 || t.authors && t.authors.indexOf(e.pubkey) === -1 && !t.authors.some((n) => e.pubkey.startsWith(n)))
    return !1;
  for (let n in t)
    if (n[0] === "#") {
      let r = n.slice(1), s = t[`#${r}`];
      if (s && !e.tags.find(([o, a]) => o === n.slice(1) && s.indexOf(a) !== -1))
        return !1;
    }
  return !(t.since && e.created_at < t.since || t.until && e.created_at > t.until);
}
var fakejson_exports$1 = {};
__export$1(fakejson_exports$1, {
  getHex64: () => getHex64$1,
  getInt: () => getInt$1,
  getSubscriptionId: () => getSubscriptionId$1,
  matchEventId: () => matchEventId$1,
  matchEventKind: () => matchEventKind$1,
  matchEventPubkey: () => matchEventPubkey$1
});
function getHex64$1(t, e) {
  let n = e.length + 3, r = t.indexOf(`"${e}":`) + n, s = t.slice(r).indexOf('"') + r + 1;
  return t.slice(s, s + 64);
}
function getInt$1(t, e) {
  let n = e.length, r = t.indexOf(`"${e}":`) + n + 3, s = t.slice(r), o = Math.min(s.indexOf(","), s.indexOf("}"));
  return parseInt(s.slice(0, o), 10);
}
function getSubscriptionId$1(t) {
  let e = t.slice(0, 22).indexOf('"EVENT"');
  if (e === -1)
    return null;
  let n = t.slice(e + 7 + 1).indexOf('"');
  if (n === -1)
    return null;
  let r = e + 7 + 1 + n, s = t.slice(r + 1, 80).indexOf('"');
  if (s === -1)
    return null;
  let o = r + 1 + s;
  return t.slice(r + 1, o);
}
function matchEventId$1(t, e) {
  return e === getHex64$1(t, "id");
}
function matchEventPubkey$1(t, e) {
  return e === getHex64$1(t, "pubkey");
}
function matchEventKind$1(t, e) {
  return e === getInt$1(t, "kind");
}
var nip42_exports$1 = {};
__export$1(nip42_exports$1, {
  makeAuthEvent: () => makeAuthEvent
});
function makeAuthEvent(t, e) {
  return {
    kind: ClientAuth,
    created_at: Math.floor(Date.now() / 1e3),
    tags: [
      ["relay", t],
      ["challenge", e]
    ],
    content: ""
  };
}
var _WebSocket;
try {
  _WebSocket = WebSocket;
} catch {
}
var nip19_exports$1 = {};
__export$1(nip19_exports$1, {
  BECH32_REGEX: () => BECH32_REGEX$2,
  Bech32MaxSize: () => Bech32MaxSize$1,
  decode: () => decode$1,
  encodeBytes: () => encodeBytes$1,
  naddrEncode: () => naddrEncode$1,
  neventEncode: () => neventEncode$1,
  noteEncode: () => noteEncode$1,
  nprofileEncode: () => nprofileEncode$1,
  npubEncode: () => npubEncode$1,
  nrelayEncode: () => nrelayEncode$1,
  nsecEncode: () => nsecEncode$1
});
var Bech32MaxSize$1 = 5e3, BECH32_REGEX$2 = /[\x21-\x7E]{1,83}1[023456789acdefghjklmnpqrstuvwxyz]{6,}/;
function integerToUint8Array$1(t) {
  const e = new Uint8Array(4);
  return e[0] = t >> 24 & 255, e[1] = t >> 16 & 255, e[2] = t >> 8 & 255, e[3] = t & 255, e;
}
function decode$1(t) {
  var s, o, a, c, h, p, g, y;
  let { prefix: e, words: n } = bech32$1.decode(t, Bech32MaxSize$1), r = new Uint8Array(bech32$1.fromWords(n));
  switch (e) {
    case "nprofile": {
      let $ = parseTLV$1(r);
      if (!((s = $[0]) != null && s[0]))
        throw new Error("missing TLV 0 for nprofile");
      if ($[0][0].length !== 32)
        throw new Error("TLV 0 should be 32 bytes");
      return {
        type: "nprofile",
        data: {
          pubkey: bytesToHex$5($[0][0]),
          relays: $[1] ? $[1].map((k) => utf8Decoder$1.decode(k)) : []
        }
      };
    }
    case "nevent": {
      let $ = parseTLV$1(r);
      if (!((o = $[0]) != null && o[0]))
        throw new Error("missing TLV 0 for nevent");
      if ($[0][0].length !== 32)
        throw new Error("TLV 0 should be 32 bytes");
      if ($[2] && $[2][0].length !== 32)
        throw new Error("TLV 2 should be 32 bytes");
      if ($[3] && $[3][0].length !== 4)
        throw new Error("TLV 3 should be 4 bytes");
      return {
        type: "nevent",
        data: {
          id: bytesToHex$5($[0][0]),
          relays: $[1] ? $[1].map((k) => utf8Decoder$1.decode(k)) : [],
          author: (a = $[2]) != null && a[0] ? bytesToHex$5($[2][0]) : void 0,
          kind: (c = $[3]) != null && c[0] ? parseInt(bytesToHex$5($[3][0]), 16) : void 0
        }
      };
    }
    case "naddr": {
      let $ = parseTLV$1(r);
      if (!((h = $[0]) != null && h[0]))
        throw new Error("missing TLV 0 for naddr");
      if (!((p = $[2]) != null && p[0]))
        throw new Error("missing TLV 2 for naddr");
      if ($[2][0].length !== 32)
        throw new Error("TLV 2 should be 32 bytes");
      if (!((g = $[3]) != null && g[0]))
        throw new Error("missing TLV 3 for naddr");
      if ($[3][0].length !== 4)
        throw new Error("TLV 3 should be 4 bytes");
      return {
        type: "naddr",
        data: {
          identifier: utf8Decoder$1.decode($[0][0]),
          pubkey: bytesToHex$5($[2][0]),
          kind: parseInt(bytesToHex$5($[3][0]), 16),
          relays: $[1] ? $[1].map((k) => utf8Decoder$1.decode(k)) : []
        }
      };
    }
    case "nrelay": {
      let $ = parseTLV$1(r);
      if (!((y = $[0]) != null && y[0]))
        throw new Error("missing TLV 0 for nrelay");
      return {
        type: "nrelay",
        data: utf8Decoder$1.decode($[0][0])
      };
    }
    case "nsec":
      return { type: e, data: r };
    case "npub":
    case "note":
      return { type: e, data: bytesToHex$5(r) };
    default:
      throw new Error(`unknown prefix ${e}`);
  }
}
function parseTLV$1(t) {
  let e = {}, n = t;
  for (; n.length > 0; ) {
    let r = n[0], s = n[1], o = n.slice(2, 2 + s);
    if (n = n.slice(2 + s), o.length < s)
      throw new Error(`not enough data to read on TLV ${r}`);
    e[r] = e[r] || [], e[r].push(o);
  }
  return e;
}
function nsecEncode$1(t) {
  return encodeBytes$1("nsec", t);
}
function npubEncode$1(t) {
  return encodeBytes$1("npub", hexToBytes$5(t));
}
function noteEncode$1(t) {
  return encodeBytes$1("note", hexToBytes$5(t));
}
function encodeBech32$1(t, e) {
  let n = bech32$1.toWords(e);
  return bech32$1.encode(t, n, Bech32MaxSize$1);
}
function encodeBytes$1(t, e) {
  return encodeBech32$1(t, e);
}
function nprofileEncode$1(t) {
  let e = encodeTLV$1({
    0: [hexToBytes$5(t.pubkey)],
    1: (t.relays || []).map((n) => utf8Encoder$1.encode(n))
  });
  return encodeBech32$1("nprofile", e);
}
function neventEncode$1(t) {
  let e;
  t.kind !== void 0 && (e = integerToUint8Array$1(t.kind));
  let n = encodeTLV$1({
    0: [hexToBytes$5(t.id)],
    1: (t.relays || []).map((r) => utf8Encoder$1.encode(r)),
    2: t.author ? [hexToBytes$5(t.author)] : [],
    3: e ? [new Uint8Array(e)] : []
  });
  return encodeBech32$1("nevent", n);
}
function naddrEncode$1(t) {
  let e = new ArrayBuffer(4);
  new DataView(e).setUint32(0, t.kind, !1);
  let n = encodeTLV$1({
    0: [utf8Encoder$1.encode(t.identifier)],
    1: (t.relays || []).map((r) => utf8Encoder$1.encode(r)),
    2: [hexToBytes$5(t.pubkey)],
    3: [new Uint8Array(e)]
  });
  return encodeBech32$1("naddr", n);
}
function nrelayEncode$1(t) {
  let e = encodeTLV$1({
    0: [utf8Encoder$1.encode(t)]
  });
  return encodeBech32$1("nrelay", e);
}
function encodeTLV$1(t) {
  let e = [];
  return Object.entries(t).reverse().forEach(([n, r]) => {
    r.forEach((s) => {
      let o = new Uint8Array(s.length + 2);
      o.set([parseInt(n)], 0), o.set([s.length], 1), o.set(s, 2), e.push(o);
    });
  }), concatBytes$6(...e);
}
var nip04_exports$1 = {};
__export$1(nip04_exports$1, {
  decrypt: () => decrypt$2,
  encrypt: () => encrypt$2
});
async function encrypt$2(t, e, n) {
  const r = t instanceof Uint8Array ? bytesToHex$5(t) : t, s = secp256k1$3.getSharedSecret(r, "02" + e), o = getNormalizedX$1(s);
  let a = Uint8Array.from(randomBytes$3(16)), c = utf8Encoder$1.encode(n), h = cbc(o, a).encrypt(c), p = base64$1.encode(new Uint8Array(h)), g = base64$1.encode(new Uint8Array(a.buffer));
  return `${p}?iv=${g}`;
}
async function decrypt$2(t, e, n) {
  const r = t instanceof Uint8Array ? bytesToHex$5(t) : t;
  let [s, o] = n.split("?iv="), a = secp256k1$3.getSharedSecret(r, "02" + e), c = getNormalizedX$1(a), h = base64$1.decode(o), p = base64$1.decode(s), g = cbc(c, h).decrypt(p);
  return utf8Decoder$1.decode(g);
}
function getNormalizedX$1(t) {
  return t.slice(1, 33);
}
var nip05_exports$1 = {};
__export$1(nip05_exports$1, {
  NIP05_REGEX: () => NIP05_REGEX$2,
  isValid: () => isValid,
  queryProfile: () => queryProfile$1,
  searchDomain: () => searchDomain$1,
  useFetchImplementation: () => useFetchImplementation$1
});
var NIP05_REGEX$2 = /^(?:([\w.+-]+)@)?([\w_-]+(\.[\w_-]+)+)$/, _fetch$1;
try {
  _fetch$1 = fetch;
} catch {
}
function useFetchImplementation$1(t) {
  _fetch$1 = t;
}
async function searchDomain$1(t, e = "") {
  try {
    const n = `https://${t}/.well-known/nostr.json?name=${e}`;
    return (await (await _fetch$1(n, { redirect: "error" })).json()).names;
  } catch {
    return {};
  }
}
async function queryProfile$1(t) {
  var o;
  const e = t.match(NIP05_REGEX$2);
  if (!e)
    return null;
  const [n, r = "_", s] = e;
  try {
    const a = `https://${s}/.well-known/nostr.json?name=${r}`, c = await (await _fetch$1(a, { redirect: "error" })).json();
    let h = c.names[r];
    return h ? { pubkey: h, relays: (o = c.relays) == null ? void 0 : o[h] } : null;
  } catch {
    return null;
  }
}
async function isValid(t, e) {
  let n = await queryProfile$1(e);
  return n ? n.pubkey === t : !1;
}
var nip10_exports$1 = {};
__export$1(nip10_exports$1, {
  parse: () => parse$1
});
function parse$1(t) {
  const e = {
    reply: void 0,
    root: void 0,
    mentions: [],
    profiles: []
  }, n = [];
  for (const r of t.tags)
    r[0] === "e" && r[1] && n.push(r), r[0] === "p" && r[1] && e.profiles.push({
      pubkey: r[1],
      relays: r[2] ? [r[2]] : []
    });
  for (let r = 0; r < n.length; r++) {
    const s = n[r], [o, a, c, h] = s, p = {
      id: a,
      relays: c ? [c] : []
    }, g = r === 0, y = r === n.length - 1;
    if (h === "root") {
      e.root = p;
      continue;
    }
    if (h === "reply") {
      e.reply = p;
      continue;
    }
    if (h === "mention") {
      e.mentions.push(p);
      continue;
    }
    if (g) {
      e.root = p;
      continue;
    }
    if (y) {
      e.reply = p;
      continue;
    }
    e.mentions.push(p);
  }
  return e;
}
var nip11_exports = {};
__export$1(nip11_exports, {
  fetchRelayInformation: () => fetchRelayInformation,
  useFetchImplementation: () => useFetchImplementation2$1
});
var _fetch2$1;
try {
  _fetch2$1 = fetch;
} catch {
}
function useFetchImplementation2$1(t) {
  _fetch2$1 = t;
}
async function fetchRelayInformation(t) {
  return await (await fetch(t.replace("ws://", "http://").replace("wss://", "https://"), {
    headers: { Accept: "application/nostr+json" }
  })).json();
}
var nip13_exports$1 = {};
__export$1(nip13_exports$1, {
  getPow: () => getPow$1,
  minePow: () => minePow$1
});
function getPow$1(t) {
  let e = 0;
  for (let n = 0; n < t.length; n++) {
    const r = parseInt(t[n], 16);
    if (r === 0)
      e += 4;
    else {
      e += Math.clz32(r) - 28;
      break;
    }
  }
  return e;
}
function minePow$1(t, e) {
  let n = 0;
  const r = t, s = ["nonce", n.toString(), e.toString()];
  for (r.tags.push(s); ; ) {
    const o = Math.floor((/* @__PURE__ */ new Date()).getTime() / 1e3);
    if (o !== r.created_at && (n = 0, r.created_at = o), s[1] = (++n).toString(), r.id = getEventHash$2(r), getPow$1(r.id) >= e)
      break;
  }
  return r;
}
var nip18_exports$1 = {};
__export$1(nip18_exports$1, {
  finishRepostEvent: () => finishRepostEvent$1,
  getRepostedEvent: () => getRepostedEvent$1,
  getRepostedEventPointer: () => getRepostedEventPointer$1
});
function finishRepostEvent$1(t, e, n, r) {
  return finalizeEvent(
    {
      kind: Repost,
      tags: [...t.tags ?? [], ["e", e.id, n], ["p", e.pubkey]],
      content: t.content === "" ? "" : JSON.stringify(e),
      created_at: t.created_at
    },
    r
  );
}
function getRepostedEventPointer$1(t) {
  if (t.kind !== Repost)
    return;
  let e, n;
  for (let r = t.tags.length - 1; r >= 0 && (e === void 0 || n === void 0); r--) {
    const s = t.tags[r];
    s.length >= 2 && (s[0] === "e" && e === void 0 ? e = s : s[0] === "p" && n === void 0 && (n = s));
  }
  if (e !== void 0)
    return {
      id: e[1],
      relays: [e[2], n == null ? void 0 : n[2]].filter((r) => typeof r == "string"),
      author: n == null ? void 0 : n[1]
    };
}
function getRepostedEvent$1(t, { skipVerification: e } = {}) {
  const n = getRepostedEventPointer$1(t);
  if (n === void 0 || t.content === "")
    return;
  let r;
  try {
    r = JSON.parse(t.content);
  } catch {
    return;
  }
  if (r.id === n.id && !(!e && !verifyEvent(r)))
    return r;
}
var nip21_exports$1 = {};
__export$1(nip21_exports$1, {
  NOSTR_URI_REGEX: () => NOSTR_URI_REGEX$1,
  parse: () => parse2$1,
  test: () => test$1
});
var NOSTR_URI_REGEX$1 = new RegExp(`nostr:(${BECH32_REGEX$2.source})`);
function test$1(t) {
  return typeof t == "string" && new RegExp(`^${NOSTR_URI_REGEX$1.source}$`).test(t);
}
function parse2$1(t) {
  const e = t.match(new RegExp(`^${NOSTR_URI_REGEX$1.source}$`));
  if (!e)
    throw new Error(`Invalid Nostr URI: ${t}`);
  return {
    uri: e[0],
    value: e[1],
    decoded: decode$1(e[1])
  };
}
var nip25_exports$1 = {};
__export$1(nip25_exports$1, {
  finishReactionEvent: () => finishReactionEvent$1,
  getReactedEventPointer: () => getReactedEventPointer$1
});
function finishReactionEvent$1(t, e, n) {
  const r = e.tags.filter((s) => s.length >= 2 && (s[0] === "e" || s[0] === "p"));
  return finalizeEvent(
    {
      ...t,
      kind: Reaction,
      tags: [...t.tags ?? [], ...r, ["e", e.id], ["p", e.pubkey]],
      content: t.content ?? "+"
    },
    n
  );
}
function getReactedEventPointer$1(t) {
  if (t.kind !== Reaction)
    return;
  let e, n;
  for (let r = t.tags.length - 1; r >= 0 && (e === void 0 || n === void 0); r--) {
    const s = t.tags[r];
    s.length >= 2 && (s[0] === "e" && e === void 0 ? e = s : s[0] === "p" && n === void 0 && (n = s));
  }
  if (!(e === void 0 || n === void 0))
    return {
      id: e[1],
      relays: [e[2], n[2]].filter((r) => r !== void 0),
      author: n[1]
    };
}
var nip27_exports$1 = {};
__export$1(nip27_exports$1, {
  matchAll: () => matchAll$1,
  regex: () => regex$1,
  replaceAll: () => replaceAll$1
});
var regex$1 = () => new RegExp(`\\b${NOSTR_URI_REGEX$1.source}\\b`, "g");
function* matchAll$1(t) {
  const e = t.matchAll(regex$1());
  for (const n of e)
    try {
      const [r, s] = n;
      yield {
        uri: r,
        value: s,
        decoded: decode$1(s),
        start: n.index,
        end: n.index + r.length
      };
    } catch {
    }
}
function replaceAll$1(t, e) {
  return t.replaceAll(regex$1(), (n, r) => e({
    uri: n,
    value: r,
    decoded: decode$1(r)
  }));
}
var nip28_exports$1 = {};
__export$1(nip28_exports$1, {
  channelCreateEvent: () => channelCreateEvent$1,
  channelHideMessageEvent: () => channelHideMessageEvent$1,
  channelMessageEvent: () => channelMessageEvent$1,
  channelMetadataEvent: () => channelMetadataEvent$1,
  channelMuteUserEvent: () => channelMuteUserEvent$1
});
var channelCreateEvent$1 = (t, e) => {
  let n;
  if (typeof t.content == "object")
    n = JSON.stringify(t.content);
  else if (typeof t.content == "string")
    n = t.content;
  else
    return;
  return finalizeEvent(
    {
      kind: ChannelCreation,
      tags: [...t.tags ?? []],
      content: n,
      created_at: t.created_at
    },
    e
  );
}, channelMetadataEvent$1 = (t, e) => {
  let n;
  if (typeof t.content == "object")
    n = JSON.stringify(t.content);
  else if (typeof t.content == "string")
    n = t.content;
  else
    return;
  return finalizeEvent(
    {
      kind: ChannelMetadata,
      tags: [["e", t.channel_create_event_id], ...t.tags ?? []],
      content: n,
      created_at: t.created_at
    },
    e
  );
}, channelMessageEvent$1 = (t, e) => {
  const n = [["e", t.channel_create_event_id, t.relay_url, "root"]];
  return t.reply_to_channel_message_event_id && n.push(["e", t.reply_to_channel_message_event_id, t.relay_url, "reply"]), finalizeEvent(
    {
      kind: ChannelMessage,
      tags: [...n, ...t.tags ?? []],
      content: t.content,
      created_at: t.created_at
    },
    e
  );
}, channelHideMessageEvent$1 = (t, e) => {
  let n;
  if (typeof t.content == "object")
    n = JSON.stringify(t.content);
  else if (typeof t.content == "string")
    n = t.content;
  else
    return;
  return finalizeEvent(
    {
      kind: ChannelHideMessage,
      tags: [["e", t.channel_message_event_id], ...t.tags ?? []],
      content: n,
      created_at: t.created_at
    },
    e
  );
}, channelMuteUserEvent$1 = (t, e) => {
  let n;
  if (typeof t.content == "object")
    n = JSON.stringify(t.content);
  else if (typeof t.content == "string")
    n = t.content;
  else
    return;
  return finalizeEvent(
    {
      kind: ChannelMuteUser,
      tags: [["p", t.pubkey_to_mute], ...t.tags ?? []],
      content: n,
      created_at: t.created_at
    },
    e
  );
}, nip30_exports = {};
__export$1(nip30_exports, {
  EMOJI_SHORTCODE_REGEX: () => EMOJI_SHORTCODE_REGEX,
  matchAll: () => matchAll2,
  regex: () => regex2,
  replaceAll: () => replaceAll2
});
var EMOJI_SHORTCODE_REGEX = /:(\w+):/, regex2 = () => new RegExp(`\\B${EMOJI_SHORTCODE_REGEX.source}\\B`, "g");
function* matchAll2(t) {
  const e = t.matchAll(regex2());
  for (const n of e)
    try {
      const [r, s] = n;
      yield {
        shortcode: r,
        name: s,
        start: n.index,
        end: n.index + r.length
      };
    } catch {
    }
}
function replaceAll2(t, e) {
  return t.replaceAll(regex2(), (n, r) => e({
    shortcode: n,
    name: r
  }));
}
var nip39_exports$1 = {};
__export$1(nip39_exports$1, {
  useFetchImplementation: () => useFetchImplementation3$1,
  validateGithub: () => validateGithub$1
});
var _fetch3$1;
try {
  _fetch3$1 = fetch;
} catch {
}
function useFetchImplementation3$1(t) {
  _fetch3$1 = t;
}
async function validateGithub$1(t, e, n) {
  try {
    return await (await _fetch3$1(`https://gist.github.com/${e}/${n}/raw`)).text() === `Verifying that I control the following Nostr public key: ${t}`;
  } catch {
    return !1;
  }
}
var nip44_exports$1 = {};
__export$1(nip44_exports$1, {
  default: () => nip44_default,
  v2: () => v2
});
var decoder = new TextDecoder(), _u = class {
  static utf8Decode(t) {
    return decoder.decode(t);
  }
  static getConversationKey(t, e) {
    const n = secp256k1$3.getSharedSecret(t, "02" + e).subarray(1, 33);
    return extract$1(sha256$5, n, "nip44-v2");
  }
  static getMessageKeys(t, e) {
    const n = expand$1(sha256$5, t, e, 76);
    return {
      chacha_key: n.subarray(0, 32),
      chacha_nonce: n.subarray(32, 44),
      hmac_key: n.subarray(44, 76)
    };
  }
  static calcPaddedLen(t) {
    if (!Number.isSafeInteger(t) || t < 1)
      throw new Error("expected positive integer");
    if (t <= 32)
      return 32;
    const e = 1 << Math.floor(Math.log2(t - 1)) + 1, n = e <= 256 ? 32 : e / 8;
    return n * (Math.floor((t - 1) / n) + 1);
  }
  static writeU16BE(t) {
    if (!Number.isSafeInteger(t) || t < _u.minPlaintextSize || t > _u.maxPlaintextSize)
      throw new Error("invalid plaintext size: must be between 1 and 65535 bytes");
    const e = new Uint8Array(2);
    return new DataView(e.buffer).setUint16(0, t, !1), e;
  }
  static pad(t) {
    const e = _u.utf8Encode(t), n = e.length, r = _u.writeU16BE(n), s = new Uint8Array(_u.calcPaddedLen(n) - n);
    return concatBytes$6(r, e, s);
  }
  static unpad(t) {
    const e = new DataView(t.buffer).getUint16(0), n = t.subarray(2, 2 + e);
    if (e < _u.minPlaintextSize || e > _u.maxPlaintextSize || n.length !== e || t.length !== 2 + _u.calcPaddedLen(e))
      throw new Error("invalid padding");
    return _u.utf8Decode(n);
  }
  static hmacAad(t, e, n) {
    if (n.length !== 32)
      throw new Error("AAD associated data must be 32 bytes");
    const r = concatBytes$6(n, e);
    return hmac$5(sha256$5, t, r);
  }
  static decodePayload(t) {
    if (typeof t != "string")
      throw new Error("payload must be a valid string");
    const e = t.length;
    if (e < 132 || e > 87472)
      throw new Error("invalid payload length: " + e);
    if (t[0] === "#")
      throw new Error("unknown encryption version");
    let n;
    try {
      n = base64$1.decode(t);
    } catch (o) {
      throw new Error("invalid base64: " + o.message);
    }
    const r = n.length;
    if (r < 99 || r > 65603)
      throw new Error("invalid data length: " + r);
    const s = n[0];
    if (s !== 2)
      throw new Error("unknown encryption version " + s);
    return {
      nonce: n.subarray(1, 33),
      ciphertext: n.subarray(33, -32),
      mac: n.subarray(-32)
    };
  }
}, u = _u;
__publicField(u, "minPlaintextSize", 1);
__publicField(u, "maxPlaintextSize", 65535);
__publicField(u, "utf8Encode", utf8ToBytes$9);
var v2 = class {
  static encrypt(t, e, n = randomBytes$3(32)) {
    const { chacha_key: r, chacha_nonce: s, hmac_key: o } = u.getMessageKeys(e, n), a = u.pad(t), c = chacha20$1(r, s, a), h = u.hmacAad(o, c, n);
    return base64$1.encode(concatBytes$6(new Uint8Array([2]), n, c, h));
  }
  static decrypt(t, e) {
    const { nonce: n, ciphertext: r, mac: s } = u.decodePayload(t), { chacha_key: o, chacha_nonce: a, hmac_key: c } = u.getMessageKeys(e, n), h = u.hmacAad(c, r, n);
    if (!equalBytes$4(h, s))
      throw new Error("invalid MAC");
    const p = chacha20$1(o, a, r);
    return u.unpad(p);
  }
};
__publicField(v2, "utils", u);
var nip44_default = { v2 }, nip47_exports$1 = {};
__export$1(nip47_exports$1, {
  makeNwcRequestEvent: () => makeNwcRequestEvent$1,
  parseConnectionString: () => parseConnectionString$1
});
function parseConnectionString$1(t) {
  const { pathname: e, searchParams: n } = new URL(t), r = e, s = n.get("relay"), o = n.get("secret");
  if (!r || !s || !o)
    throw new Error("invalid connection string");
  return { pubkey: r, relay: s, secret: o };
}
async function makeNwcRequestEvent$1(t, e, n) {
  const s = await encrypt$2(e, t, JSON.stringify({
    method: "pay_invoice",
    params: {
      invoice: n
    }
  })), o = {
    kind: NWCWalletRequest,
    created_at: Math.round(Date.now() / 1e3),
    content: s,
    tags: [["p", t]]
  };
  return finalizeEvent(o, e);
}
var nip57_exports$1 = {};
__export$1(nip57_exports$1, {
  getZapEndpoint: () => getZapEndpoint$1,
  makeZapReceipt: () => makeZapReceipt$1,
  makeZapRequest: () => makeZapRequest$1,
  useFetchImplementation: () => useFetchImplementation4,
  validateZapRequest: () => validateZapRequest$1
});
var _fetch4;
try {
  _fetch4 = fetch;
} catch {
}
function useFetchImplementation4(t) {
  _fetch4 = t;
}
async function getZapEndpoint$1(t) {
  try {
    let e = "", { lud06: n, lud16: r } = JSON.parse(t.content);
    if (n) {
      let { words: a } = bech32$1.decode(n, 1e3), c = bech32$1.fromWords(a);
      e = utf8Decoder$1.decode(c);
    } else if (r) {
      let [a, c] = r.split("@");
      e = new URL(`/.well-known/lnurlp/${a}`, `https://${c}`).toString();
    } else
      return null;
    let o = await (await _fetch4(e)).json();
    if (o.allowsNostr && o.nostrPubkey)
      return o.callback;
  } catch {
  }
  return null;
}
function makeZapRequest$1({
  profile: t,
  event: e,
  amount: n,
  relays: r,
  comment: s = ""
}) {
  if (!n)
    throw new Error("amount not given");
  if (!t)
    throw new Error("profile not given");
  let o = {
    kind: 9734,
    created_at: Math.round(Date.now() / 1e3),
    content: s,
    tags: [
      ["p", t],
      ["amount", n.toString()],
      ["relays", ...r]
    ]
  };
  return e && o.tags.push(["e", e]), o;
}
function validateZapRequest$1(t) {
  let e;
  try {
    e = JSON.parse(t);
  } catch {
    return "Invalid zap request JSON.";
  }
  if (!validateEvent$1(e))
    return "Zap request is not a valid Nostr event.";
  if (!verifyEvent(e))
    return "Invalid signature on zap request.";
  let n = e.tags.find(([o, a]) => o === "p" && a);
  if (!n)
    return "Zap request doesn't have a 'p' tag.";
  if (!n[1].match(/^[a-f0-9]{64}$/))
    return "Zap request 'p' tag is not valid hex.";
  let r = e.tags.find(([o, a]) => o === "e" && a);
  return r && !r[1].match(/^[a-f0-9]{64}$/) ? "Zap request 'e' tag is not valid hex." : e.tags.find(([o, a]) => o === "relays" && a) ? null : "Zap request doesn't have a 'relays' tag.";
}
function makeZapReceipt$1({
  zapRequest: t,
  preimage: e,
  bolt11: n,
  paidAt: r
}) {
  let s = JSON.parse(t), o = s.tags.filter(([c]) => c === "e" || c === "p" || c === "a"), a = {
    kind: 9735,
    created_at: Math.round(r.getTime() / 1e3),
    content: "",
    tags: [...o, ["P", s.pubkey], ["bolt11", n], ["description", t]]
  };
  return e && a.tags.push(["preimage", e]), a;
}
var nip98_exports$1 = {};
__export$1(nip98_exports$1, {
  getToken: () => getToken$1,
  hashPayload: () => hashPayload,
  unpackEventFromToken: () => unpackEventFromToken$1,
  validateEvent: () => validateEvent2$1,
  validateEventKind: () => validateEventKind,
  validateEventMethodTag: () => validateEventMethodTag,
  validateEventPayloadTag: () => validateEventPayloadTag,
  validateEventTimestamp: () => validateEventTimestamp,
  validateEventUrlTag: () => validateEventUrlTag,
  validateToken: () => validateToken$1
});
var _authorizationScheme$1 = "Nostr ";
async function getToken$1(t, e, n, r = !1, s) {
  const o = {
    kind: HTTPAuth,
    tags: [
      ["u", t],
      ["method", e]
    ],
    created_at: Math.round((/* @__PURE__ */ new Date()).getTime() / 1e3),
    content: ""
  };
  s && o.tags.push(["payload", hashPayload(s)]);
  const a = await n(o);
  return (r ? _authorizationScheme$1 : "") + base64$1.encode(utf8Encoder$1.encode(JSON.stringify(a)));
}
async function validateToken$1(t, e, n) {
  const r = await unpackEventFromToken$1(t).catch((o) => {
    throw o;
  });
  return await validateEvent2$1(r, e, n).catch((o) => {
    throw o;
  });
}
async function unpackEventFromToken$1(t) {
  if (!t)
    throw new Error("Missing token");
  t = t.replace(_authorizationScheme$1, "");
  const e = utf8Decoder$1.decode(base64$1.decode(t));
  if (!e || e.length === 0 || !e.startsWith("{"))
    throw new Error("Invalid token");
  return JSON.parse(e);
}
function validateEventTimestamp(t) {
  return t.created_at ? Math.round((/* @__PURE__ */ new Date()).getTime() / 1e3) - t.created_at < 60 : !1;
}
function validateEventKind(t) {
  return t.kind === HTTPAuth;
}
function validateEventUrlTag(t, e) {
  const n = t.tags.find((r) => r[0] === "u");
  return n ? n.length > 0 && n[1] === e : !1;
}
function validateEventMethodTag(t, e) {
  const n = t.tags.find((r) => r[0] === "method");
  return n ? n.length > 0 && n[1].toLowerCase() === e.toLowerCase() : !1;
}
function hashPayload(t) {
  const e = sha256$5(utf8Encoder$1.encode(JSON.stringify(t)));
  return bytesToHex$5(e);
}
function validateEventPayloadTag(t, e) {
  const n = t.tags.find((s) => s[0] === "payload");
  if (!n)
    return !1;
  const r = hashPayload(e);
  return n.length > 0 && n[1] === r;
}
async function validateEvent2$1(t, e, n, r) {
  if (!verifyEvent(t))
    throw new Error("Invalid nostr event, signature invalid");
  if (!validateEventKind(t))
    throw new Error("Invalid nostr event, kind invalid");
  if (!validateEventTimestamp(t))
    throw new Error("Invalid nostr event, created_at timestamp invalid");
  if (!validateEventUrlTag(t, e))
    throw new Error("Invalid nostr event, url tag invalid");
  if (!validateEventMethodTag(t, n))
    throw new Error("Invalid nostr event, method tag invalid");
  if (r && typeof r == "object" && Object.keys(r).length > 0 && !validateEventPayloadTag(t, r))
    throw new Error("Invalid nostr event, payload tag does not match request body hash");
  return !0;
}
class Hex {
  /**
   * @throws Error if the provided string is not a valid hex value or does not match the expected length
   */
  constructor(e, n) {
    M(this, "value");
    this.validateHex(e, n), this.value = e;
  }
  validateHex(e, n) {
    if (!/^[0-9a-fA-F]+$/.test(e))
      throw new Error(`The provided string is not a valid hex value: "${e}"`);
    if (n && e.length !== n)
      throw new Error(
        `The provided hex value does not match the expected length of ${n} characters: ${e}`
      );
  }
  toBech32(e) {
    if (!e)
      throw new Error("prefix is required");
    const n = hexToBytes$7(this.value);
    return nip19_exports$1.encodeBytes(e, n);
  }
  get hex() {
    return this.value;
  }
  toString() {
    return this.value;
  }
}
class PublicKey extends Hex {
  /**
   * @param str hex or npub encoded string
   * @throws Error if the provided string is not a valid nostr public key
   */
  constructor(n) {
    const r = n.startsWith("npub");
    let s = n;
    if (r) {
      const o = nip19_exports$1.decode(n);
      if (o.type === "npub")
        s = o.data;
      else
        throw new Error(`failed to decode npub ${n}`);
    }
    super(s, 64);
    M(this, "npubValue");
    r && (this.npubValue = n);
  }
  get npub() {
    return this.npubValue || (this.npubValue = super.toBech32("npub")), this.npubValue;
  }
  equals(n) {
    if (typeof n == "string") {
      if (n === this.value)
        return !0;
      n = new PublicKey(n);
    }
    return this.value === n.value;
  }
}
function number$4(t) {
  if (!Number.isSafeInteger(t) || t < 0)
    throw new Error(`Wrong positive integer: ${t}`);
}
function bool$3(t) {
  if (typeof t != "boolean")
    throw new Error(`Expected boolean, not ${t}`);
}
function bytes$4(t, ...e) {
  if (!(t instanceof Uint8Array))
    throw new Error("Expected Uint8Array");
  if (e.length > 0 && !e.includes(t.length))
    throw new Error(`Expected Uint8Array of length ${e}, not of length=${t.length}`);
}
function hash$4(t) {
  if (typeof t != "function" || typeof t.create != "function")
    throw new Error("Hash should be wrapped by utils.wrapConstructor");
  number$4(t.outputLen), number$4(t.blockLen);
}
function exists$4(t, e = !0) {
  if (t.destroyed)
    throw new Error("Hash instance has been destroyed");
  if (e && t.finished)
    throw new Error("Hash#digest() has already been called");
}
function output$4(t, e) {
  bytes$4(t);
  const n = e.outputLen;
  if (t.length < n)
    throw new Error(`digestInto() expects output buffer of length at least ${n}`);
}
const assert$3 = {
  number: number$4,
  bool: bool$3,
  bytes: bytes$4,
  hash: hash$4,
  exists: exists$4,
  output: output$4
}, crypto$3 = typeof globalThis == "object" && "crypto" in globalThis ? globalThis.crypto : void 0;
/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */
const u8a$4 = (t) => t instanceof Uint8Array, createView$3 = (t) => new DataView(t.buffer, t.byteOffset, t.byteLength), rotr$3 = (t, e) => t << 32 - e | t >>> e, isLE$4 = new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68;
if (!isLE$4)
  throw new Error("Non little-endian hardware is not supported");
const hexes$4 = Array.from({ length: 256 }, (t, e) => e.toString(16).padStart(2, "0"));
function bytesToHex$4(t) {
  if (!u8a$4(t))
    throw new Error("Uint8Array expected");
  let e = "";
  for (let n = 0; n < t.length; n++)
    e += hexes$4[t[n]];
  return e;
}
function hexToBytes$4(t) {
  if (typeof t != "string")
    throw new Error("hex string expected, got " + typeof t);
  const e = t.length;
  if (e % 2)
    throw new Error("padded hex string expected, got unpadded hex of length " + e);
  const n = new Uint8Array(e / 2);
  for (let r = 0; r < n.length; r++) {
    const s = r * 2, o = t.slice(s, s + 2), a = Number.parseInt(o, 16);
    if (Number.isNaN(a) || a < 0)
      throw new Error("Invalid byte sequence");
    n[r] = a;
  }
  return n;
}
function utf8ToBytes$7(t) {
  if (typeof t != "string")
    throw new Error(`utf8ToBytes expected string, got ${typeof t}`);
  return new Uint8Array(new TextEncoder().encode(t));
}
function toBytes$4(t) {
  if (typeof t == "string" && (t = utf8ToBytes$7(t)), !u8a$4(t))
    throw new Error(`expected Uint8Array, got ${typeof t}`);
  return t;
}
function concatBytes$5(...t) {
  const e = new Uint8Array(t.reduce((r, s) => r + s.length, 0));
  let n = 0;
  return t.forEach((r) => {
    if (!u8a$4(r))
      throw new Error("Uint8Array expected");
    e.set(r, n), n += r.length;
  }), e;
}
let Hash$3 = class {
  // Safe version that clones internal state
  clone() {
    return this._cloneInto();
  }
};
function wrapConstructor$3(t) {
  const e = (r) => t().update(toBytes$4(r)).digest(), n = t();
  return e.outputLen = n.outputLen, e.blockLen = n.blockLen, e.create = () => t(), e;
}
function randomBytes$2(t = 32) {
  if (crypto$3 && typeof crypto$3.getRandomValues == "function")
    return crypto$3.getRandomValues(new Uint8Array(t));
  throw new Error("crypto.getRandomValues must be defined");
}
function setBigUint64$4(t, e, n, r) {
  if (typeof t.setBigUint64 == "function")
    return t.setBigUint64(e, n, r);
  const s = BigInt(32), o = BigInt(4294967295), a = Number(n >> s & o), c = Number(n & o), h = r ? 4 : 0, p = r ? 0 : 4;
  t.setUint32(e + h, a, r), t.setUint32(e + p, c, r);
}
let SHA2$3 = class extends Hash$3 {
  constructor(e, n, r, s) {
    super(), this.blockLen = e, this.outputLen = n, this.padOffset = r, this.isLE = s, this.finished = !1, this.length = 0, this.pos = 0, this.destroyed = !1, this.buffer = new Uint8Array(e), this.view = createView$3(this.buffer);
  }
  update(e) {
    assert$3.exists(this);
    const { view: n, buffer: r, blockLen: s } = this;
    e = toBytes$4(e);
    const o = e.length;
    for (let a = 0; a < o; ) {
      const c = Math.min(s - this.pos, o - a);
      if (c === s) {
        const h = createView$3(e);
        for (; s <= o - a; a += s)
          this.process(h, a);
        continue;
      }
      r.set(e.subarray(a, a + c), this.pos), this.pos += c, a += c, this.pos === s && (this.process(n, 0), this.pos = 0);
    }
    return this.length += e.length, this.roundClean(), this;
  }
  digestInto(e) {
    assert$3.exists(this), assert$3.output(e, this), this.finished = !0;
    const { buffer: n, view: r, blockLen: s, isLE: o } = this;
    let { pos: a } = this;
    n[a++] = 128, this.buffer.subarray(a).fill(0), this.padOffset > s - a && (this.process(r, 0), a = 0);
    for (let y = a; y < s; y++)
      n[y] = 0;
    setBigUint64$4(r, s - 8, BigInt(this.length * 8), o), this.process(r, 0);
    const c = createView$3(e), h = this.outputLen;
    if (h % 4)
      throw new Error("_sha2: outputLen should be aligned to 32bit");
    const p = h / 4, g = this.get();
    if (p > g.length)
      throw new Error("_sha2: outputLen bigger than state");
    for (let y = 0; y < p; y++)
      c.setUint32(4 * y, g[y], o);
  }
  digest() {
    const { buffer: e, outputLen: n } = this;
    this.digestInto(e);
    const r = e.slice(0, n);
    return this.destroy(), r;
  }
  _cloneInto(e) {
    e || (e = new this.constructor()), e.set(...this.get());
    const { blockLen: n, buffer: r, length: s, finished: o, destroyed: a, pos: c } = this;
    return e.length = s, e.pos = c, e.finished = o, e.destroyed = a, s % n && e.buffer.set(r), e;
  }
};
const Chi$4 = (t, e, n) => t & e ^ ~t & n, Maj$4 = (t, e, n) => t & e ^ t & n ^ e & n, SHA256_K$4 = new Uint32Array([
  1116352408,
  1899447441,
  3049323471,
  3921009573,
  961987163,
  1508970993,
  2453635748,
  2870763221,
  3624381080,
  310598401,
  607225278,
  1426881987,
  1925078388,
  2162078206,
  2614888103,
  3248222580,
  3835390401,
  4022224774,
  264347078,
  604807628,
  770255983,
  1249150122,
  1555081692,
  1996064986,
  2554220882,
  2821834349,
  2952996808,
  3210313671,
  3336571891,
  3584528711,
  113926993,
  338241895,
  666307205,
  773529912,
  1294757372,
  1396182291,
  1695183700,
  1986661051,
  2177026350,
  2456956037,
  2730485921,
  2820302411,
  3259730800,
  3345764771,
  3516065817,
  3600352804,
  4094571909,
  275423344,
  430227734,
  506948616,
  659060556,
  883997877,
  958139571,
  1322822218,
  1537002063,
  1747873779,
  1955562222,
  2024104815,
  2227730452,
  2361852424,
  2428436474,
  2756734187,
  3204031479,
  3329325298
]), IV$3 = new Uint32Array([
  1779033703,
  3144134277,
  1013904242,
  2773480762,
  1359893119,
  2600822924,
  528734635,
  1541459225
]), SHA256_W$4 = new Uint32Array(64);
let SHA256$4 = class extends SHA2$3 {
  constructor() {
    super(64, 32, 8, !1), this.A = IV$3[0] | 0, this.B = IV$3[1] | 0, this.C = IV$3[2] | 0, this.D = IV$3[3] | 0, this.E = IV$3[4] | 0, this.F = IV$3[5] | 0, this.G = IV$3[6] | 0, this.H = IV$3[7] | 0;
  }
  get() {
    const { A: e, B: n, C: r, D: s, E: o, F: a, G: c, H: h } = this;
    return [e, n, r, s, o, a, c, h];
  }
  // prettier-ignore
  set(e, n, r, s, o, a, c, h) {
    this.A = e | 0, this.B = n | 0, this.C = r | 0, this.D = s | 0, this.E = o | 0, this.F = a | 0, this.G = c | 0, this.H = h | 0;
  }
  process(e, n) {
    for (let y = 0; y < 16; y++, n += 4)
      SHA256_W$4[y] = e.getUint32(n, !1);
    for (let y = 16; y < 64; y++) {
      const $ = SHA256_W$4[y - 15], k = SHA256_W$4[y - 2], S = rotr$3($, 7) ^ rotr$3($, 18) ^ $ >>> 3, w = rotr$3(k, 17) ^ rotr$3(k, 19) ^ k >>> 10;
      SHA256_W$4[y] = w + SHA256_W$4[y - 7] + S + SHA256_W$4[y - 16] | 0;
    }
    let { A: r, B: s, C: o, D: a, E: c, F: h, G: p, H: g } = this;
    for (let y = 0; y < 64; y++) {
      const $ = rotr$3(c, 6) ^ rotr$3(c, 11) ^ rotr$3(c, 25), k = g + $ + Chi$4(c, h, p) + SHA256_K$4[y] + SHA256_W$4[y] | 0, w = (rotr$3(r, 2) ^ rotr$3(r, 13) ^ rotr$3(r, 22)) + Maj$4(r, s, o) | 0;
      g = p, p = h, h = c, c = a + k | 0, a = o, o = s, s = r, r = k + w | 0;
    }
    r = r + this.A | 0, s = s + this.B | 0, o = o + this.C | 0, a = a + this.D | 0, c = c + this.E | 0, h = h + this.F | 0, p = p + this.G | 0, g = g + this.H | 0, this.set(r, s, o, a, c, h, p, g);
  }
  roundClean() {
    SHA256_W$4.fill(0);
  }
  destroy() {
    this.set(0, 0, 0, 0, 0, 0, 0, 0), this.buffer.fill(0);
  }
}, SHA224$1 = class extends SHA256$4 {
  constructor() {
    super(), this.A = -1056596264, this.B = 914150663, this.C = 812702999, this.D = -150054599, this.E = -4191439, this.F = 1750603025, this.G = 1694076839, this.H = -1090891868, this.outputLen = 28;
  }
};
const sha256$4 = wrapConstructor$3(() => new SHA256$4());
wrapConstructor$3(() => new SHA224$1());
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
const _0n$d = BigInt(0), _1n$e = BigInt(1), _2n$8 = BigInt(2), u8a$3 = (t) => t instanceof Uint8Array, hexes$3 = Array.from({ length: 256 }, (t, e) => e.toString(16).padStart(2, "0"));
function bytesToHex$3(t) {
  if (!u8a$3(t))
    throw new Error("Uint8Array expected");
  let e = "";
  for (let n = 0; n < t.length; n++)
    e += hexes$3[t[n]];
  return e;
}
function numberToHexUnpadded$2(t) {
  const e = t.toString(16);
  return e.length & 1 ? `0${e}` : e;
}
function hexToNumber$2(t) {
  if (typeof t != "string")
    throw new Error("hex string expected, got " + typeof t);
  return BigInt(t === "" ? "0" : `0x${t}`);
}
function hexToBytes$3(t) {
  if (typeof t != "string")
    throw new Error("hex string expected, got " + typeof t);
  const e = t.length;
  if (e % 2)
    throw new Error("padded hex string expected, got unpadded hex of length " + e);
  const n = new Uint8Array(e / 2);
  for (let r = 0; r < n.length; r++) {
    const s = r * 2, o = t.slice(s, s + 2), a = Number.parseInt(o, 16);
    if (Number.isNaN(a) || a < 0)
      throw new Error("Invalid byte sequence");
    n[r] = a;
  }
  return n;
}
function bytesToNumberBE$2(t) {
  return hexToNumber$2(bytesToHex$3(t));
}
function bytesToNumberLE$2(t) {
  if (!u8a$3(t))
    throw new Error("Uint8Array expected");
  return hexToNumber$2(bytesToHex$3(Uint8Array.from(t).reverse()));
}
function numberToBytesBE$2(t, e) {
  return hexToBytes$3(t.toString(16).padStart(e * 2, "0"));
}
function numberToBytesLE$2(t, e) {
  return numberToBytesBE$2(t, e).reverse();
}
function numberToVarBytesBE$2(t) {
  return hexToBytes$3(numberToHexUnpadded$2(t));
}
function ensureBytes$3(t, e, n) {
  let r;
  if (typeof e == "string")
    try {
      r = hexToBytes$3(e);
    } catch (o) {
      throw new Error(`${t} must be valid hex string, got "${e}". Cause: ${o}`);
    }
  else if (u8a$3(e))
    r = Uint8Array.from(e);
  else
    throw new Error(`${t} must be hex string or Uint8Array`);
  const s = r.length;
  if (typeof n == "number" && s !== n)
    throw new Error(`${t} expected ${n} bytes, got ${s}`);
  return r;
}
function concatBytes$4(...t) {
  const e = new Uint8Array(t.reduce((r, s) => r + s.length, 0));
  let n = 0;
  return t.forEach((r) => {
    if (!u8a$3(r))
      throw new Error("Uint8Array expected");
    e.set(r, n), n += r.length;
  }), e;
}
function equalBytes$3(t, e) {
  if (t.length !== e.length)
    return !1;
  for (let n = 0; n < t.length; n++)
    if (t[n] !== e[n])
      return !1;
  return !0;
}
function utf8ToBytes$6(t) {
  if (typeof t != "string")
    throw new Error(`utf8ToBytes expected string, got ${typeof t}`);
  return new Uint8Array(new TextEncoder().encode(t));
}
function bitLen$2(t) {
  let e;
  for (e = 0; t > _0n$d; t >>= _1n$e, e += 1)
    ;
  return e;
}
function bitGet$2(t, e) {
  return t >> BigInt(e) & _1n$e;
}
const bitSet$2 = (t, e, n) => t | (n ? _1n$e : _0n$d) << BigInt(e), bitMask$2 = (t) => (_2n$8 << BigInt(t - 1)) - _1n$e, u8n$2 = (t) => new Uint8Array(t), u8fr$2 = (t) => Uint8Array.from(t);
function createHmacDrbg$2(t, e, n) {
  if (typeof t != "number" || t < 2)
    throw new Error("hashLen must be a number");
  if (typeof e != "number" || e < 2)
    throw new Error("qByteLen must be a number");
  if (typeof n != "function")
    throw new Error("hmacFn must be a function");
  let r = u8n$2(t), s = u8n$2(t), o = 0;
  const a = () => {
    r.fill(1), s.fill(0), o = 0;
  }, c = (...y) => n(s, r, ...y), h = (y = u8n$2()) => {
    s = c(u8fr$2([0]), y), r = c(), y.length !== 0 && (s = c(u8fr$2([1]), y), r = c());
  }, p = () => {
    if (o++ >= 1e3)
      throw new Error("drbg: tried 1000 values");
    let y = 0;
    const $ = [];
    for (; y < e; ) {
      r = c();
      const k = r.slice();
      $.push(k), y += r.length;
    }
    return concatBytes$4(...$);
  };
  return (y, $) => {
    a(), h(y);
    let k;
    for (; !(k = $(p())); )
      h();
    return a(), k;
  };
}
const validatorFns$2 = {
  bigint: (t) => typeof t == "bigint",
  function: (t) => typeof t == "function",
  boolean: (t) => typeof t == "boolean",
  string: (t) => typeof t == "string",
  isSafeInteger: (t) => Number.isSafeInteger(t),
  array: (t) => Array.isArray(t),
  field: (t, e) => e.Fp.isValid(t),
  hash: (t) => typeof t == "function" && Number.isSafeInteger(t.outputLen)
};
function validateObject$2(t, e, n = {}) {
  const r = (s, o, a) => {
    const c = validatorFns$2[o];
    if (typeof c != "function")
      throw new Error(`Invalid validator "${o}", expected function`);
    const h = t[s];
    if (!(a && h === void 0) && !c(h, t))
      throw new Error(`Invalid param ${String(s)}=${h} (${typeof h}), expected ${o}`);
  };
  for (const [s, o] of Object.entries(e))
    r(s, o, !1);
  for (const [s, o] of Object.entries(n))
    r(s, o, !0);
  return t;
}
const ut$2 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  bitGet: bitGet$2,
  bitLen: bitLen$2,
  bitMask: bitMask$2,
  bitSet: bitSet$2,
  bytesToHex: bytesToHex$3,
  bytesToNumberBE: bytesToNumberBE$2,
  bytesToNumberLE: bytesToNumberLE$2,
  concatBytes: concatBytes$4,
  createHmacDrbg: createHmacDrbg$2,
  ensureBytes: ensureBytes$3,
  equalBytes: equalBytes$3,
  hexToBytes: hexToBytes$3,
  hexToNumber: hexToNumber$2,
  numberToBytesBE: numberToBytesBE$2,
  numberToBytesLE: numberToBytesLE$2,
  numberToHexUnpadded: numberToHexUnpadded$2,
  numberToVarBytesBE: numberToVarBytesBE$2,
  utf8ToBytes: utf8ToBytes$6,
  validateObject: validateObject$2
}, Symbol.toStringTag, { value: "Module" }));
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
const _0n$c = BigInt(0), _1n$d = BigInt(1), _2n$7 = BigInt(2), _3n$5 = BigInt(3), _4n$2 = BigInt(4), _5n$2 = BigInt(5), _8n$2 = BigInt(8);
BigInt(9);
BigInt(16);
function mod$2(t, e) {
  const n = t % e;
  return n >= _0n$c ? n : e + n;
}
function pow$2(t, e, n) {
  if (n <= _0n$c || e < _0n$c)
    throw new Error("Expected power/modulo > 0");
  if (n === _1n$d)
    return _0n$c;
  let r = _1n$d;
  for (; e > _0n$c; )
    e & _1n$d && (r = r * t % n), t = t * t % n, e >>= _1n$d;
  return r;
}
function pow2$2(t, e, n) {
  let r = t;
  for (; e-- > _0n$c; )
    r *= r, r %= n;
  return r;
}
function invert$2(t, e) {
  if (t === _0n$c || e <= _0n$c)
    throw new Error(`invert: expected positive integers, got n=${t} mod=${e}`);
  let n = mod$2(t, e), r = e, s = _0n$c, o = _1n$d;
  for (; n !== _0n$c; ) {
    const c = r / n, h = r % n, p = s - o * c;
    r = n, n = h, s = o, o = p;
  }
  if (r !== _1n$d)
    throw new Error("invert: does not exist");
  return mod$2(s, e);
}
function tonelliShanks$2(t) {
  const e = (t - _1n$d) / _2n$7;
  let n, r, s;
  for (n = t - _1n$d, r = 0; n % _2n$7 === _0n$c; n /= _2n$7, r++)
    ;
  for (s = _2n$7; s < t && pow$2(s, e, t) !== t - _1n$d; s++)
    ;
  if (r === 1) {
    const a = (t + _1n$d) / _4n$2;
    return function(h, p) {
      const g = h.pow(p, a);
      if (!h.eql(h.sqr(g), p))
        throw new Error("Cannot find square root");
      return g;
    };
  }
  const o = (n + _1n$d) / _2n$7;
  return function(c, h) {
    if (c.pow(h, e) === c.neg(c.ONE))
      throw new Error("Cannot find square root");
    let p = r, g = c.pow(c.mul(c.ONE, s), n), y = c.pow(h, o), $ = c.pow(h, n);
    for (; !c.eql($, c.ONE); ) {
      if (c.eql($, c.ZERO))
        return c.ZERO;
      let k = 1;
      for (let w = c.sqr($); k < p && !c.eql(w, c.ONE); k++)
        w = c.sqr(w);
      const S = c.pow(g, _1n$d << BigInt(p - k - 1));
      g = c.sqr(S), y = c.mul(y, S), $ = c.mul($, g), p = k;
    }
    return y;
  };
}
function FpSqrt$2(t) {
  if (t % _4n$2 === _3n$5) {
    const e = (t + _1n$d) / _4n$2;
    return function(r, s) {
      const o = r.pow(s, e);
      if (!r.eql(r.sqr(o), s))
        throw new Error("Cannot find square root");
      return o;
    };
  }
  if (t % _8n$2 === _5n$2) {
    const e = (t - _5n$2) / _8n$2;
    return function(r, s) {
      const o = r.mul(s, _2n$7), a = r.pow(o, e), c = r.mul(s, a), h = r.mul(r.mul(c, _2n$7), a), p = r.mul(c, r.sub(h, r.ONE));
      if (!r.eql(r.sqr(p), s))
        throw new Error("Cannot find square root");
      return p;
    };
  }
  return tonelliShanks$2(t);
}
const FIELD_FIELDS$2 = [
  "create",
  "isValid",
  "is0",
  "neg",
  "inv",
  "sqrt",
  "sqr",
  "eql",
  "add",
  "sub",
  "mul",
  "pow",
  "div",
  "addN",
  "subN",
  "mulN",
  "sqrN"
];
function validateField$2(t) {
  const e = {
    ORDER: "bigint",
    MASK: "bigint",
    BYTES: "isSafeInteger",
    BITS: "isSafeInteger"
  }, n = FIELD_FIELDS$2.reduce((r, s) => (r[s] = "function", r), e);
  return validateObject$2(t, n);
}
function FpPow$2(t, e, n) {
  if (n < _0n$c)
    throw new Error("Expected power > 0");
  if (n === _0n$c)
    return t.ONE;
  if (n === _1n$d)
    return e;
  let r = t.ONE, s = e;
  for (; n > _0n$c; )
    n & _1n$d && (r = t.mul(r, s)), s = t.sqr(s), n >>= _1n$d;
  return r;
}
function FpInvertBatch$2(t, e) {
  const n = new Array(e.length), r = e.reduce((o, a, c) => t.is0(a) ? o : (n[c] = o, t.mul(o, a)), t.ONE), s = t.inv(r);
  return e.reduceRight((o, a, c) => t.is0(a) ? o : (n[c] = t.mul(o, n[c]), t.mul(o, a)), s), n;
}
function nLength$2(t, e) {
  const n = e !== void 0 ? e : t.toString(2).length, r = Math.ceil(n / 8);
  return { nBitLength: n, nByteLength: r };
}
function Field$2(t, e, n = !1, r = {}) {
  if (t <= _0n$c)
    throw new Error(`Expected Fp ORDER > 0, got ${t}`);
  const { nBitLength: s, nByteLength: o } = nLength$2(t, e);
  if (o > 2048)
    throw new Error("Field lengths over 2048 bytes are not supported");
  const a = FpSqrt$2(t), c = Object.freeze({
    ORDER: t,
    BITS: s,
    BYTES: o,
    MASK: bitMask$2(s),
    ZERO: _0n$c,
    ONE: _1n$d,
    create: (h) => mod$2(h, t),
    isValid: (h) => {
      if (typeof h != "bigint")
        throw new Error(`Invalid field element: expected bigint, got ${typeof h}`);
      return _0n$c <= h && h < t;
    },
    is0: (h) => h === _0n$c,
    isOdd: (h) => (h & _1n$d) === _1n$d,
    neg: (h) => mod$2(-h, t),
    eql: (h, p) => h === p,
    sqr: (h) => mod$2(h * h, t),
    add: (h, p) => mod$2(h + p, t),
    sub: (h, p) => mod$2(h - p, t),
    mul: (h, p) => mod$2(h * p, t),
    pow: (h, p) => FpPow$2(c, h, p),
    div: (h, p) => mod$2(h * invert$2(p, t), t),
    // Same as above, but doesn't normalize
    sqrN: (h) => h * h,
    addN: (h, p) => h + p,
    subN: (h, p) => h - p,
    mulN: (h, p) => h * p,
    inv: (h) => invert$2(h, t),
    sqrt: r.sqrt || ((h) => a(c, h)),
    invertBatch: (h) => FpInvertBatch$2(c, h),
    // TODO: do we really need constant cmov?
    // We don't have const-time bigints anyway, so probably will be not very useful
    cmov: (h, p, g) => g ? p : h,
    toBytes: (h) => n ? numberToBytesLE$2(h, o) : numberToBytesBE$2(h, o),
    fromBytes: (h) => {
      if (h.length !== o)
        throw new Error(`Fp.fromBytes: expected ${o}, got ${h.length}`);
      return n ? bytesToNumberLE$2(h) : bytesToNumberBE$2(h);
    }
  });
  return Object.freeze(c);
}
function hashToPrivateScalar$1(t, e, n = !1) {
  t = ensureBytes$3("privateHash", t);
  const r = t.length, s = nLength$2(e).nByteLength + 8;
  if (s < 24 || r < s || r > 1024)
    throw new Error(`hashToPrivateScalar: expected ${s}-1024 bytes of input, got ${r}`);
  const o = n ? bytesToNumberLE$2(t) : bytesToNumberBE$2(t);
  return mod$2(o, e - _1n$d) + _1n$d;
}
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
const _0n$b = BigInt(0), _1n$c = BigInt(1);
function wNAF$2(t, e) {
  const n = (s, o) => {
    const a = o.negate();
    return s ? a : o;
  }, r = (s) => {
    const o = Math.ceil(e / s) + 1, a = 2 ** (s - 1);
    return { windows: o, windowSize: a };
  };
  return {
    constTimeNegate: n,
    // non-const time multiplication ladder
    unsafeLadder(s, o) {
      let a = t.ZERO, c = s;
      for (; o > _0n$b; )
        o & _1n$c && (a = a.add(c)), c = c.double(), o >>= _1n$c;
      return a;
    },
    /**
     * Creates a wNAF precomputation window. Used for caching.
     * Default window size is set by `utils.precompute()` and is equal to 8.
     * Number of precomputed points depends on the curve size:
     * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:
     * - 𝑊 is the window size
     * - 𝑛 is the bitlength of the curve order.
     * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.
     * @returns precomputed point tables flattened to a single array
     */
    precomputeWindow(s, o) {
      const { windows: a, windowSize: c } = r(o), h = [];
      let p = s, g = p;
      for (let y = 0; y < a; y++) {
        g = p, h.push(g);
        for (let $ = 1; $ < c; $++)
          g = g.add(p), h.push(g);
        p = g.double();
      }
      return h;
    },
    /**
     * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.
     * @param W window size
     * @param precomputes precomputed tables
     * @param n scalar (we don't check here, but should be less than curve order)
     * @returns real and fake (for const-time) points
     */
    wNAF(s, o, a) {
      const { windows: c, windowSize: h } = r(s);
      let p = t.ZERO, g = t.BASE;
      const y = BigInt(2 ** s - 1), $ = 2 ** s, k = BigInt(s);
      for (let S = 0; S < c; S++) {
        const w = S * h;
        let x = Number(a & y);
        a >>= k, x > h && (x -= $, a += _1n$c);
        const A = w, N = w + Math.abs(x) - 1, C = S % 2 !== 0, W = x < 0;
        x === 0 ? g = g.add(n(C, o[A])) : p = p.add(n(W, o[N]));
      }
      return { p, f: g };
    },
    wNAFCached(s, o, a, c) {
      const h = s._WINDOW_SIZE || 1;
      let p = o.get(s);
      return p || (p = this.precomputeWindow(s, h), h !== 1 && o.set(s, c(p))), this.wNAF(h, p, a);
    }
  };
}
function validateBasic$2(t) {
  return validateField$2(t.Fp), validateObject$2(t, {
    n: "bigint",
    h: "bigint",
    Gx: "field",
    Gy: "field"
  }, {
    nBitLength: "isSafeInteger",
    nByteLength: "isSafeInteger"
  }), Object.freeze({
    ...nLength$2(t.n, t.nBitLength),
    ...t,
    p: t.Fp.ORDER
  });
}
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
function validatePointOpts$2(t) {
  const e = validateBasic$2(t);
  validateObject$2(e, {
    a: "field",
    b: "field"
  }, {
    allowedPrivateKeyLengths: "array",
    wrapPrivateKey: "boolean",
    isTorsionFree: "function",
    clearCofactor: "function",
    allowInfinityPoint: "boolean",
    fromBytes: "function",
    toBytes: "function"
  });
  const { endo: n, Fp: r, a: s } = e;
  if (n) {
    if (!r.eql(s, r.ZERO))
      throw new Error("Endomorphism can only be defined for Koblitz curves that have a=0");
    if (typeof n != "object" || typeof n.beta != "bigint" || typeof n.splitScalar != "function")
      throw new Error("Expected endomorphism with beta: bigint and splitScalar: function");
  }
  return Object.freeze({ ...e });
}
const { bytesToNumberBE: b2n$2, hexToBytes: h2b$2 } = ut$2, DER$2 = {
  // asn.1 DER encoding utils
  Err: class extends Error {
    constructor(e = "") {
      super(e);
    }
  },
  _parseInt(t) {
    const { Err: e } = DER$2;
    if (t.length < 2 || t[0] !== 2)
      throw new e("Invalid signature integer tag");
    const n = t[1], r = t.subarray(2, n + 2);
    if (!n || r.length !== n)
      throw new e("Invalid signature integer: wrong length");
    if (r[0] & 128)
      throw new e("Invalid signature integer: negative");
    if (r[0] === 0 && !(r[1] & 128))
      throw new e("Invalid signature integer: unnecessary leading zero");
    return { d: b2n$2(r), l: t.subarray(n + 2) };
  },
  toSig(t) {
    const { Err: e } = DER$2, n = typeof t == "string" ? h2b$2(t) : t;
    if (!(n instanceof Uint8Array))
      throw new Error("ui8a expected");
    let r = n.length;
    if (r < 2 || n[0] != 48)
      throw new e("Invalid signature tag");
    if (n[1] !== r - 2)
      throw new e("Invalid signature: incorrect length");
    const { d: s, l: o } = DER$2._parseInt(n.subarray(2)), { d: a, l: c } = DER$2._parseInt(o);
    if (c.length)
      throw new e("Invalid signature: left bytes after parsing");
    return { r: s, s: a };
  },
  hexFromSig(t) {
    const e = (p) => Number.parseInt(p[0], 16) & 8 ? "00" + p : p, n = (p) => {
      const g = p.toString(16);
      return g.length & 1 ? `0${g}` : g;
    }, r = e(n(t.s)), s = e(n(t.r)), o = r.length / 2, a = s.length / 2, c = n(o), h = n(a);
    return `30${n(a + o + 4)}02${h}${s}02${c}${r}`;
  }
}, _0n$a = BigInt(0), _1n$b = BigInt(1);
BigInt(2);
const _3n$4 = BigInt(3);
BigInt(4);
function weierstrassPoints$2(t) {
  const e = validatePointOpts$2(t), { Fp: n } = e, r = e.toBytes || ((S, w, x) => {
    const A = w.toAffine();
    return concatBytes$4(Uint8Array.from([4]), n.toBytes(A.x), n.toBytes(A.y));
  }), s = e.fromBytes || ((S) => {
    const w = S.subarray(1), x = n.fromBytes(w.subarray(0, n.BYTES)), A = n.fromBytes(w.subarray(n.BYTES, 2 * n.BYTES));
    return { x, y: A };
  });
  function o(S) {
    const { a: w, b: x } = e, A = n.sqr(S), N = n.mul(A, S);
    return n.add(n.add(N, n.mul(S, w)), x);
  }
  if (!n.eql(n.sqr(e.Gy), o(e.Gx)))
    throw new Error("bad generator point: equation left != right");
  function a(S) {
    return typeof S == "bigint" && _0n$a < S && S < e.n;
  }
  function c(S) {
    if (!a(S))
      throw new Error("Expected valid bigint: 0 < bigint < curve.n");
  }
  function h(S) {
    const { allowedPrivateKeyLengths: w, nByteLength: x, wrapPrivateKey: A, n: N } = e;
    if (w && typeof S != "bigint") {
      if (S instanceof Uint8Array && (S = bytesToHex$3(S)), typeof S != "string" || !w.includes(S.length))
        throw new Error("Invalid key");
      S = S.padStart(x * 2, "0");
    }
    let C;
    try {
      C = typeof S == "bigint" ? S : bytesToNumberBE$2(ensureBytes$3("private key", S, x));
    } catch {
      throw new Error(`private key must be ${x} bytes, hex or bigint, not ${typeof S}`);
    }
    return A && (C = mod$2(C, N)), c(C), C;
  }
  const p = /* @__PURE__ */ new Map();
  function g(S) {
    if (!(S instanceof y))
      throw new Error("ProjectivePoint expected");
  }
  class y {
    constructor(w, x, A) {
      if (this.px = w, this.py = x, this.pz = A, w == null || !n.isValid(w))
        throw new Error("x required");
      if (x == null || !n.isValid(x))
        throw new Error("y required");
      if (A == null || !n.isValid(A))
        throw new Error("z required");
    }
    // Does not validate if the point is on-curve.
    // Use fromHex instead, or call assertValidity() later.
    static fromAffine(w) {
      const { x, y: A } = w || {};
      if (!w || !n.isValid(x) || !n.isValid(A))
        throw new Error("invalid affine point");
      if (w instanceof y)
        throw new Error("projective point not allowed");
      const N = (C) => n.eql(C, n.ZERO);
      return N(x) && N(A) ? y.ZERO : new y(x, A, n.ONE);
    }
    get x() {
      return this.toAffine().x;
    }
    get y() {
      return this.toAffine().y;
    }
    /**
     * Takes a bunch of Projective Points but executes only one
     * inversion on all of them. Inversion is very slow operation,
     * so this improves performance massively.
     * Optimization: converts a list of projective points to a list of identical points with Z=1.
     */
    static normalizeZ(w) {
      const x = n.invertBatch(w.map((A) => A.pz));
      return w.map((A, N) => A.toAffine(x[N])).map(y.fromAffine);
    }
    /**
     * Converts hash string or Uint8Array to Point.
     * @param hex short/long ECDSA hex
     */
    static fromHex(w) {
      const x = y.fromAffine(s(ensureBytes$3("pointHex", w)));
      return x.assertValidity(), x;
    }
    // Multiplies generator point by privateKey.
    static fromPrivateKey(w) {
      return y.BASE.multiply(h(w));
    }
    // "Private method", don't use it directly
    _setWindowSize(w) {
      this._WINDOW_SIZE = w, p.delete(this);
    }
    // A point on curve is valid if it conforms to equation.
    assertValidity() {
      if (this.is0()) {
        if (e.allowInfinityPoint)
          return;
        throw new Error("bad point: ZERO");
      }
      const { x: w, y: x } = this.toAffine();
      if (!n.isValid(w) || !n.isValid(x))
        throw new Error("bad point: x or y not FE");
      const A = n.sqr(x), N = o(w);
      if (!n.eql(A, N))
        throw new Error("bad point: equation left != right");
      if (!this.isTorsionFree())
        throw new Error("bad point: not in prime-order subgroup");
    }
    hasEvenY() {
      const { y: w } = this.toAffine();
      if (n.isOdd)
        return !n.isOdd(w);
      throw new Error("Field doesn't support isOdd");
    }
    /**
     * Compare one point to another.
     */
    equals(w) {
      g(w);
      const { px: x, py: A, pz: N } = this, { px: C, py: W, pz: q } = w, I = n.eql(n.mul(x, q), n.mul(C, N)), L = n.eql(n.mul(A, q), n.mul(W, N));
      return I && L;
    }
    /**
     * Flips point to one corresponding to (x, -y) in Affine coordinates.
     */
    negate() {
      return new y(this.px, n.neg(this.py), this.pz);
    }
    // Renes-Costello-Batina exception-free doubling formula.
    // There is 30% faster Jacobian formula, but it is not complete.
    // https://eprint.iacr.org/2015/1060, algorithm 3
    // Cost: 8M + 3S + 3*a + 2*b3 + 15add.
    double() {
      const { a: w, b: x } = e, A = n.mul(x, _3n$4), { px: N, py: C, pz: W } = this;
      let q = n.ZERO, I = n.ZERO, L = n.ZERO, P = n.mul(N, N), ie = n.mul(C, C), te = n.mul(W, W), T = n.mul(N, C);
      return T = n.add(T, T), L = n.mul(N, W), L = n.add(L, L), q = n.mul(w, L), I = n.mul(A, te), I = n.add(q, I), q = n.sub(ie, I), I = n.add(ie, I), I = n.mul(q, I), q = n.mul(T, q), L = n.mul(A, L), te = n.mul(w, te), T = n.sub(P, te), T = n.mul(w, T), T = n.add(T, L), L = n.add(P, P), P = n.add(L, P), P = n.add(P, te), P = n.mul(P, T), I = n.add(I, P), te = n.mul(C, W), te = n.add(te, te), P = n.mul(te, T), q = n.sub(q, P), L = n.mul(te, ie), L = n.add(L, L), L = n.add(L, L), new y(q, I, L);
    }
    // Renes-Costello-Batina exception-free addition formula.
    // There is 30% faster Jacobian formula, but it is not complete.
    // https://eprint.iacr.org/2015/1060, algorithm 1
    // Cost: 12M + 0S + 3*a + 3*b3 + 23add.
    add(w) {
      g(w);
      const { px: x, py: A, pz: N } = this, { px: C, py: W, pz: q } = w;
      let I = n.ZERO, L = n.ZERO, P = n.ZERO;
      const ie = e.a, te = n.mul(e.b, _3n$4);
      let T = n.mul(x, C), O = n.mul(A, W), K = n.mul(N, q), ae = n.add(x, A), E = n.add(C, W);
      ae = n.mul(ae, E), E = n.add(T, O), ae = n.sub(ae, E), E = n.add(x, N);
      let B = n.add(C, q);
      return E = n.mul(E, B), B = n.add(T, K), E = n.sub(E, B), B = n.add(A, N), I = n.add(W, q), B = n.mul(B, I), I = n.add(O, K), B = n.sub(B, I), P = n.mul(ie, E), I = n.mul(te, K), P = n.add(I, P), I = n.sub(O, P), P = n.add(O, P), L = n.mul(I, P), O = n.add(T, T), O = n.add(O, T), K = n.mul(ie, K), E = n.mul(te, E), O = n.add(O, K), K = n.sub(T, K), K = n.mul(ie, K), E = n.add(E, K), T = n.mul(O, E), L = n.add(L, T), T = n.mul(B, E), I = n.mul(ae, I), I = n.sub(I, T), T = n.mul(ae, O), P = n.mul(B, P), P = n.add(P, T), new y(I, L, P);
    }
    subtract(w) {
      return this.add(w.negate());
    }
    is0() {
      return this.equals(y.ZERO);
    }
    wNAF(w) {
      return k.wNAFCached(this, p, w, (x) => {
        const A = n.invertBatch(x.map((N) => N.pz));
        return x.map((N, C) => N.toAffine(A[C])).map(y.fromAffine);
      });
    }
    /**
     * Non-constant-time multiplication. Uses double-and-add algorithm.
     * It's faster, but should only be used when you don't care about
     * an exposed private key e.g. sig verification, which works over *public* keys.
     */
    multiplyUnsafe(w) {
      const x = y.ZERO;
      if (w === _0n$a)
        return x;
      if (c(w), w === _1n$b)
        return this;
      const { endo: A } = e;
      if (!A)
        return k.unsafeLadder(this, w);
      let { k1neg: N, k1: C, k2neg: W, k2: q } = A.splitScalar(w), I = x, L = x, P = this;
      for (; C > _0n$a || q > _0n$a; )
        C & _1n$b && (I = I.add(P)), q & _1n$b && (L = L.add(P)), P = P.double(), C >>= _1n$b, q >>= _1n$b;
      return N && (I = I.negate()), W && (L = L.negate()), L = new y(n.mul(L.px, A.beta), L.py, L.pz), I.add(L);
    }
    /**
     * Constant time multiplication.
     * Uses wNAF method. Windowed method may be 10% faster,
     * but takes 2x longer to generate and consumes 2x memory.
     * Uses precomputes when available.
     * Uses endomorphism for Koblitz curves.
     * @param scalar by which the point would be multiplied
     * @returns New point
     */
    multiply(w) {
      c(w);
      let x = w, A, N;
      const { endo: C } = e;
      if (C) {
        const { k1neg: W, k1: q, k2neg: I, k2: L } = C.splitScalar(x);
        let { p: P, f: ie } = this.wNAF(q), { p: te, f: T } = this.wNAF(L);
        P = k.constTimeNegate(W, P), te = k.constTimeNegate(I, te), te = new y(n.mul(te.px, C.beta), te.py, te.pz), A = P.add(te), N = ie.add(T);
      } else {
        const { p: W, f: q } = this.wNAF(x);
        A = W, N = q;
      }
      return y.normalizeZ([A, N])[0];
    }
    /**
     * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.
     * Not using Strauss-Shamir trick: precomputation tables are faster.
     * The trick could be useful if both P and Q are not G (not in our case).
     * @returns non-zero affine point
     */
    multiplyAndAddUnsafe(w, x, A) {
      const N = y.BASE, C = (q, I) => I === _0n$a || I === _1n$b || !q.equals(N) ? q.multiplyUnsafe(I) : q.multiply(I), W = C(this, x).add(C(w, A));
      return W.is0() ? void 0 : W;
    }
    // Converts Projective point to affine (x, y) coordinates.
    // Can accept precomputed Z^-1 - for example, from invertBatch.
    // (x, y, z) ∋ (x=x/z, y=y/z)
    toAffine(w) {
      const { px: x, py: A, pz: N } = this, C = this.is0();
      w == null && (w = C ? n.ONE : n.inv(N));
      const W = n.mul(x, w), q = n.mul(A, w), I = n.mul(N, w);
      if (C)
        return { x: n.ZERO, y: n.ZERO };
      if (!n.eql(I, n.ONE))
        throw new Error("invZ was invalid");
      return { x: W, y: q };
    }
    isTorsionFree() {
      const { h: w, isTorsionFree: x } = e;
      if (w === _1n$b)
        return !0;
      if (x)
        return x(y, this);
      throw new Error("isTorsionFree() has not been declared for the elliptic curve");
    }
    clearCofactor() {
      const { h: w, clearCofactor: x } = e;
      return w === _1n$b ? this : x ? x(y, this) : this.multiplyUnsafe(e.h);
    }
    toRawBytes(w = !0) {
      return this.assertValidity(), r(y, this, w);
    }
    toHex(w = !0) {
      return bytesToHex$3(this.toRawBytes(w));
    }
  }
  y.BASE = new y(e.Gx, e.Gy, n.ONE), y.ZERO = new y(n.ZERO, n.ONE, n.ZERO);
  const $ = e.nBitLength, k = wNAF$2(y, e.endo ? Math.ceil($ / 2) : $);
  return {
    CURVE: e,
    ProjectivePoint: y,
    normPrivateKeyToScalar: h,
    weierstrassEquation: o,
    isWithinCurveOrder: a
  };
}
function validateOpts$2(t) {
  const e = validateBasic$2(t);
  return validateObject$2(e, {
    hash: "hash",
    hmac: "function",
    randomBytes: "function"
  }, {
    bits2int: "function",
    bits2int_modN: "function",
    lowS: "boolean"
  }), Object.freeze({ lowS: !0, ...e });
}
function weierstrass$2(t) {
  const e = validateOpts$2(t), { Fp: n, n: r } = e, s = n.BYTES + 1, o = 2 * n.BYTES + 1;
  function a(E) {
    return _0n$a < E && E < n.ORDER;
  }
  function c(E) {
    return mod$2(E, r);
  }
  function h(E) {
    return invert$2(E, r);
  }
  const { ProjectivePoint: p, normPrivateKeyToScalar: g, weierstrassEquation: y, isWithinCurveOrder: $ } = weierstrassPoints$2({
    ...e,
    toBytes(E, B, H) {
      const Q = B.toAffine(), F = n.toBytes(Q.x), ce = concatBytes$4;
      return H ? ce(Uint8Array.from([B.hasEvenY() ? 2 : 3]), F) : ce(Uint8Array.from([4]), F, n.toBytes(Q.y));
    },
    fromBytes(E) {
      const B = E.length, H = E[0], Q = E.subarray(1);
      if (B === s && (H === 2 || H === 3)) {
        const F = bytesToNumberBE$2(Q);
        if (!a(F))
          throw new Error("Point is not on curve");
        const ce = y(F);
        let oe = n.sqrt(ce);
        const le = (oe & _1n$b) === _1n$b;
        return (H & 1) === 1 !== le && (oe = n.neg(oe)), { x: F, y: oe };
      } else if (B === o && H === 4) {
        const F = n.fromBytes(Q.subarray(0, n.BYTES)), ce = n.fromBytes(Q.subarray(n.BYTES, 2 * n.BYTES));
        return { x: F, y: ce };
      } else
        throw new Error(`Point of length ${B} was invalid. Expected ${s} compressed bytes or ${o} uncompressed bytes`);
    }
  }), k = (E) => bytesToHex$3(numberToBytesBE$2(E, e.nByteLength));
  function S(E) {
    const B = r >> _1n$b;
    return E > B;
  }
  function w(E) {
    return S(E) ? c(-E) : E;
  }
  const x = (E, B, H) => bytesToNumberBE$2(E.slice(B, H));
  class A {
    constructor(B, H, Q) {
      this.r = B, this.s = H, this.recovery = Q, this.assertValidity();
    }
    // pair (bytes of r, bytes of s)
    static fromCompact(B) {
      const H = e.nByteLength;
      return B = ensureBytes$3("compactSignature", B, H * 2), new A(x(B, 0, H), x(B, H, 2 * H));
    }
    // DER encoded ECDSA signature
    // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script
    static fromDER(B) {
      const { r: H, s: Q } = DER$2.toSig(ensureBytes$3("DER", B));
      return new A(H, Q);
    }
    assertValidity() {
      if (!$(this.r))
        throw new Error("r must be 0 < r < CURVE.n");
      if (!$(this.s))
        throw new Error("s must be 0 < s < CURVE.n");
    }
    addRecoveryBit(B) {
      return new A(this.r, this.s, B);
    }
    recoverPublicKey(B) {
      const { r: H, s: Q, recovery: F } = this, ce = L(ensureBytes$3("msgHash", B));
      if (F == null || ![0, 1, 2, 3].includes(F))
        throw new Error("recovery id invalid");
      const oe = F === 2 || F === 3 ? H + e.n : H;
      if (oe >= n.ORDER)
        throw new Error("recovery id 2 or 3 invalid");
      const le = F & 1 ? "03" : "02", ve = p.fromHex(le + k(oe)), xe = h(oe), Se = c(-ce * xe), Te = c(Q * xe), Ae = p.BASE.multiplyAndAddUnsafe(ve, Se, Te);
      if (!Ae)
        throw new Error("point at infinify");
      return Ae.assertValidity(), Ae;
    }
    // Signatures should be low-s, to prevent malleability.
    hasHighS() {
      return S(this.s);
    }
    normalizeS() {
      return this.hasHighS() ? new A(this.r, c(-this.s), this.recovery) : this;
    }
    // DER-encoded
    toDERRawBytes() {
      return hexToBytes$3(this.toDERHex());
    }
    toDERHex() {
      return DER$2.hexFromSig({ r: this.r, s: this.s });
    }
    // padded bytes of r, then padded bytes of s
    toCompactRawBytes() {
      return hexToBytes$3(this.toCompactHex());
    }
    toCompactHex() {
      return k(this.r) + k(this.s);
    }
  }
  const N = {
    isValidPrivateKey(E) {
      try {
        return g(E), !0;
      } catch {
        return !1;
      }
    },
    normPrivateKeyToScalar: g,
    /**
     * Produces cryptographically secure private key from random of size (nBitLength+64)
     * as per FIPS 186 B.4.1 with modulo bias being neglible.
     */
    randomPrivateKey: () => {
      const E = e.randomBytes(n.BYTES + 8), B = hashToPrivateScalar$1(E, r);
      return numberToBytesBE$2(B, e.nByteLength);
    },
    /**
     * Creates precompute table for an arbitrary EC point. Makes point "cached".
     * Allows to massively speed-up `point.multiply(scalar)`.
     * @returns cached point
     * @example
     * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));
     * fast.multiply(privKey); // much faster ECDH now
     */
    precompute(E = 8, B = p.BASE) {
      return B._setWindowSize(E), B.multiply(BigInt(3)), B;
    }
  };
  function C(E, B = !0) {
    return p.fromPrivateKey(E).toRawBytes(B);
  }
  function W(E) {
    const B = E instanceof Uint8Array, H = typeof E == "string", Q = (B || H) && E.length;
    return B ? Q === s || Q === o : H ? Q === 2 * s || Q === 2 * o : E instanceof p;
  }
  function q(E, B, H = !0) {
    if (W(E))
      throw new Error("first arg must be private key");
    if (!W(B))
      throw new Error("second arg must be public key");
    return p.fromHex(B).multiply(g(E)).toRawBytes(H);
  }
  const I = e.bits2int || function(E) {
    const B = bytesToNumberBE$2(E), H = E.length * 8 - e.nBitLength;
    return H > 0 ? B >> BigInt(H) : B;
  }, L = e.bits2int_modN || function(E) {
    return c(I(E));
  }, P = bitMask$2(e.nBitLength);
  function ie(E) {
    if (typeof E != "bigint")
      throw new Error("bigint expected");
    if (!(_0n$a <= E && E < P))
      throw new Error(`bigint expected < 2^${e.nBitLength}`);
    return numberToBytesBE$2(E, e.nByteLength);
  }
  function te(E, B, H = T) {
    if (["recovered", "canonical"].some((de) => de in H))
      throw new Error("sign() legacy options not supported");
    const { hash: Q, randomBytes: F } = e;
    let { lowS: ce, prehash: oe, extraEntropy: le } = H;
    ce == null && (ce = !0), E = ensureBytes$3("msgHash", E), oe && (E = ensureBytes$3("prehashed msgHash", Q(E)));
    const ve = L(E), xe = g(B), Se = [ie(xe), ie(ve)];
    if (le != null) {
      const de = le === !0 ? F(n.BYTES) : le;
      Se.push(ensureBytes$3("extraEntropy", de, n.BYTES));
    }
    const Te = concatBytes$4(...Se), Ae = ve;
    function Oe(de) {
      const Ue = I(de);
      if (!$(Ue))
        return;
      const Ve = h(Ue), _e = p.BASE.multiply(Ue).toAffine(), Be = c(_e.x);
      if (Be === _0n$a)
        return;
      const Pe = c(Ve * c(Ae + Be * xe));
      if (Pe === _0n$a)
        return;
      let qe = (_e.x === Be ? 0 : 2) | Number(_e.y & _1n$b), Xe = Pe;
      return ce && S(Pe) && (Xe = w(Pe), qe ^= 1), new A(Be, Xe, qe);
    }
    return { seed: Te, k2sig: Oe };
  }
  const T = { lowS: e.lowS, prehash: !1 }, O = { lowS: e.lowS, prehash: !1 };
  function K(E, B, H = T) {
    const { seed: Q, k2sig: F } = te(E, B, H), ce = e;
    return createHmacDrbg$2(ce.hash.outputLen, ce.nByteLength, ce.hmac)(Q, F);
  }
  p.BASE._setWindowSize(8);
  function ae(E, B, H, Q = O) {
    var _e;
    const F = E;
    if (B = ensureBytes$3("msgHash", B), H = ensureBytes$3("publicKey", H), "strict" in Q)
      throw new Error("options.strict was renamed to lowS");
    const { lowS: ce, prehash: oe } = Q;
    let le, ve;
    try {
      if (typeof F == "string" || F instanceof Uint8Array)
        try {
          le = A.fromDER(F);
        } catch (Be) {
          if (!(Be instanceof DER$2.Err))
            throw Be;
          le = A.fromCompact(F);
        }
      else if (typeof F == "object" && typeof F.r == "bigint" && typeof F.s == "bigint") {
        const { r: Be, s: Pe } = F;
        le = new A(Be, Pe);
      } else
        throw new Error("PARSE");
      ve = p.fromHex(H);
    } catch (Be) {
      if (Be.message === "PARSE")
        throw new Error("signature must be Signature instance, Uint8Array or hex string");
      return !1;
    }
    if (ce && le.hasHighS())
      return !1;
    oe && (B = e.hash(B));
    const { r: xe, s: Se } = le, Te = L(B), Ae = h(Se), Oe = c(Te * Ae), de = c(xe * Ae), Ue = (_e = p.BASE.multiplyAndAddUnsafe(ve, Oe, de)) == null ? void 0 : _e.toAffine();
    return Ue ? c(Ue.x) === xe : !1;
  }
  return {
    CURVE: e,
    getPublicKey: C,
    getSharedSecret: q,
    sign: K,
    verify: ae,
    ProjectivePoint: p,
    Signature: A,
    utils: N
  };
}
let HMAC$4 = class extends Hash$3 {
  constructor(e, n) {
    super(), this.finished = !1, this.destroyed = !1, assert$3.hash(e);
    const r = toBytes$4(n);
    if (this.iHash = e.create(), typeof this.iHash.update != "function")
      throw new Error("Expected instance of class which extends utils.Hash");
    this.blockLen = this.iHash.blockLen, this.outputLen = this.iHash.outputLen;
    const s = this.blockLen, o = new Uint8Array(s);
    o.set(r.length > s ? e.create().update(r).digest() : r);
    for (let a = 0; a < o.length; a++)
      o[a] ^= 54;
    this.iHash.update(o), this.oHash = e.create();
    for (let a = 0; a < o.length; a++)
      o[a] ^= 106;
    this.oHash.update(o), o.fill(0);
  }
  update(e) {
    return assert$3.exists(this), this.iHash.update(e), this;
  }
  digestInto(e) {
    assert$3.exists(this), assert$3.bytes(e, this.outputLen), this.finished = !0, this.iHash.digestInto(e), this.oHash.update(e), this.oHash.digestInto(e), this.destroy();
  }
  digest() {
    const e = new Uint8Array(this.oHash.outputLen);
    return this.digestInto(e), e;
  }
  _cloneInto(e) {
    e || (e = Object.create(Object.getPrototypeOf(this), {}));
    const { oHash: n, iHash: r, finished: s, destroyed: o, blockLen: a, outputLen: c } = this;
    return e = e, e.finished = s, e.destroyed = o, e.blockLen = a, e.outputLen = c, e.oHash = n._cloneInto(e.oHash), e.iHash = r._cloneInto(e.iHash), e;
  }
  destroy() {
    this.destroyed = !0, this.oHash.destroy(), this.iHash.destroy();
  }
};
const hmac$4 = (t, e, n) => new HMAC$4(t, e).update(n).digest();
hmac$4.create = (t, e) => new HMAC$4(t, e);
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
function getHash$2(t) {
  return {
    hash: t,
    hmac: (e, ...n) => hmac$4(t, e, concatBytes$5(...n)),
    randomBytes: randomBytes$2
  };
}
function createCurve$2(t, e) {
  const n = (r) => weierstrass$2({ ...t, ...getHash$2(r) });
  return Object.freeze({ ...n(e), create: n });
}
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
const secp256k1P$2 = BigInt("0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f"), secp256k1N$2 = BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141"), _1n$a = BigInt(1), _2n$6 = BigInt(2), divNearest$2 = (t, e) => (t + e / _2n$6) / e;
function sqrtMod$2(t) {
  const e = secp256k1P$2, n = BigInt(3), r = BigInt(6), s = BigInt(11), o = BigInt(22), a = BigInt(23), c = BigInt(44), h = BigInt(88), p = t * t * t % e, g = p * p * t % e, y = pow2$2(g, n, e) * g % e, $ = pow2$2(y, n, e) * g % e, k = pow2$2($, _2n$6, e) * p % e, S = pow2$2(k, s, e) * k % e, w = pow2$2(S, o, e) * S % e, x = pow2$2(w, c, e) * w % e, A = pow2$2(x, h, e) * x % e, N = pow2$2(A, c, e) * w % e, C = pow2$2(N, n, e) * g % e, W = pow2$2(C, a, e) * S % e, q = pow2$2(W, r, e) * p % e, I = pow2$2(q, _2n$6, e);
  if (!Fp$2.eql(Fp$2.sqr(I), t))
    throw new Error("Cannot find square root");
  return I;
}
const Fp$2 = Field$2(secp256k1P$2, void 0, void 0, { sqrt: sqrtMod$2 }), secp256k1$2 = createCurve$2({
  a: BigInt(0),
  b: BigInt(7),
  Fp: Fp$2,
  n: secp256k1N$2,
  // Base point (x, y) aka generator point
  Gx: BigInt("55066263022277343669578718895168534326250603453777594175500187360389116729240"),
  Gy: BigInt("32670510020758816978083085130507043184471273380659243275938904335757337482424"),
  h: BigInt(1),
  lowS: !0,
  /**
   * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.
   * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.
   * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.
   * Explanation: https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066
   */
  endo: {
    beta: BigInt("0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee"),
    splitScalar: (t) => {
      const e = secp256k1N$2, n = BigInt("0x3086d221a7d46bcde86c90e49284eb15"), r = -_1n$a * BigInt("0xe4437ed6010e88286f547fa90abfe4c3"), s = BigInt("0x114ca50f7a8e2f3f657c1108d9d44cfd8"), o = n, a = BigInt("0x100000000000000000000000000000000"), c = divNearest$2(o * t, e), h = divNearest$2(-r * t, e);
      let p = mod$2(t - c * n - h * s, e), g = mod$2(-c * r - h * o, e);
      const y = p > a, $ = g > a;
      if (y && (p = e - p), $ && (g = e - g), p > a || g > a)
        throw new Error("splitScalar: Endomorphism failed, k=" + t);
      return { k1neg: y, k1: p, k2neg: $, k2: g };
    }
  }
}, sha256$4), _0n$9 = BigInt(0), fe$1 = (t) => typeof t == "bigint" && _0n$9 < t && t < secp256k1P$2, ge$1 = (t) => typeof t == "bigint" && _0n$9 < t && t < secp256k1N$2, TAGGED_HASH_PREFIXES$1 = {};
function taggedHash$1(t, ...e) {
  let n = TAGGED_HASH_PREFIXES$1[t];
  if (n === void 0) {
    const r = sha256$4(Uint8Array.from(t, (s) => s.charCodeAt(0)));
    n = concatBytes$4(r, r), TAGGED_HASH_PREFIXES$1[t] = n;
  }
  return sha256$4(concatBytes$4(n, ...e));
}
const pointToBytes$1 = (t) => t.toRawBytes(!0).slice(1), numTo32b$1 = (t) => numberToBytesBE$2(t, 32), modP$1 = (t) => mod$2(t, secp256k1P$2), modN$1 = (t) => mod$2(t, secp256k1N$2), Point$2 = secp256k1$2.ProjectivePoint, GmulAdd$1 = (t, e, n) => Point$2.BASE.multiplyAndAddUnsafe(t, e, n);
function schnorrGetExtPubKey$1(t) {
  let e = secp256k1$2.utils.normPrivateKeyToScalar(t), n = Point$2.fromPrivateKey(e);
  return { scalar: n.hasEvenY() ? e : modN$1(-e), bytes: pointToBytes$1(n) };
}
function lift_x$1(t) {
  if (!fe$1(t))
    throw new Error("bad x: need 0 < x < p");
  const e = modP$1(t * t), n = modP$1(e * t + BigInt(7));
  let r = sqrtMod$2(n);
  r % _2n$6 !== _0n$9 && (r = modP$1(-r));
  const s = new Point$2(t, r, _1n$a);
  return s.assertValidity(), s;
}
function challenge$1(...t) {
  return modN$1(bytesToNumberBE$2(taggedHash$1("BIP0340/challenge", ...t)));
}
function schnorrGetPublicKey$1(t) {
  return schnorrGetExtPubKey$1(t).bytes;
}
function schnorrSign$1(t, e, n = randomBytes$2(32)) {
  const r = ensureBytes$3("message", t), { bytes: s, scalar: o } = schnorrGetExtPubKey$1(e), a = ensureBytes$3("auxRand", n, 32), c = numTo32b$1(o ^ bytesToNumberBE$2(taggedHash$1("BIP0340/aux", a))), h = taggedHash$1("BIP0340/nonce", c, s, r), p = modN$1(bytesToNumberBE$2(h));
  if (p === _0n$9)
    throw new Error("sign failed: k is zero");
  const { bytes: g, scalar: y } = schnorrGetExtPubKey$1(p), $ = challenge$1(g, s, r), k = new Uint8Array(64);
  if (k.set(g, 0), k.set(numTo32b$1(modN$1(y + $ * o)), 32), !schnorrVerify$1(k, r, s))
    throw new Error("sign: Invalid signature produced");
  return k;
}
function schnorrVerify$1(t, e, n) {
  const r = ensureBytes$3("signature", t, 64), s = ensureBytes$3("message", e), o = ensureBytes$3("publicKey", n, 32);
  try {
    const a = lift_x$1(bytesToNumberBE$2(o)), c = bytesToNumberBE$2(r.subarray(0, 32));
    if (!fe$1(c))
      return !1;
    const h = bytesToNumberBE$2(r.subarray(32, 64));
    if (!ge$1(h))
      return !1;
    const p = challenge$1(numTo32b$1(c), pointToBytes$1(a), s), g = GmulAdd$1(a, h, modN$1(-p));
    return !(!g || !g.hasEvenY() || g.toAffine().x !== c);
  } catch {
    return !1;
  }
}
const schnorr$1 = {
  getPublicKey: schnorrGetPublicKey$1,
  sign: schnorrSign$1,
  verify: schnorrVerify$1,
  utils: {
    randomPrivateKey: secp256k1$2.utils.randomPrivateKey,
    lift_x: lift_x$1,
    pointToBytes: pointToBytes$1,
    numberToBytesBE: numberToBytesBE$2,
    bytesToNumberBE: bytesToNumberBE$2,
    taggedHash: taggedHash$1,
    mod: mod$2
  }
};
/*! scure-base - MIT License (c) 2022 Paul Miller (paulmillr.com) */
function assertNumber(t) {
  if (!Number.isSafeInteger(t))
    throw new Error(`Wrong integer: ${t}`);
}
function chain$1(...t) {
  const e = (s, o) => (a) => s(o(a)), n = Array.from(t).reverse().reduce((s, o) => s ? e(s, o.encode) : o.encode, void 0), r = t.reduce((s, o) => s ? e(s, o.decode) : o.decode, void 0);
  return { encode: n, decode: r };
}
function alphabet$1(t) {
  return {
    encode: (e) => {
      if (!Array.isArray(e) || e.length && typeof e[0] != "number")
        throw new Error("alphabet.encode input should be an array of numbers");
      return e.map((n) => {
        if (assertNumber(n), n < 0 || n >= t.length)
          throw new Error(`Digit index outside alphabet: ${n} (alphabet: ${t.length})`);
        return t[n];
      });
    },
    decode: (e) => {
      if (!Array.isArray(e) || e.length && typeof e[0] != "string")
        throw new Error("alphabet.decode input should be array of strings");
      return e.map((n) => {
        if (typeof n != "string")
          throw new Error(`alphabet.decode: not string element=${n}`);
        const r = t.indexOf(n);
        if (r === -1)
          throw new Error(`Unknown letter: "${n}". Allowed: ${t}`);
        return r;
      });
    }
  };
}
function join$1(t = "") {
  if (typeof t != "string")
    throw new Error("join separator should be string");
  return {
    encode: (e) => {
      if (!Array.isArray(e) || e.length && typeof e[0] != "string")
        throw new Error("join.encode input should be array of strings");
      for (let n of e)
        if (typeof n != "string")
          throw new Error(`join.encode: non-string input=${n}`);
      return e.join(t);
    },
    decode: (e) => {
      if (typeof e != "string")
        throw new Error("join.decode input should be string");
      return e.split(t);
    }
  };
}
function padding$1(t, e = "=") {
  if (assertNumber(t), typeof e != "string")
    throw new Error("padding chr should be string");
  return {
    encode(n) {
      if (!Array.isArray(n) || n.length && typeof n[0] != "string")
        throw new Error("padding.encode input should be array of strings");
      for (let r of n)
        if (typeof r != "string")
          throw new Error(`padding.encode: non-string input=${r}`);
      for (; n.length * t % 8; )
        n.push(e);
      return n;
    },
    decode(n) {
      if (!Array.isArray(n) || n.length && typeof n[0] != "string")
        throw new Error("padding.encode input should be array of strings");
      for (let s of n)
        if (typeof s != "string")
          throw new Error(`padding.decode: non-string input=${s}`);
      let r = n.length;
      if (r * t % 8)
        throw new Error("Invalid padding: string should have whole number of bytes");
      for (; r > 0 && n[r - 1] === e; r--)
        if (!((r - 1) * t % 8))
          throw new Error("Invalid padding: string has too much padding");
      return n.slice(0, r);
    }
  };
}
function normalize$2(t) {
  if (typeof t != "function")
    throw new Error("normalize fn should be function");
  return { encode: (e) => e, decode: (e) => t(e) };
}
function convertRadix$1(t, e, n) {
  if (e < 2)
    throw new Error(`convertRadix: wrong from=${e}, base cannot be less than 2`);
  if (n < 2)
    throw new Error(`convertRadix: wrong to=${n}, base cannot be less than 2`);
  if (!Array.isArray(t))
    throw new Error("convertRadix: data should be array");
  if (!t.length)
    return [];
  let r = 0;
  const s = [], o = Array.from(t);
  for (o.forEach((a) => {
    if (assertNumber(a), a < 0 || a >= e)
      throw new Error(`Wrong integer: ${a}`);
  }); ; ) {
    let a = 0, c = !0;
    for (let h = r; h < o.length; h++) {
      const p = o[h], g = e * a + p;
      if (!Number.isSafeInteger(g) || e * a / e !== a || g - p !== e * a)
        throw new Error("convertRadix: carry overflow");
      if (a = g % n, o[h] = Math.floor(g / n), !Number.isSafeInteger(o[h]) || o[h] * n + a !== g)
        throw new Error("convertRadix: carry overflow");
      if (c)
        o[h] ? c = !1 : r = h;
      else
        continue;
    }
    if (s.push(a), c)
      break;
  }
  for (let a = 0; a < t.length - 1 && t[a] === 0; a++)
    s.push(0);
  return s.reverse();
}
const gcd$1 = (t, e) => e ? gcd$1(e, t % e) : t, radix2carry$1 = (t, e) => t + (e - gcd$1(t, e));
function convertRadix2$1(t, e, n, r) {
  if (!Array.isArray(t))
    throw new Error("convertRadix2: data should be array");
  if (e <= 0 || e > 32)
    throw new Error(`convertRadix2: wrong from=${e}`);
  if (n <= 0 || n > 32)
    throw new Error(`convertRadix2: wrong to=${n}`);
  if (radix2carry$1(e, n) > 32)
    throw new Error(`convertRadix2: carry overflow from=${e} to=${n} carryBits=${radix2carry$1(e, n)}`);
  let s = 0, o = 0;
  const a = 2 ** n - 1, c = [];
  for (const h of t) {
    if (assertNumber(h), h >= 2 ** e)
      throw new Error(`convertRadix2: invalid data word=${h} from=${e}`);
    if (s = s << e | h, o + e > 32)
      throw new Error(`convertRadix2: carry overflow pos=${o} from=${e}`);
    for (o += e; o >= n; o -= n)
      c.push((s >> o - n & a) >>> 0);
    s &= 2 ** o - 1;
  }
  if (s = s << n - o & a, !r && o >= e)
    throw new Error("Excess padding");
  if (!r && s)
    throw new Error(`Non-zero padding: ${s}`);
  return r && o > 0 && c.push(s >>> 0), c;
}
function radix$1(t) {
  return assertNumber(t), {
    encode: (e) => {
      if (!(e instanceof Uint8Array))
        throw new Error("radix.encode input should be Uint8Array");
      return convertRadix$1(Array.from(e), 2 ** 8, t);
    },
    decode: (e) => {
      if (!Array.isArray(e) || e.length && typeof e[0] != "number")
        throw new Error("radix.decode input should be array of strings");
      return Uint8Array.from(convertRadix$1(e, t, 2 ** 8));
    }
  };
}
function radix2$1(t, e = !1) {
  if (assertNumber(t), t <= 0 || t > 32)
    throw new Error("radix2: bits should be in (0..32]");
  if (radix2carry$1(8, t) > 32 || radix2carry$1(t, 8) > 32)
    throw new Error("radix2: carry overflow");
  return {
    encode: (n) => {
      if (!(n instanceof Uint8Array))
        throw new Error("radix2.encode input should be Uint8Array");
      return convertRadix2$1(Array.from(n), 8, t, !e);
    },
    decode: (n) => {
      if (!Array.isArray(n) || n.length && typeof n[0] != "number")
        throw new Error("radix2.decode input should be array of strings");
      return Uint8Array.from(convertRadix2$1(n, t, 8, e));
    }
  };
}
function unsafeWrapper(t) {
  if (typeof t != "function")
    throw new Error("unsafeWrapper fn should be function");
  return function(...e) {
    try {
      return t.apply(null, e);
    } catch {
    }
  };
}
const base16 = chain$1(radix2$1(4), alphabet$1("0123456789ABCDEF"), join$1("")), base32 = chain$1(radix2$1(5), alphabet$1("ABCDEFGHIJKLMNOPQRSTUVWXYZ234567"), padding$1(5), join$1(""));
chain$1(radix2$1(5), alphabet$1("0123456789ABCDEFGHIJKLMNOPQRSTUV"), padding$1(5), join$1(""));
chain$1(radix2$1(5), alphabet$1("0123456789ABCDEFGHJKMNPQRSTVWXYZ"), join$1(""), normalize$2((t) => t.toUpperCase().replace(/O/g, "0").replace(/[IL]/g, "1")));
const base64 = chain$1(radix2$1(6), alphabet$1("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"), padding$1(6), join$1("")), base64url = chain$1(radix2$1(6), alphabet$1("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"), padding$1(6), join$1("")), genBase58$1 = (t) => chain$1(radix$1(58), alphabet$1(t), join$1("")), base58$1 = genBase58$1("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz");
genBase58$1("123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ");
genBase58$1("rpshnaf39wBUDNEGHJKLM4PQRST7VWXYZ2bcdeCg65jkm8oFqi1tuvAxyz");
const XMR_BLOCK_LEN = [0, 2, 3, 5, 6, 7, 9, 10, 11], base58xmr = {
  encode(t) {
    let e = "";
    for (let n = 0; n < t.length; n += 8) {
      const r = t.subarray(n, n + 8);
      e += base58$1.encode(r).padStart(XMR_BLOCK_LEN[r.length], "1");
    }
    return e;
  },
  decode(t) {
    let e = [];
    for (let n = 0; n < t.length; n += 11) {
      const r = t.slice(n, n + 11), s = XMR_BLOCK_LEN.indexOf(r.length), o = base58$1.decode(r);
      for (let a = 0; a < o.length - s; a++)
        if (o[a] !== 0)
          throw new Error("base58xmr: wrong padding");
      e = e.concat(Array.from(o.slice(o.length - s)));
    }
    return Uint8Array.from(e);
  }
}, BECH_ALPHABET = chain$1(alphabet$1("qpzry9x8gf2tvdw0s3jn54khce6mua7l"), join$1("")), POLYMOD_GENERATORS = [996825010, 642813549, 513874426, 1027748829, 705979059];
function bech32Polymod(t) {
  const e = t >> 25;
  let n = (t & 33554431) << 5;
  for (let r = 0; r < POLYMOD_GENERATORS.length; r++)
    (e >> r & 1) === 1 && (n ^= POLYMOD_GENERATORS[r]);
  return n;
}
function bechChecksum(t, e, n = 1) {
  const r = t.length;
  let s = 1;
  for (let o = 0; o < r; o++) {
    const a = t.charCodeAt(o);
    if (a < 33 || a > 126)
      throw new Error(`Invalid prefix (${t})`);
    s = bech32Polymod(s) ^ a >> 5;
  }
  s = bech32Polymod(s);
  for (let o = 0; o < r; o++)
    s = bech32Polymod(s) ^ t.charCodeAt(o) & 31;
  for (let o of e)
    s = bech32Polymod(s) ^ o;
  for (let o = 0; o < 6; o++)
    s = bech32Polymod(s);
  return s ^= n, BECH_ALPHABET.encode(convertRadix2$1([s % 2 ** 30], 30, 5, !1));
}
function genBech32(t) {
  const e = t === "bech32" ? 1 : 734539939, n = radix2$1(5), r = n.decode, s = n.encode, o = unsafeWrapper(r);
  function a(g, y, $ = 90) {
    if (typeof g != "string")
      throw new Error(`bech32.encode prefix should be string, not ${typeof g}`);
    if (!Array.isArray(y) || y.length && typeof y[0] != "number")
      throw new Error(`bech32.encode words should be array of numbers, not ${typeof y}`);
    const k = g.length + 7 + y.length;
    if ($ !== !1 && k > $)
      throw new TypeError(`Length ${k} exceeds limit ${$}`);
    return g = g.toLowerCase(), `${g}1${BECH_ALPHABET.encode(y)}${bechChecksum(g, y, e)}`;
  }
  function c(g, y = 90) {
    if (typeof g != "string")
      throw new Error(`bech32.decode input should be string, not ${typeof g}`);
    if (g.length < 8 || y !== !1 && g.length > y)
      throw new TypeError(`Wrong string length: ${g.length} (${g}). Expected (8..${y})`);
    const $ = g.toLowerCase();
    if (g !== $ && g !== g.toUpperCase())
      throw new Error("String must be lowercase or uppercase");
    g = $;
    const k = g.lastIndexOf("1");
    if (k === 0 || k === -1)
      throw new Error('Letter "1" must be present between prefix and data only');
    const S = g.slice(0, k), w = g.slice(k + 1);
    if (w.length < 6)
      throw new Error("Data must be at least 6 characters long");
    const x = BECH_ALPHABET.decode(w).slice(0, -6), A = bechChecksum(S, x, e);
    if (!w.endsWith(A))
      throw new Error(`Invalid checksum in ${g}: expected "${A}"`);
    return { prefix: S, words: x };
  }
  const h = unsafeWrapper(c);
  function p(g) {
    const { prefix: y, words: $ } = c(g, !1);
    return { prefix: y, words: $, bytes: r($) };
  }
  return { encode: a, decode: c, decodeToBytes: p, decodeUnsafe: h, fromWords: r, fromWordsUnsafe: o, toWords: s };
}
const bech32 = genBech32("bech32");
genBech32("bech32m");
const utf8 = {
  encode: (t) => new TextDecoder().decode(t),
  decode: (t) => new TextEncoder().encode(t)
}, hex = chain$1(radix2$1(4), alphabet$1("0123456789abcdef"), join$1(""), normalize$2((t) => {
  if (typeof t != "string" || t.length % 2)
    throw new TypeError(`hex.decode: expected string, got ${typeof t} with length ${t.length}`);
  return t.toLowerCase();
})), CODERS = {
  utf8,
  hex,
  base16,
  base32,
  base64,
  base64url,
  base58: base58$1,
  base58xmr
};
`${Object.keys(CODERS).join(", ")}`;
const wordlist = `abandon
ability
able
about
above
absent
absorb
abstract
absurd
abuse
access
accident
account
accuse
achieve
acid
acoustic
acquire
across
act
action
actor
actress
actual
adapt
add
addict
address
adjust
admit
adult
advance
advice
aerobic
affair
afford
afraid
again
age
agent
agree
ahead
aim
air
airport
aisle
alarm
album
alcohol
alert
alien
all
alley
allow
almost
alone
alpha
already
also
alter
always
amateur
amazing
among
amount
amused
analyst
anchor
ancient
anger
angle
angry
animal
ankle
announce
annual
another
answer
antenna
antique
anxiety
any
apart
apology
appear
apple
approve
april
arch
arctic
area
arena
argue
arm
armed
armor
army
around
arrange
arrest
arrive
arrow
art
artefact
artist
artwork
ask
aspect
assault
asset
assist
assume
asthma
athlete
atom
attack
attend
attitude
attract
auction
audit
august
aunt
author
auto
autumn
average
avocado
avoid
awake
aware
away
awesome
awful
awkward
axis
baby
bachelor
bacon
badge
bag
balance
balcony
ball
bamboo
banana
banner
bar
barely
bargain
barrel
base
basic
basket
battle
beach
bean
beauty
because
become
beef
before
begin
behave
behind
believe
below
belt
bench
benefit
best
betray
better
between
beyond
bicycle
bid
bike
bind
biology
bird
birth
bitter
black
blade
blame
blanket
blast
bleak
bless
blind
blood
blossom
blouse
blue
blur
blush
board
boat
body
boil
bomb
bone
bonus
book
boost
border
boring
borrow
boss
bottom
bounce
box
boy
bracket
brain
brand
brass
brave
bread
breeze
brick
bridge
brief
bright
bring
brisk
broccoli
broken
bronze
broom
brother
brown
brush
bubble
buddy
budget
buffalo
build
bulb
bulk
bullet
bundle
bunker
burden
burger
burst
bus
business
busy
butter
buyer
buzz
cabbage
cabin
cable
cactus
cage
cake
call
calm
camera
camp
can
canal
cancel
candy
cannon
canoe
canvas
canyon
capable
capital
captain
car
carbon
card
cargo
carpet
carry
cart
case
cash
casino
castle
casual
cat
catalog
catch
category
cattle
caught
cause
caution
cave
ceiling
celery
cement
census
century
cereal
certain
chair
chalk
champion
change
chaos
chapter
charge
chase
chat
cheap
check
cheese
chef
cherry
chest
chicken
chief
child
chimney
choice
choose
chronic
chuckle
chunk
churn
cigar
cinnamon
circle
citizen
city
civil
claim
clap
clarify
claw
clay
clean
clerk
clever
click
client
cliff
climb
clinic
clip
clock
clog
close
cloth
cloud
clown
club
clump
cluster
clutch
coach
coast
coconut
code
coffee
coil
coin
collect
color
column
combine
come
comfort
comic
common
company
concert
conduct
confirm
congress
connect
consider
control
convince
cook
cool
copper
copy
coral
core
corn
correct
cost
cotton
couch
country
couple
course
cousin
cover
coyote
crack
cradle
craft
cram
crane
crash
crater
crawl
crazy
cream
credit
creek
crew
cricket
crime
crisp
critic
crop
cross
crouch
crowd
crucial
cruel
cruise
crumble
crunch
crush
cry
crystal
cube
culture
cup
cupboard
curious
current
curtain
curve
cushion
custom
cute
cycle
dad
damage
damp
dance
danger
daring
dash
daughter
dawn
day
deal
debate
debris
decade
december
decide
decline
decorate
decrease
deer
defense
define
defy
degree
delay
deliver
demand
demise
denial
dentist
deny
depart
depend
deposit
depth
deputy
derive
describe
desert
design
desk
despair
destroy
detail
detect
develop
device
devote
diagram
dial
diamond
diary
dice
diesel
diet
differ
digital
dignity
dilemma
dinner
dinosaur
direct
dirt
disagree
discover
disease
dish
dismiss
disorder
display
distance
divert
divide
divorce
dizzy
doctor
document
dog
doll
dolphin
domain
donate
donkey
donor
door
dose
double
dove
draft
dragon
drama
drastic
draw
dream
dress
drift
drill
drink
drip
drive
drop
drum
dry
duck
dumb
dune
during
dust
dutch
duty
dwarf
dynamic
eager
eagle
early
earn
earth
easily
east
easy
echo
ecology
economy
edge
edit
educate
effort
egg
eight
either
elbow
elder
electric
elegant
element
elephant
elevator
elite
else
embark
embody
embrace
emerge
emotion
employ
empower
empty
enable
enact
end
endless
endorse
enemy
energy
enforce
engage
engine
enhance
enjoy
enlist
enough
enrich
enroll
ensure
enter
entire
entry
envelope
episode
equal
equip
era
erase
erode
erosion
error
erupt
escape
essay
essence
estate
eternal
ethics
evidence
evil
evoke
evolve
exact
example
excess
exchange
excite
exclude
excuse
execute
exercise
exhaust
exhibit
exile
exist
exit
exotic
expand
expect
expire
explain
expose
express
extend
extra
eye
eyebrow
fabric
face
faculty
fade
faint
faith
fall
false
fame
family
famous
fan
fancy
fantasy
farm
fashion
fat
fatal
father
fatigue
fault
favorite
feature
february
federal
fee
feed
feel
female
fence
festival
fetch
fever
few
fiber
fiction
field
figure
file
film
filter
final
find
fine
finger
finish
fire
firm
first
fiscal
fish
fit
fitness
fix
flag
flame
flash
flat
flavor
flee
flight
flip
float
flock
floor
flower
fluid
flush
fly
foam
focus
fog
foil
fold
follow
food
foot
force
forest
forget
fork
fortune
forum
forward
fossil
foster
found
fox
fragile
frame
frequent
fresh
friend
fringe
frog
front
frost
frown
frozen
fruit
fuel
fun
funny
furnace
fury
future
gadget
gain
galaxy
gallery
game
gap
garage
garbage
garden
garlic
garment
gas
gasp
gate
gather
gauge
gaze
general
genius
genre
gentle
genuine
gesture
ghost
giant
gift
giggle
ginger
giraffe
girl
give
glad
glance
glare
glass
glide
glimpse
globe
gloom
glory
glove
glow
glue
goat
goddess
gold
good
goose
gorilla
gospel
gossip
govern
gown
grab
grace
grain
grant
grape
grass
gravity
great
green
grid
grief
grit
grocery
group
grow
grunt
guard
guess
guide
guilt
guitar
gun
gym
habit
hair
half
hammer
hamster
hand
happy
harbor
hard
harsh
harvest
hat
have
hawk
hazard
head
health
heart
heavy
hedgehog
height
hello
helmet
help
hen
hero
hidden
high
hill
hint
hip
hire
history
hobby
hockey
hold
hole
holiday
hollow
home
honey
hood
hope
horn
horror
horse
hospital
host
hotel
hour
hover
hub
huge
human
humble
humor
hundred
hungry
hunt
hurdle
hurry
hurt
husband
hybrid
ice
icon
idea
identify
idle
ignore
ill
illegal
illness
image
imitate
immense
immune
impact
impose
improve
impulse
inch
include
income
increase
index
indicate
indoor
industry
infant
inflict
inform
inhale
inherit
initial
inject
injury
inmate
inner
innocent
input
inquiry
insane
insect
inside
inspire
install
intact
interest
into
invest
invite
involve
iron
island
isolate
issue
item
ivory
jacket
jaguar
jar
jazz
jealous
jeans
jelly
jewel
job
join
joke
journey
joy
judge
juice
jump
jungle
junior
junk
just
kangaroo
keen
keep
ketchup
key
kick
kid
kidney
kind
kingdom
kiss
kit
kitchen
kite
kitten
kiwi
knee
knife
knock
know
lab
label
labor
ladder
lady
lake
lamp
language
laptop
large
later
latin
laugh
laundry
lava
law
lawn
lawsuit
layer
lazy
leader
leaf
learn
leave
lecture
left
leg
legal
legend
leisure
lemon
lend
length
lens
leopard
lesson
letter
level
liar
liberty
library
license
life
lift
light
like
limb
limit
link
lion
liquid
list
little
live
lizard
load
loan
lobster
local
lock
logic
lonely
long
loop
lottery
loud
lounge
love
loyal
lucky
luggage
lumber
lunar
lunch
luxury
lyrics
machine
mad
magic
magnet
maid
mail
main
major
make
mammal
man
manage
mandate
mango
mansion
manual
maple
marble
march
margin
marine
market
marriage
mask
mass
master
match
material
math
matrix
matter
maximum
maze
meadow
mean
measure
meat
mechanic
medal
media
melody
melt
member
memory
mention
menu
mercy
merge
merit
merry
mesh
message
metal
method
middle
midnight
milk
million
mimic
mind
minimum
minor
minute
miracle
mirror
misery
miss
mistake
mix
mixed
mixture
mobile
model
modify
mom
moment
monitor
monkey
monster
month
moon
moral
more
morning
mosquito
mother
motion
motor
mountain
mouse
move
movie
much
muffin
mule
multiply
muscle
museum
mushroom
music
must
mutual
myself
mystery
myth
naive
name
napkin
narrow
nasty
nation
nature
near
neck
need
negative
neglect
neither
nephew
nerve
nest
net
network
neutral
never
news
next
nice
night
noble
noise
nominee
noodle
normal
north
nose
notable
note
nothing
notice
novel
now
nuclear
number
nurse
nut
oak
obey
object
oblige
obscure
observe
obtain
obvious
occur
ocean
october
odor
off
offer
office
often
oil
okay
old
olive
olympic
omit
once
one
onion
online
only
open
opera
opinion
oppose
option
orange
orbit
orchard
order
ordinary
organ
orient
original
orphan
ostrich
other
outdoor
outer
output
outside
oval
oven
over
own
owner
oxygen
oyster
ozone
pact
paddle
page
pair
palace
palm
panda
panel
panic
panther
paper
parade
parent
park
parrot
party
pass
patch
path
patient
patrol
pattern
pause
pave
payment
peace
peanut
pear
peasant
pelican
pen
penalty
pencil
people
pepper
perfect
permit
person
pet
phone
photo
phrase
physical
piano
picnic
picture
piece
pig
pigeon
pill
pilot
pink
pioneer
pipe
pistol
pitch
pizza
place
planet
plastic
plate
play
please
pledge
pluck
plug
plunge
poem
poet
point
polar
pole
police
pond
pony
pool
popular
portion
position
possible
post
potato
pottery
poverty
powder
power
practice
praise
predict
prefer
prepare
present
pretty
prevent
price
pride
primary
print
priority
prison
private
prize
problem
process
produce
profit
program
project
promote
proof
property
prosper
protect
proud
provide
public
pudding
pull
pulp
pulse
pumpkin
punch
pupil
puppy
purchase
purity
purpose
purse
push
put
puzzle
pyramid
quality
quantum
quarter
question
quick
quit
quiz
quote
rabbit
raccoon
race
rack
radar
radio
rail
rain
raise
rally
ramp
ranch
random
range
rapid
rare
rate
rather
raven
raw
razor
ready
real
reason
rebel
rebuild
recall
receive
recipe
record
recycle
reduce
reflect
reform
refuse
region
regret
regular
reject
relax
release
relief
rely
remain
remember
remind
remove
render
renew
rent
reopen
repair
repeat
replace
report
require
rescue
resemble
resist
resource
response
result
retire
retreat
return
reunion
reveal
review
reward
rhythm
rib
ribbon
rice
rich
ride
ridge
rifle
right
rigid
ring
riot
ripple
risk
ritual
rival
river
road
roast
robot
robust
rocket
romance
roof
rookie
room
rose
rotate
rough
round
route
royal
rubber
rude
rug
rule
run
runway
rural
sad
saddle
sadness
safe
sail
salad
salmon
salon
salt
salute
same
sample
sand
satisfy
satoshi
sauce
sausage
save
say
scale
scan
scare
scatter
scene
scheme
school
science
scissors
scorpion
scout
scrap
screen
script
scrub
sea
search
season
seat
second
secret
section
security
seed
seek
segment
select
sell
seminar
senior
sense
sentence
series
service
session
settle
setup
seven
shadow
shaft
shallow
share
shed
shell
sheriff
shield
shift
shine
ship
shiver
shock
shoe
shoot
shop
short
shoulder
shove
shrimp
shrug
shuffle
shy
sibling
sick
side
siege
sight
sign
silent
silk
silly
silver
similar
simple
since
sing
siren
sister
situate
six
size
skate
sketch
ski
skill
skin
skirt
skull
slab
slam
sleep
slender
slice
slide
slight
slim
slogan
slot
slow
slush
small
smart
smile
smoke
smooth
snack
snake
snap
sniff
snow
soap
soccer
social
sock
soda
soft
solar
soldier
solid
solution
solve
someone
song
soon
sorry
sort
soul
sound
soup
source
south
space
spare
spatial
spawn
speak
special
speed
spell
spend
sphere
spice
spider
spike
spin
spirit
split
spoil
sponsor
spoon
sport
spot
spray
spread
spring
spy
square
squeeze
squirrel
stable
stadium
staff
stage
stairs
stamp
stand
start
state
stay
steak
steel
stem
step
stereo
stick
still
sting
stock
stomach
stone
stool
story
stove
strategy
street
strike
strong
struggle
student
stuff
stumble
style
subject
submit
subway
success
such
sudden
suffer
sugar
suggest
suit
summer
sun
sunny
sunset
super
supply
supreme
sure
surface
surge
surprise
surround
survey
suspect
sustain
swallow
swamp
swap
swarm
swear
sweet
swift
swim
swing
switch
sword
symbol
symptom
syrup
system
table
tackle
tag
tail
talent
talk
tank
tape
target
task
taste
tattoo
taxi
teach
team
tell
ten
tenant
tennis
tent
term
test
text
thank
that
theme
then
theory
there
they
thing
this
thought
three
thrive
throw
thumb
thunder
ticket
tide
tiger
tilt
timber
time
tiny
tip
tired
tissue
title
toast
tobacco
today
toddler
toe
together
toilet
token
tomato
tomorrow
tone
tongue
tonight
tool
tooth
top
topic
topple
torch
tornado
tortoise
toss
total
tourist
toward
tower
town
toy
track
trade
traffic
tragic
train
transfer
trap
trash
travel
tray
treat
tree
trend
trial
tribe
trick
trigger
trim
trip
trophy
trouble
truck
true
truly
trumpet
trust
truth
try
tube
tuition
tumble
tuna
tunnel
turkey
turn
turtle
twelve
twenty
twice
twin
twist
two
type
typical
ugly
umbrella
unable
unaware
uncle
uncover
under
undo
unfair
unfold
unhappy
uniform
unique
unit
universe
unknown
unlock
until
unusual
unveil
update
upgrade
uphold
upon
upper
upset
urban
urge
usage
use
used
useful
useless
usual
utility
vacant
vacuum
vague
valid
valley
valve
van
vanish
vapor
various
vast
vault
vehicle
velvet
vendor
venture
venue
verb
verify
version
very
vessel
veteran
viable
vibrant
vicious
victory
video
view
village
vintage
violin
virtual
virus
visa
visit
visual
vital
vivid
vocal
voice
void
volcano
volume
vote
voyage
wage
wagon
wait
walk
wall
walnut
want
warfare
warm
warrior
wash
wasp
waste
water
wave
way
wealth
weapon
wear
weasel
weather
web
wedding
weekend
weird
welcome
west
wet
whale
what
wheat
wheel
when
where
whip
whisper
wide
width
wife
wild
will
win
window
wine
wing
wink
winner
winter
wire
wisdom
wise
wish
witness
wolf
woman
wonder
wood
wool
word
work
world
worry
worth
wrap
wreck
wrestle
wrist
write
wrong
yard
year
yellow
you
young
youth
zebra
zero
zone
zoo`.split(`
`);
function number$3(t) {
  if (!Number.isSafeInteger(t) || t < 0)
    throw new Error(`Wrong positive integer: ${t}`);
}
function bool$2(t) {
  if (typeof t != "boolean")
    throw new Error(`Expected boolean, not ${t}`);
}
function isBytes$5(t) {
  return t instanceof Uint8Array || t != null && typeof t == "object" && t.constructor.name === "Uint8Array";
}
function bytes$3(t, ...e) {
  if (!isBytes$5(t))
    throw new Error("Expected Uint8Array");
  if (e.length > 0 && !e.includes(t.length))
    throw new Error(`Expected Uint8Array of length ${e}, not of length=${t.length}`);
}
function hash$3(t) {
  if (typeof t != "function" || typeof t.create != "function")
    throw new Error("Hash should be wrapped by utils.wrapConstructor");
  number$3(t.outputLen), number$3(t.blockLen);
}
function exists$3(t, e = !0) {
  if (t.destroyed)
    throw new Error("Hash instance has been destroyed");
  if (e && t.finished)
    throw new Error("Hash#digest() has already been called");
}
function output$3(t, e) {
  bytes$3(t);
  const n = e.outputLen;
  if (t.length < n)
    throw new Error(`digestInto() expects output buffer of length at least ${n}`);
}
const assert$2 = { number: number$3, bool: bool$2, bytes: bytes$3, hash: hash$3, exists: exists$3, output: output$3 }, crypto$2 = typeof globalThis == "object" && "crypto" in globalThis ? globalThis.crypto : void 0;
/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */
function isBytes$4(t) {
  return t instanceof Uint8Array || t != null && typeof t == "object" && t.constructor.name === "Uint8Array";
}
const createView$2 = (t) => new DataView(t.buffer, t.byteOffset, t.byteLength), rotr$2 = (t, e) => t << 32 - e | t >>> e, isLE$3 = new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68;
if (!isLE$3)
  throw new Error("Non little-endian hardware is not supported");
function utf8ToBytes$5(t) {
  if (typeof t != "string")
    throw new Error(`utf8ToBytes expected string, got ${typeof t}`);
  return new Uint8Array(new TextEncoder().encode(t));
}
function toBytes$3(t) {
  if (typeof t == "string" && (t = utf8ToBytes$5(t)), !isBytes$4(t))
    throw new Error(`expected Uint8Array, got ${typeof t}`);
  return t;
}
let Hash$2 = class {
  // Safe version that clones internal state
  clone() {
    return this._cloneInto();
  }
};
const toStr = {}.toString;
function checkOpts$1(t, e) {
  if (e !== void 0 && toStr.call(e) !== "[object Object]")
    throw new Error("Options should be object or undefined");
  return Object.assign(t, e);
}
function wrapConstructor$2(t) {
  const e = (r) => t().update(toBytes$3(r)).digest(), n = t();
  return e.outputLen = n.outputLen, e.blockLen = n.blockLen, e.create = () => t(), e;
}
function randomBytes$1(t = 32) {
  if (crypto$2 && typeof crypto$2.getRandomValues == "function")
    return crypto$2.getRandomValues(new Uint8Array(t));
  throw new Error("crypto.getRandomValues must be defined");
}
let HMAC$3 = class extends Hash$2 {
  constructor(e, n) {
    super(), this.finished = !1, this.destroyed = !1, hash$3(e);
    const r = toBytes$3(n);
    if (this.iHash = e.create(), typeof this.iHash.update != "function")
      throw new Error("Expected instance of class which extends utils.Hash");
    this.blockLen = this.iHash.blockLen, this.outputLen = this.iHash.outputLen;
    const s = this.blockLen, o = new Uint8Array(s);
    o.set(r.length > s ? e.create().update(r).digest() : r);
    for (let a = 0; a < o.length; a++)
      o[a] ^= 54;
    this.iHash.update(o), this.oHash = e.create();
    for (let a = 0; a < o.length; a++)
      o[a] ^= 106;
    this.oHash.update(o), o.fill(0);
  }
  update(e) {
    return exists$3(this), this.iHash.update(e), this;
  }
  digestInto(e) {
    exists$3(this), bytes$3(e, this.outputLen), this.finished = !0, this.iHash.digestInto(e), this.oHash.update(e), this.oHash.digestInto(e), this.destroy();
  }
  digest() {
    const e = new Uint8Array(this.oHash.outputLen);
    return this.digestInto(e), e;
  }
  _cloneInto(e) {
    e || (e = Object.create(Object.getPrototypeOf(this), {}));
    const { oHash: n, iHash: r, finished: s, destroyed: o, blockLen: a, outputLen: c } = this;
    return e = e, e.finished = s, e.destroyed = o, e.blockLen = a, e.outputLen = c, e.oHash = n._cloneInto(e.oHash), e.iHash = r._cloneInto(e.iHash), e;
  }
  destroy() {
    this.destroyed = !0, this.oHash.destroy(), this.iHash.destroy();
  }
};
const hmac$3 = (t, e, n) => new HMAC$3(t, e).update(n).digest();
hmac$3.create = (t, e) => new HMAC$3(t, e);
function pbkdf2Init(t, e, n, r) {
  hash$3(t);
  const s = checkOpts$1({ dkLen: 32, asyncTick: 10 }, r), { c: o, dkLen: a, asyncTick: c } = s;
  if (number$3(o), number$3(a), number$3(c), o < 1)
    throw new Error("PBKDF2: iterations (c) should be >= 1");
  const h = toBytes$3(e), p = toBytes$3(n), g = new Uint8Array(a), y = hmac$3.create(t, h), $ = y._cloneInto().update(p);
  return { c: o, dkLen: a, asyncTick: c, DK: g, PRF: y, PRFSalt: $ };
}
function pbkdf2Output(t, e, n, r, s) {
  return t.destroy(), e.destroy(), r && r.destroy(), s.fill(0), n;
}
function pbkdf2(t, e, n, r) {
  const { c: s, dkLen: o, DK: a, PRF: c, PRFSalt: h } = pbkdf2Init(t, e, n, r);
  let p;
  const g = new Uint8Array(4), y = createView$2(g), $ = new Uint8Array(c.outputLen);
  for (let k = 1, S = 0; S < o; k++, S += c.outputLen) {
    const w = a.subarray(S, S + c.outputLen);
    y.setInt32(0, k, !1), (p = h._cloneInto(p)).update(g).digestInto($), w.set($.subarray(0, w.length));
    for (let x = 1; x < s; x++) {
      c._cloneInto(p).update($).digestInto($);
      for (let A = 0; A < w.length; A++)
        w[A] ^= $[A];
    }
  }
  return pbkdf2Output(c, h, a, p, $);
}
function setBigUint64$3(t, e, n, r) {
  if (typeof t.setBigUint64 == "function")
    return t.setBigUint64(e, n, r);
  const s = BigInt(32), o = BigInt(4294967295), a = Number(n >> s & o), c = Number(n & o), h = r ? 4 : 0, p = r ? 0 : 4;
  t.setUint32(e + h, a, r), t.setUint32(e + p, c, r);
}
let SHA2$2 = class extends Hash$2 {
  constructor(e, n, r, s) {
    super(), this.blockLen = e, this.outputLen = n, this.padOffset = r, this.isLE = s, this.finished = !1, this.length = 0, this.pos = 0, this.destroyed = !1, this.buffer = new Uint8Array(e), this.view = createView$2(this.buffer);
  }
  update(e) {
    exists$3(this);
    const { view: n, buffer: r, blockLen: s } = this;
    e = toBytes$3(e);
    const o = e.length;
    for (let a = 0; a < o; ) {
      const c = Math.min(s - this.pos, o - a);
      if (c === s) {
        const h = createView$2(e);
        for (; s <= o - a; a += s)
          this.process(h, a);
        continue;
      }
      r.set(e.subarray(a, a + c), this.pos), this.pos += c, a += c, this.pos === s && (this.process(n, 0), this.pos = 0);
    }
    return this.length += e.length, this.roundClean(), this;
  }
  digestInto(e) {
    exists$3(this), output$3(e, this), this.finished = !0;
    const { buffer: n, view: r, blockLen: s, isLE: o } = this;
    let { pos: a } = this;
    n[a++] = 128, this.buffer.subarray(a).fill(0), this.padOffset > s - a && (this.process(r, 0), a = 0);
    for (let y = a; y < s; y++)
      n[y] = 0;
    setBigUint64$3(r, s - 8, BigInt(this.length * 8), o), this.process(r, 0);
    const c = createView$2(e), h = this.outputLen;
    if (h % 4)
      throw new Error("_sha2: outputLen should be aligned to 32bit");
    const p = h / 4, g = this.get();
    if (p > g.length)
      throw new Error("_sha2: outputLen bigger than state");
    for (let y = 0; y < p; y++)
      c.setUint32(4 * y, g[y], o);
  }
  digest() {
    const { buffer: e, outputLen: n } = this;
    this.digestInto(e);
    const r = e.slice(0, n);
    return this.destroy(), r;
  }
  _cloneInto(e) {
    e || (e = new this.constructor()), e.set(...this.get());
    const { blockLen: n, buffer: r, length: s, finished: o, destroyed: a, pos: c } = this;
    return e.length = s, e.pos = c, e.finished = o, e.destroyed = a, s % n && e.buffer.set(r), e;
  }
};
const Chi$3 = (t, e, n) => t & e ^ ~t & n, Maj$3 = (t, e, n) => t & e ^ t & n ^ e & n, SHA256_K$3 = /* @__PURE__ */ new Uint32Array([
  1116352408,
  1899447441,
  3049323471,
  3921009573,
  961987163,
  1508970993,
  2453635748,
  2870763221,
  3624381080,
  310598401,
  607225278,
  1426881987,
  1925078388,
  2162078206,
  2614888103,
  3248222580,
  3835390401,
  4022224774,
  264347078,
  604807628,
  770255983,
  1249150122,
  1555081692,
  1996064986,
  2554220882,
  2821834349,
  2952996808,
  3210313671,
  3336571891,
  3584528711,
  113926993,
  338241895,
  666307205,
  773529912,
  1294757372,
  1396182291,
  1695183700,
  1986661051,
  2177026350,
  2456956037,
  2730485921,
  2820302411,
  3259730800,
  3345764771,
  3516065817,
  3600352804,
  4094571909,
  275423344,
  430227734,
  506948616,
  659060556,
  883997877,
  958139571,
  1322822218,
  1537002063,
  1747873779,
  1955562222,
  2024104815,
  2227730452,
  2361852424,
  2428436474,
  2756734187,
  3204031479,
  3329325298
]), IV$2 = /* @__PURE__ */ new Uint32Array([
  1779033703,
  3144134277,
  1013904242,
  2773480762,
  1359893119,
  2600822924,
  528734635,
  1541459225
]), SHA256_W$3 = /* @__PURE__ */ new Uint32Array(64);
let SHA256$3 = class extends SHA2$2 {
  constructor() {
    super(64, 32, 8, !1), this.A = IV$2[0] | 0, this.B = IV$2[1] | 0, this.C = IV$2[2] | 0, this.D = IV$2[3] | 0, this.E = IV$2[4] | 0, this.F = IV$2[5] | 0, this.G = IV$2[6] | 0, this.H = IV$2[7] | 0;
  }
  get() {
    const { A: e, B: n, C: r, D: s, E: o, F: a, G: c, H: h } = this;
    return [e, n, r, s, o, a, c, h];
  }
  // prettier-ignore
  set(e, n, r, s, o, a, c, h) {
    this.A = e | 0, this.B = n | 0, this.C = r | 0, this.D = s | 0, this.E = o | 0, this.F = a | 0, this.G = c | 0, this.H = h | 0;
  }
  process(e, n) {
    for (let y = 0; y < 16; y++, n += 4)
      SHA256_W$3[y] = e.getUint32(n, !1);
    for (let y = 16; y < 64; y++) {
      const $ = SHA256_W$3[y - 15], k = SHA256_W$3[y - 2], S = rotr$2($, 7) ^ rotr$2($, 18) ^ $ >>> 3, w = rotr$2(k, 17) ^ rotr$2(k, 19) ^ k >>> 10;
      SHA256_W$3[y] = w + SHA256_W$3[y - 7] + S + SHA256_W$3[y - 16] | 0;
    }
    let { A: r, B: s, C: o, D: a, E: c, F: h, G: p, H: g } = this;
    for (let y = 0; y < 64; y++) {
      const $ = rotr$2(c, 6) ^ rotr$2(c, 11) ^ rotr$2(c, 25), k = g + $ + Chi$3(c, h, p) + SHA256_K$3[y] + SHA256_W$3[y] | 0, w = (rotr$2(r, 2) ^ rotr$2(r, 13) ^ rotr$2(r, 22)) + Maj$3(r, s, o) | 0;
      g = p, p = h, h = c, c = a + k | 0, a = o, o = s, s = r, r = k + w | 0;
    }
    r = r + this.A | 0, s = s + this.B | 0, o = o + this.C | 0, a = a + this.D | 0, c = c + this.E | 0, h = h + this.F | 0, p = p + this.G | 0, g = g + this.H | 0, this.set(r, s, o, a, c, h, p, g);
  }
  roundClean() {
    SHA256_W$3.fill(0);
  }
  destroy() {
    this.set(0, 0, 0, 0, 0, 0, 0, 0), this.buffer.fill(0);
  }
};
const sha256$3 = /* @__PURE__ */ wrapConstructor$2(() => new SHA256$3()), U32_MASK64$1 = /* @__PURE__ */ BigInt(2 ** 32 - 1), _32n$1 = /* @__PURE__ */ BigInt(32);
function fromBig$1(t, e = !1) {
  return e ? { h: Number(t & U32_MASK64$1), l: Number(t >> _32n$1 & U32_MASK64$1) } : { h: Number(t >> _32n$1 & U32_MASK64$1) | 0, l: Number(t & U32_MASK64$1) | 0 };
}
function split$1(t, e = !1) {
  let n = new Uint32Array(t.length), r = new Uint32Array(t.length);
  for (let s = 0; s < t.length; s++) {
    const { h: o, l: a } = fromBig$1(t[s], e);
    [n[s], r[s]] = [o, a];
  }
  return [n, r];
}
const toBig$1 = (t, e) => BigInt(t >>> 0) << _32n$1 | BigInt(e >>> 0), shrSH$1 = (t, e, n) => t >>> n, shrSL$1 = (t, e, n) => t << 32 - n | e >>> n, rotrSH$1 = (t, e, n) => t >>> n | e << 32 - n, rotrSL$1 = (t, e, n) => t << 32 - n | e >>> n, rotrBH$1 = (t, e, n) => t << 64 - n | e >>> n - 32, rotrBL$1 = (t, e, n) => t >>> n - 32 | e << 64 - n, rotr32H$1 = (t, e) => e, rotr32L$1 = (t, e) => t, rotlSH$1 = (t, e, n) => t << n | e >>> 32 - n, rotlSL$1 = (t, e, n) => e << n | t >>> 32 - n, rotlBH$1 = (t, e, n) => e << n - 32 | t >>> 64 - n, rotlBL$1 = (t, e, n) => t << n - 32 | e >>> 64 - n;
function add$1(t, e, n, r) {
  const s = (e >>> 0) + (r >>> 0);
  return { h: t + n + (s / 2 ** 32 | 0) | 0, l: s | 0 };
}
const add3L$1 = (t, e, n) => (t >>> 0) + (e >>> 0) + (n >>> 0), add3H$1 = (t, e, n, r) => e + n + r + (t / 2 ** 32 | 0) | 0, add4L$1 = (t, e, n, r) => (t >>> 0) + (e >>> 0) + (n >>> 0) + (r >>> 0), add4H$1 = (t, e, n, r, s) => e + n + r + s + (t / 2 ** 32 | 0) | 0, add5L$1 = (t, e, n, r, s) => (t >>> 0) + (e >>> 0) + (n >>> 0) + (r >>> 0) + (s >>> 0), add5H$1 = (t, e, n, r, s, o) => e + n + r + s + o + (t / 2 ** 32 | 0) | 0, u64$1 = {
  fromBig: fromBig$1,
  split: split$1,
  toBig: toBig$1,
  shrSH: shrSH$1,
  shrSL: shrSL$1,
  rotrSH: rotrSH$1,
  rotrSL: rotrSL$1,
  rotrBH: rotrBH$1,
  rotrBL: rotrBL$1,
  rotr32H: rotr32H$1,
  rotr32L: rotr32L$1,
  rotlSH: rotlSH$1,
  rotlSL: rotlSL$1,
  rotlBH: rotlBH$1,
  rotlBL: rotlBL$1,
  add: add$1,
  add3L: add3L$1,
  add3H: add3H$1,
  add4L: add4L$1,
  add4H: add4H$1,
  add5H: add5H$1,
  add5L: add5L$1
}, [SHA512_Kh$1, SHA512_Kl$1] = u64$1.split([
  "0x428a2f98d728ae22",
  "0x7137449123ef65cd",
  "0xb5c0fbcfec4d3b2f",
  "0xe9b5dba58189dbbc",
  "0x3956c25bf348b538",
  "0x59f111f1b605d019",
  "0x923f82a4af194f9b",
  "0xab1c5ed5da6d8118",
  "0xd807aa98a3030242",
  "0x12835b0145706fbe",
  "0x243185be4ee4b28c",
  "0x550c7dc3d5ffb4e2",
  "0x72be5d74f27b896f",
  "0x80deb1fe3b1696b1",
  "0x9bdc06a725c71235",
  "0xc19bf174cf692694",
  "0xe49b69c19ef14ad2",
  "0xefbe4786384f25e3",
  "0x0fc19dc68b8cd5b5",
  "0x240ca1cc77ac9c65",
  "0x2de92c6f592b0275",
  "0x4a7484aa6ea6e483",
  "0x5cb0a9dcbd41fbd4",
  "0x76f988da831153b5",
  "0x983e5152ee66dfab",
  "0xa831c66d2db43210",
  "0xb00327c898fb213f",
  "0xbf597fc7beef0ee4",
  "0xc6e00bf33da88fc2",
  "0xd5a79147930aa725",
  "0x06ca6351e003826f",
  "0x142929670a0e6e70",
  "0x27b70a8546d22ffc",
  "0x2e1b21385c26c926",
  "0x4d2c6dfc5ac42aed",
  "0x53380d139d95b3df",
  "0x650a73548baf63de",
  "0x766a0abb3c77b2a8",
  "0x81c2c92e47edaee6",
  "0x92722c851482353b",
  "0xa2bfe8a14cf10364",
  "0xa81a664bbc423001",
  "0xc24b8b70d0f89791",
  "0xc76c51a30654be30",
  "0xd192e819d6ef5218",
  "0xd69906245565a910",
  "0xf40e35855771202a",
  "0x106aa07032bbd1b8",
  "0x19a4c116b8d2d0c8",
  "0x1e376c085141ab53",
  "0x2748774cdf8eeb99",
  "0x34b0bcb5e19b48a8",
  "0x391c0cb3c5c95a63",
  "0x4ed8aa4ae3418acb",
  "0x5b9cca4f7763e373",
  "0x682e6ff3d6b2b8a3",
  "0x748f82ee5defb2fc",
  "0x78a5636f43172f60",
  "0x84c87814a1f0ab72",
  "0x8cc702081a6439ec",
  "0x90befffa23631e28",
  "0xa4506cebde82bde9",
  "0xbef9a3f7b2c67915",
  "0xc67178f2e372532b",
  "0xca273eceea26619c",
  "0xd186b8c721c0c207",
  "0xeada7dd6cde0eb1e",
  "0xf57d4f7fee6ed178",
  "0x06f067aa72176fba",
  "0x0a637dc5a2c898a6",
  "0x113f9804bef90dae",
  "0x1b710b35131c471b",
  "0x28db77f523047d84",
  "0x32caab7b40c72493",
  "0x3c9ebe0a15c9bebc",
  "0x431d67c49c100d4c",
  "0x4cc5d4becb3e42b6",
  "0x597f299cfc657e2a",
  "0x5fcb6fab3ad6faec",
  "0x6c44198c4a475817"
].map((t) => BigInt(t))), SHA512_W_H$1 = /* @__PURE__ */ new Uint32Array(80), SHA512_W_L$1 = /* @__PURE__ */ new Uint32Array(80);
let SHA512$1 = class extends SHA2$2 {
  constructor() {
    super(128, 64, 16, !1), this.Ah = 1779033703, this.Al = -205731576, this.Bh = -1150833019, this.Bl = -2067093701, this.Ch = 1013904242, this.Cl = -23791573, this.Dh = -1521486534, this.Dl = 1595750129, this.Eh = 1359893119, this.El = -1377402159, this.Fh = -1694144372, this.Fl = 725511199, this.Gh = 528734635, this.Gl = -79577749, this.Hh = 1541459225, this.Hl = 327033209;
  }
  // prettier-ignore
  get() {
    const { Ah: e, Al: n, Bh: r, Bl: s, Ch: o, Cl: a, Dh: c, Dl: h, Eh: p, El: g, Fh: y, Fl: $, Gh: k, Gl: S, Hh: w, Hl: x } = this;
    return [e, n, r, s, o, a, c, h, p, g, y, $, k, S, w, x];
  }
  // prettier-ignore
  set(e, n, r, s, o, a, c, h, p, g, y, $, k, S, w, x) {
    this.Ah = e | 0, this.Al = n | 0, this.Bh = r | 0, this.Bl = s | 0, this.Ch = o | 0, this.Cl = a | 0, this.Dh = c | 0, this.Dl = h | 0, this.Eh = p | 0, this.El = g | 0, this.Fh = y | 0, this.Fl = $ | 0, this.Gh = k | 0, this.Gl = S | 0, this.Hh = w | 0, this.Hl = x | 0;
  }
  process(e, n) {
    for (let C = 0; C < 16; C++, n += 4)
      SHA512_W_H$1[C] = e.getUint32(n), SHA512_W_L$1[C] = e.getUint32(n += 4);
    for (let C = 16; C < 80; C++) {
      const W = SHA512_W_H$1[C - 15] | 0, q = SHA512_W_L$1[C - 15] | 0, I = u64$1.rotrSH(W, q, 1) ^ u64$1.rotrSH(W, q, 8) ^ u64$1.shrSH(W, q, 7), L = u64$1.rotrSL(W, q, 1) ^ u64$1.rotrSL(W, q, 8) ^ u64$1.shrSL(W, q, 7), P = SHA512_W_H$1[C - 2] | 0, ie = SHA512_W_L$1[C - 2] | 0, te = u64$1.rotrSH(P, ie, 19) ^ u64$1.rotrBH(P, ie, 61) ^ u64$1.shrSH(P, ie, 6), T = u64$1.rotrSL(P, ie, 19) ^ u64$1.rotrBL(P, ie, 61) ^ u64$1.shrSL(P, ie, 6), O = u64$1.add4L(L, T, SHA512_W_L$1[C - 7], SHA512_W_L$1[C - 16]), K = u64$1.add4H(O, I, te, SHA512_W_H$1[C - 7], SHA512_W_H$1[C - 16]);
      SHA512_W_H$1[C] = K | 0, SHA512_W_L$1[C] = O | 0;
    }
    let { Ah: r, Al: s, Bh: o, Bl: a, Ch: c, Cl: h, Dh: p, Dl: g, Eh: y, El: $, Fh: k, Fl: S, Gh: w, Gl: x, Hh: A, Hl: N } = this;
    for (let C = 0; C < 80; C++) {
      const W = u64$1.rotrSH(y, $, 14) ^ u64$1.rotrSH(y, $, 18) ^ u64$1.rotrBH(y, $, 41), q = u64$1.rotrSL(y, $, 14) ^ u64$1.rotrSL(y, $, 18) ^ u64$1.rotrBL(y, $, 41), I = y & k ^ ~y & w, L = $ & S ^ ~$ & x, P = u64$1.add5L(N, q, L, SHA512_Kl$1[C], SHA512_W_L$1[C]), ie = u64$1.add5H(P, A, W, I, SHA512_Kh$1[C], SHA512_W_H$1[C]), te = P | 0, T = u64$1.rotrSH(r, s, 28) ^ u64$1.rotrBH(r, s, 34) ^ u64$1.rotrBH(r, s, 39), O = u64$1.rotrSL(r, s, 28) ^ u64$1.rotrBL(r, s, 34) ^ u64$1.rotrBL(r, s, 39), K = r & o ^ r & c ^ o & c, ae = s & a ^ s & h ^ a & h;
      A = w | 0, N = x | 0, w = k | 0, x = S | 0, k = y | 0, S = $ | 0, { h: y, l: $ } = u64$1.add(p | 0, g | 0, ie | 0, te | 0), p = c | 0, g = h | 0, c = o | 0, h = a | 0, o = r | 0, a = s | 0;
      const E = u64$1.add3L(te, O, ae);
      r = u64$1.add3H(E, ie, T, K), s = E | 0;
    }
    ({ h: r, l: s } = u64$1.add(this.Ah | 0, this.Al | 0, r | 0, s | 0)), { h: o, l: a } = u64$1.add(this.Bh | 0, this.Bl | 0, o | 0, a | 0), { h: c, l: h } = u64$1.add(this.Ch | 0, this.Cl | 0, c | 0, h | 0), { h: p, l: g } = u64$1.add(this.Dh | 0, this.Dl | 0, p | 0, g | 0), { h: y, l: $ } = u64$1.add(this.Eh | 0, this.El | 0, y | 0, $ | 0), { h: k, l: S } = u64$1.add(this.Fh | 0, this.Fl | 0, k | 0, S | 0), { h: w, l: x } = u64$1.add(this.Gh | 0, this.Gl | 0, w | 0, x | 0), { h: A, l: N } = u64$1.add(this.Hh | 0, this.Hl | 0, A | 0, N | 0), this.set(r, s, o, a, c, h, p, g, y, $, k, S, w, x, A, N);
  }
  roundClean() {
    SHA512_W_H$1.fill(0), SHA512_W_L$1.fill(0);
  }
  destroy() {
    this.buffer.fill(0), this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  }
};
const sha512$1 = /* @__PURE__ */ wrapConstructor$2(() => new SHA512$1());
/*! scure-base - MIT License (c) 2022 Paul Miller (paulmillr.com) */
function isBytes$3(t) {
  return t instanceof Uint8Array || t != null && typeof t == "object" && t.constructor.name === "Uint8Array";
}
// @__NO_SIDE_EFFECTS__
function chain(...t) {
  const e = (o) => o, n = (o, a) => (c) => o(a(c)), r = t.map((o) => o.encode).reduceRight(n, e), s = t.map((o) => o.decode).reduce(n, e);
  return { encode: r, decode: s };
}
// @__NO_SIDE_EFFECTS__
function alphabet(t) {
  return {
    encode: (e) => {
      if (!Array.isArray(e) || e.length && typeof e[0] != "number")
        throw new Error("alphabet.encode input should be an array of numbers");
      return e.map((n) => {
        if (n < 0 || n >= t.length)
          throw new Error(`Digit index outside alphabet: ${n} (alphabet: ${t.length})`);
        return t[n];
      });
    },
    decode: (e) => {
      if (!Array.isArray(e) || e.length && typeof e[0] != "string")
        throw new Error("alphabet.decode input should be array of strings");
      return e.map((n) => {
        if (typeof n != "string")
          throw new Error(`alphabet.decode: not string element=${n}`);
        const r = t.indexOf(n);
        if (r === -1)
          throw new Error(`Unknown letter: "${n}". Allowed: ${t}`);
        return r;
      });
    }
  };
}
// @__NO_SIDE_EFFECTS__
function join(t = "") {
  if (typeof t != "string")
    throw new Error("join separator should be string");
  return {
    encode: (e) => {
      if (!Array.isArray(e) || e.length && typeof e[0] != "string")
        throw new Error("join.encode input should be array of strings");
      for (let n of e)
        if (typeof n != "string")
          throw new Error(`join.encode: non-string input=${n}`);
      return e.join(t);
    },
    decode: (e) => {
      if (typeof e != "string")
        throw new Error("join.decode input should be string");
      return e.split(t);
    }
  };
}
// @__NO_SIDE_EFFECTS__
function padding(t, e = "=") {
  if (typeof e != "string")
    throw new Error("padding chr should be string");
  return {
    encode(n) {
      if (!Array.isArray(n) || n.length && typeof n[0] != "string")
        throw new Error("padding.encode input should be array of strings");
      for (let r of n)
        if (typeof r != "string")
          throw new Error(`padding.encode: non-string input=${r}`);
      for (; n.length * t % 8; )
        n.push(e);
      return n;
    },
    decode(n) {
      if (!Array.isArray(n) || n.length && typeof n[0] != "string")
        throw new Error("padding.encode input should be array of strings");
      for (let s of n)
        if (typeof s != "string")
          throw new Error(`padding.decode: non-string input=${s}`);
      let r = n.length;
      if (r * t % 8)
        throw new Error("Invalid padding: string should have whole number of bytes");
      for (; r > 0 && n[r - 1] === e; r--)
        if (!((r - 1) * t % 8))
          throw new Error("Invalid padding: string has too much padding");
      return n.slice(0, r);
    }
  };
}
// @__NO_SIDE_EFFECTS__
function convertRadix(t, e, n) {
  if (e < 2)
    throw new Error(`convertRadix: wrong from=${e}, base cannot be less than 2`);
  if (n < 2)
    throw new Error(`convertRadix: wrong to=${n}, base cannot be less than 2`);
  if (!Array.isArray(t))
    throw new Error("convertRadix: data should be array");
  if (!t.length)
    return [];
  let r = 0;
  const s = [], o = Array.from(t);
  for (o.forEach((a) => {
    if (a < 0 || a >= e)
      throw new Error(`Wrong integer: ${a}`);
  }); ; ) {
    let a = 0, c = !0;
    for (let h = r; h < o.length; h++) {
      const p = o[h], g = e * a + p;
      if (!Number.isSafeInteger(g) || e * a / e !== a || g - p !== e * a)
        throw new Error("convertRadix: carry overflow");
      a = g % n;
      const y = Math.floor(g / n);
      if (o[h] = y, !Number.isSafeInteger(y) || y * n + a !== g)
        throw new Error("convertRadix: carry overflow");
      if (c)
        y ? c = !1 : r = h;
      else
        continue;
    }
    if (s.push(a), c)
      break;
  }
  for (let a = 0; a < t.length - 1 && t[a] === 0; a++)
    s.push(0);
  return s.reverse();
}
const gcd = /* @__NO_SIDE_EFFECTS__ */ (t, e) => e ? /* @__PURE__ */ gcd(e, t % e) : t, radix2carry = /* @__NO_SIDE_EFFECTS__ */ (t, e) => t + (e - /* @__PURE__ */ gcd(t, e));
// @__NO_SIDE_EFFECTS__
function convertRadix2(t, e, n, r) {
  if (!Array.isArray(t))
    throw new Error("convertRadix2: data should be array");
  if (e <= 0 || e > 32)
    throw new Error(`convertRadix2: wrong from=${e}`);
  if (n <= 0 || n > 32)
    throw new Error(`convertRadix2: wrong to=${n}`);
  if (/* @__PURE__ */ radix2carry(e, n) > 32)
    throw new Error(`convertRadix2: carry overflow from=${e} to=${n} carryBits=${/* @__PURE__ */ radix2carry(e, n)}`);
  let s = 0, o = 0;
  const a = 2 ** n - 1, c = [];
  for (const h of t) {
    if (h >= 2 ** e)
      throw new Error(`convertRadix2: invalid data word=${h} from=${e}`);
    if (s = s << e | h, o + e > 32)
      throw new Error(`convertRadix2: carry overflow pos=${o} from=${e}`);
    for (o += e; o >= n; o -= n)
      c.push((s >> o - n & a) >>> 0);
    s &= 2 ** o - 1;
  }
  if (s = s << n - o & a, !r && o >= e)
    throw new Error("Excess padding");
  if (!r && s)
    throw new Error(`Non-zero padding: ${s}`);
  return r && o > 0 && c.push(s >>> 0), c;
}
// @__NO_SIDE_EFFECTS__
function radix(t) {
  return {
    encode: (e) => {
      if (!isBytes$3(e))
        throw new Error("radix.encode input should be Uint8Array");
      return /* @__PURE__ */ convertRadix(Array.from(e), 2 ** 8, t);
    },
    decode: (e) => {
      if (!Array.isArray(e) || e.length && typeof e[0] != "number")
        throw new Error("radix.decode input should be array of numbers");
      return Uint8Array.from(/* @__PURE__ */ convertRadix(e, t, 2 ** 8));
    }
  };
}
// @__NO_SIDE_EFFECTS__
function radix2(t, e = !1) {
  if (t <= 0 || t > 32)
    throw new Error("radix2: bits should be in (0..32]");
  if (/* @__PURE__ */ radix2carry(8, t) > 32 || /* @__PURE__ */ radix2carry(t, 8) > 32)
    throw new Error("radix2: carry overflow");
  return {
    encode: (n) => {
      if (!isBytes$3(n))
        throw new Error("radix2.encode input should be Uint8Array");
      return /* @__PURE__ */ convertRadix2(Array.from(n), 8, t, !e);
    },
    decode: (n) => {
      if (!Array.isArray(n) || n.length && typeof n[0] != "number")
        throw new Error("radix2.decode input should be array of numbers");
      return Uint8Array.from(/* @__PURE__ */ convertRadix2(n, t, 8, e));
    }
  };
}
// @__NO_SIDE_EFFECTS__
function checksum(t, e) {
  if (typeof e != "function")
    throw new Error("checksum fn should be function");
  return {
    encode(n) {
      if (!isBytes$3(n))
        throw new Error("checksum.encode: input should be Uint8Array");
      const r = e(n).slice(0, t), s = new Uint8Array(n.length + t);
      return s.set(n), s.set(r, n.length), s;
    },
    decode(n) {
      if (!isBytes$3(n))
        throw new Error("checksum.decode: input should be Uint8Array");
      const r = n.slice(0, -t), s = e(r).slice(0, t), o = n.slice(-t);
      for (let a = 0; a < t; a++)
        if (s[a] !== o[a])
          throw new Error("Invalid checksum");
      return r;
    }
  };
}
const utils$2 = {
  alphabet,
  chain,
  checksum,
  convertRadix,
  convertRadix2,
  radix,
  radix2,
  join,
  padding
}, genBase58 = (t) => /* @__PURE__ */ chain(/* @__PURE__ */ radix(58), /* @__PURE__ */ alphabet(t), /* @__PURE__ */ join("")), base58 = /* @__PURE__ */ genBase58("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"), createBase58check = (t) => /* @__PURE__ */ chain(/* @__PURE__ */ checksum(4, (e) => t(t(e))), base58), base58check$1 = createBase58check, isJapanese = (t) => t[0] === "あいこくしん";
function nfkd(t) {
  if (typeof t != "string")
    throw new TypeError(`Invalid mnemonic type: ${typeof t}`);
  return t.normalize("NFKD");
}
function normalize$1(t) {
  const e = nfkd(t), n = e.split(" ");
  if (![12, 15, 18, 21, 24].includes(n.length))
    throw new Error("Invalid mnemonic");
  return { nfkd: e, words: n };
}
function assertEntropy(t) {
  assert$2.bytes(t, 16, 20, 24, 28, 32);
}
function generateMnemonic(t, e = 128) {
  if (assert$2.number(e), e % 32 !== 0 || e > 256)
    throw new TypeError("Invalid entropy");
  return entropyToMnemonic(randomBytes$1(e / 8), t);
}
const calcChecksum = (t) => {
  const e = 8 - t.length / 4;
  return new Uint8Array([sha256$3(t)[0] >> e << e]);
};
function getCoder(t) {
  if (!Array.isArray(t) || t.length !== 2048 || typeof t[0] != "string")
    throw new Error("Worlist: expected array of 2048 strings");
  return t.forEach((e) => {
    if (typeof e != "string")
      throw new Error(`Wordlist: non-string element: ${e}`);
  }), utils$2.chain(utils$2.checksum(1, calcChecksum), utils$2.radix2(11, !0), utils$2.alphabet(t));
}
function mnemonicToEntropy(t, e) {
  const { words: n } = normalize$1(t), r = getCoder(e).decode(n);
  return assertEntropy(r), r;
}
function entropyToMnemonic(t, e) {
  return assertEntropy(t), getCoder(e).encode(t).join(isJapanese(e) ? "　" : " ");
}
function validateMnemonic(t, e) {
  try {
    mnemonicToEntropy(t, e);
  } catch {
    return !1;
  }
  return !0;
}
const salt = (t) => nfkd(`mnemonic${t}`);
function mnemonicToSeedSync(t, e = "") {
  return pbkdf2(sha512$1, normalize$1(t).nfkd, salt(e), { c: 2048, dkLen: 64 });
}
function number$2(t) {
  if (!Number.isSafeInteger(t) || t < 0)
    throw new Error(`Wrong positive integer: ${t}`);
}
function isBytes$2(t) {
  return t instanceof Uint8Array || t != null && typeof t == "object" && t.constructor.name === "Uint8Array";
}
function bytes$2(t, ...e) {
  if (!isBytes$2(t))
    throw new Error("Expected Uint8Array");
  if (e.length > 0 && !e.includes(t.length))
    throw new Error(`Expected Uint8Array of length ${e}, not of length=${t.length}`);
}
function hash$2(t) {
  if (typeof t != "function" || typeof t.create != "function")
    throw new Error("Hash should be wrapped by utils.wrapConstructor");
  number$2(t.outputLen), number$2(t.blockLen);
}
function exists$2(t, e = !0) {
  if (t.destroyed)
    throw new Error("Hash instance has been destroyed");
  if (e && t.finished)
    throw new Error("Hash#digest() has already been called");
}
function output$2(t, e) {
  bytes$2(t);
  const n = e.outputLen;
  if (t.length < n)
    throw new Error(`digestInto() expects output buffer of length at least ${n}`);
}
/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */
function isBytes$1(t) {
  return t instanceof Uint8Array || t != null && typeof t == "object" && t.constructor.name === "Uint8Array";
}
const createView$1 = (t) => new DataView(t.buffer, t.byteOffset, t.byteLength), rotr$1 = (t, e) => t << 32 - e | t >>> e, isLE$2 = new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68;
if (!isLE$2)
  throw new Error("Non little-endian hardware is not supported");
const hexes$2 = /* @__PURE__ */ Array.from({ length: 256 }, (t, e) => e.toString(16).padStart(2, "0"));
function bytesToHex$2(t) {
  if (!isBytes$1(t))
    throw new Error("Uint8Array expected");
  let e = "";
  for (let n = 0; n < t.length; n++)
    e += hexes$2[t[n]];
  return e;
}
const asciis$1 = { _0: 48, _9: 57, _A: 65, _F: 70, _a: 97, _f: 102 };
function asciiToBase16$1(t) {
  if (t >= asciis$1._0 && t <= asciis$1._9)
    return t - asciis$1._0;
  if (t >= asciis$1._A && t <= asciis$1._F)
    return t - (asciis$1._A - 10);
  if (t >= asciis$1._a && t <= asciis$1._f)
    return t - (asciis$1._a - 10);
}
function hexToBytes$2(t) {
  if (typeof t != "string")
    throw new Error("hex string expected, got " + typeof t);
  const e = t.length, n = e / 2;
  if (e % 2)
    throw new Error("padded hex string expected, got unpadded hex of length " + e);
  const r = new Uint8Array(n);
  for (let s = 0, o = 0; s < n; s++, o += 2) {
    const a = asciiToBase16$1(t.charCodeAt(o)), c = asciiToBase16$1(t.charCodeAt(o + 1));
    if (a === void 0 || c === void 0) {
      const h = t[o] + t[o + 1];
      throw new Error('hex string expected, got non-hex character "' + h + '" at index ' + o);
    }
    r[s] = a * 16 + c;
  }
  return r;
}
function utf8ToBytes$4(t) {
  if (typeof t != "string")
    throw new Error(`utf8ToBytes expected string, got ${typeof t}`);
  return new Uint8Array(new TextEncoder().encode(t));
}
function toBytes$2(t) {
  if (typeof t == "string" && (t = utf8ToBytes$4(t)), !isBytes$1(t))
    throw new Error(`expected Uint8Array, got ${typeof t}`);
  return t;
}
function concatBytes$3(...t) {
  let e = 0;
  for (let r = 0; r < t.length; r++) {
    const s = t[r];
    if (!isBytes$1(s))
      throw new Error("Uint8Array expected");
    e += s.length;
  }
  const n = new Uint8Array(e);
  for (let r = 0, s = 0; r < t.length; r++) {
    const o = t[r];
    n.set(o, s), s += o.length;
  }
  return n;
}
let Hash$1 = class {
  // Safe version that clones internal state
  clone() {
    return this._cloneInto();
  }
};
function wrapConstructor$1(t) {
  const e = (r) => t().update(toBytes$2(r)).digest(), n = t();
  return e.outputLen = n.outputLen, e.blockLen = n.blockLen, e.create = () => t(), e;
}
let HMAC$2 = class extends Hash$1 {
  constructor(e, n) {
    super(), this.finished = !1, this.destroyed = !1, hash$2(e);
    const r = toBytes$2(n);
    if (this.iHash = e.create(), typeof this.iHash.update != "function")
      throw new Error("Expected instance of class which extends utils.Hash");
    this.blockLen = this.iHash.blockLen, this.outputLen = this.iHash.outputLen;
    const s = this.blockLen, o = new Uint8Array(s);
    o.set(r.length > s ? e.create().update(r).digest() : r);
    for (let a = 0; a < o.length; a++)
      o[a] ^= 54;
    this.iHash.update(o), this.oHash = e.create();
    for (let a = 0; a < o.length; a++)
      o[a] ^= 106;
    this.oHash.update(o), o.fill(0);
  }
  update(e) {
    return exists$2(this), this.iHash.update(e), this;
  }
  digestInto(e) {
    exists$2(this), bytes$2(e, this.outputLen), this.finished = !0, this.iHash.digestInto(e), this.oHash.update(e), this.oHash.digestInto(e), this.destroy();
  }
  digest() {
    const e = new Uint8Array(this.oHash.outputLen);
    return this.digestInto(e), e;
  }
  _cloneInto(e) {
    e || (e = Object.create(Object.getPrototypeOf(this), {}));
    const { oHash: n, iHash: r, finished: s, destroyed: o, blockLen: a, outputLen: c } = this;
    return e = e, e.finished = s, e.destroyed = o, e.blockLen = a, e.outputLen = c, e.oHash = n._cloneInto(e.oHash), e.iHash = r._cloneInto(e.iHash), e;
  }
  destroy() {
    this.destroyed = !0, this.oHash.destroy(), this.iHash.destroy();
  }
};
const hmac$2 = (t, e, n) => new HMAC$2(t, e).update(n).digest();
hmac$2.create = (t, e) => new HMAC$2(t, e);
function setBigUint64$2(t, e, n, r) {
  if (typeof t.setBigUint64 == "function")
    return t.setBigUint64(e, n, r);
  const s = BigInt(32), o = BigInt(4294967295), a = Number(n >> s & o), c = Number(n & o), h = r ? 4 : 0, p = r ? 0 : 4;
  t.setUint32(e + h, a, r), t.setUint32(e + p, c, r);
}
let SHA2$1 = class extends Hash$1 {
  constructor(e, n, r, s) {
    super(), this.blockLen = e, this.outputLen = n, this.padOffset = r, this.isLE = s, this.finished = !1, this.length = 0, this.pos = 0, this.destroyed = !1, this.buffer = new Uint8Array(e), this.view = createView$1(this.buffer);
  }
  update(e) {
    exists$2(this);
    const { view: n, buffer: r, blockLen: s } = this;
    e = toBytes$2(e);
    const o = e.length;
    for (let a = 0; a < o; ) {
      const c = Math.min(s - this.pos, o - a);
      if (c === s) {
        const h = createView$1(e);
        for (; s <= o - a; a += s)
          this.process(h, a);
        continue;
      }
      r.set(e.subarray(a, a + c), this.pos), this.pos += c, a += c, this.pos === s && (this.process(n, 0), this.pos = 0);
    }
    return this.length += e.length, this.roundClean(), this;
  }
  digestInto(e) {
    exists$2(this), output$2(e, this), this.finished = !0;
    const { buffer: n, view: r, blockLen: s, isLE: o } = this;
    let { pos: a } = this;
    n[a++] = 128, this.buffer.subarray(a).fill(0), this.padOffset > s - a && (this.process(r, 0), a = 0);
    for (let y = a; y < s; y++)
      n[y] = 0;
    setBigUint64$2(r, s - 8, BigInt(this.length * 8), o), this.process(r, 0);
    const c = createView$1(e), h = this.outputLen;
    if (h % 4)
      throw new Error("_sha2: outputLen should be aligned to 32bit");
    const p = h / 4, g = this.get();
    if (p > g.length)
      throw new Error("_sha2: outputLen bigger than state");
    for (let y = 0; y < p; y++)
      c.setUint32(4 * y, g[y], o);
  }
  digest() {
    const { buffer: e, outputLen: n } = this;
    this.digestInto(e);
    const r = e.slice(0, n);
    return this.destroy(), r;
  }
  _cloneInto(e) {
    e || (e = new this.constructor()), e.set(...this.get());
    const { blockLen: n, buffer: r, length: s, finished: o, destroyed: a, pos: c } = this;
    return e.length = s, e.pos = c, e.finished = o, e.destroyed = a, s % n && e.buffer.set(r), e;
  }
};
const Rho = /* @__PURE__ */ new Uint8Array([7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8]), Id = /* @__PURE__ */ Uint8Array.from({ length: 16 }, (t, e) => e), Pi = /* @__PURE__ */ Id.map((t) => (9 * t + 5) % 16);
let idxL = [Id], idxR = [Pi];
for (let t = 0; t < 4; t++)
  for (let e of [idxL, idxR])
    e.push(e[t].map((n) => Rho[n]));
const shifts = /* @__PURE__ */ [
  [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8],
  [12, 13, 11, 15, 6, 9, 9, 7, 12, 15, 11, 13, 7, 8, 7, 7],
  [13, 15, 14, 11, 7, 7, 6, 8, 13, 14, 13, 12, 5, 5, 6, 9],
  [14, 11, 12, 14, 8, 6, 5, 5, 15, 12, 15, 14, 9, 9, 8, 6],
  [15, 12, 13, 13, 9, 5, 8, 6, 14, 11, 12, 11, 8, 6, 5, 5]
].map((t) => new Uint8Array(t)), shiftsL = /* @__PURE__ */ idxL.map((t, e) => t.map((n) => shifts[e][n])), shiftsR = /* @__PURE__ */ idxR.map((t, e) => t.map((n) => shifts[e][n])), Kl = /* @__PURE__ */ new Uint32Array([
  0,
  1518500249,
  1859775393,
  2400959708,
  2840853838
]), Kr = /* @__PURE__ */ new Uint32Array([
  1352829926,
  1548603684,
  1836072691,
  2053994217,
  0
]), rotl$1 = (t, e) => t << e | t >>> 32 - e;
function f(t, e, n, r) {
  return t === 0 ? e ^ n ^ r : t === 1 ? e & n | ~e & r : t === 2 ? (e | ~n) ^ r : t === 3 ? e & r | n & ~r : e ^ (n | ~r);
}
const BUF = /* @__PURE__ */ new Uint32Array(16);
class RIPEMD160 extends SHA2$1 {
  constructor() {
    super(64, 20, 8, !0), this.h0 = 1732584193, this.h1 = -271733879, this.h2 = -1732584194, this.h3 = 271733878, this.h4 = -1009589776;
  }
  get() {
    const { h0: e, h1: n, h2: r, h3: s, h4: o } = this;
    return [e, n, r, s, o];
  }
  set(e, n, r, s, o) {
    this.h0 = e | 0, this.h1 = n | 0, this.h2 = r | 0, this.h3 = s | 0, this.h4 = o | 0;
  }
  process(e, n) {
    for (let k = 0; k < 16; k++, n += 4)
      BUF[k] = e.getUint32(n, !0);
    let r = this.h0 | 0, s = r, o = this.h1 | 0, a = o, c = this.h2 | 0, h = c, p = this.h3 | 0, g = p, y = this.h4 | 0, $ = y;
    for (let k = 0; k < 5; k++) {
      const S = 4 - k, w = Kl[k], x = Kr[k], A = idxL[k], N = idxR[k], C = shiftsL[k], W = shiftsR[k];
      for (let q = 0; q < 16; q++) {
        const I = rotl$1(r + f(k, o, c, p) + BUF[A[q]] + w, C[q]) + y | 0;
        r = y, y = p, p = rotl$1(c, 10) | 0, c = o, o = I;
      }
      for (let q = 0; q < 16; q++) {
        const I = rotl$1(s + f(S, a, h, g) + BUF[N[q]] + x, W[q]) + $ | 0;
        s = $, $ = g, g = rotl$1(h, 10) | 0, h = a, a = I;
      }
    }
    this.set(this.h1 + c + g | 0, this.h2 + p + $ | 0, this.h3 + y + s | 0, this.h4 + r + a | 0, this.h0 + o + h | 0);
  }
  roundClean() {
    BUF.fill(0);
  }
  destroy() {
    this.destroyed = !0, this.buffer.fill(0), this.set(0, 0, 0, 0, 0);
  }
}
const ripemd160 = /* @__PURE__ */ wrapConstructor$1(() => new RIPEMD160()), Chi$2 = (t, e, n) => t & e ^ ~t & n, Maj$2 = (t, e, n) => t & e ^ t & n ^ e & n, SHA256_K$2 = /* @__PURE__ */ new Uint32Array([
  1116352408,
  1899447441,
  3049323471,
  3921009573,
  961987163,
  1508970993,
  2453635748,
  2870763221,
  3624381080,
  310598401,
  607225278,
  1426881987,
  1925078388,
  2162078206,
  2614888103,
  3248222580,
  3835390401,
  4022224774,
  264347078,
  604807628,
  770255983,
  1249150122,
  1555081692,
  1996064986,
  2554220882,
  2821834349,
  2952996808,
  3210313671,
  3336571891,
  3584528711,
  113926993,
  338241895,
  666307205,
  773529912,
  1294757372,
  1396182291,
  1695183700,
  1986661051,
  2177026350,
  2456956037,
  2730485921,
  2820302411,
  3259730800,
  3345764771,
  3516065817,
  3600352804,
  4094571909,
  275423344,
  430227734,
  506948616,
  659060556,
  883997877,
  958139571,
  1322822218,
  1537002063,
  1747873779,
  1955562222,
  2024104815,
  2227730452,
  2361852424,
  2428436474,
  2756734187,
  3204031479,
  3329325298
]), IV$1 = /* @__PURE__ */ new Uint32Array([
  1779033703,
  3144134277,
  1013904242,
  2773480762,
  1359893119,
  2600822924,
  528734635,
  1541459225
]), SHA256_W$2 = /* @__PURE__ */ new Uint32Array(64);
let SHA256$2 = class extends SHA2$1 {
  constructor() {
    super(64, 32, 8, !1), this.A = IV$1[0] | 0, this.B = IV$1[1] | 0, this.C = IV$1[2] | 0, this.D = IV$1[3] | 0, this.E = IV$1[4] | 0, this.F = IV$1[5] | 0, this.G = IV$1[6] | 0, this.H = IV$1[7] | 0;
  }
  get() {
    const { A: e, B: n, C: r, D: s, E: o, F: a, G: c, H: h } = this;
    return [e, n, r, s, o, a, c, h];
  }
  // prettier-ignore
  set(e, n, r, s, o, a, c, h) {
    this.A = e | 0, this.B = n | 0, this.C = r | 0, this.D = s | 0, this.E = o | 0, this.F = a | 0, this.G = c | 0, this.H = h | 0;
  }
  process(e, n) {
    for (let y = 0; y < 16; y++, n += 4)
      SHA256_W$2[y] = e.getUint32(n, !1);
    for (let y = 16; y < 64; y++) {
      const $ = SHA256_W$2[y - 15], k = SHA256_W$2[y - 2], S = rotr$1($, 7) ^ rotr$1($, 18) ^ $ >>> 3, w = rotr$1(k, 17) ^ rotr$1(k, 19) ^ k >>> 10;
      SHA256_W$2[y] = w + SHA256_W$2[y - 7] + S + SHA256_W$2[y - 16] | 0;
    }
    let { A: r, B: s, C: o, D: a, E: c, F: h, G: p, H: g } = this;
    for (let y = 0; y < 64; y++) {
      const $ = rotr$1(c, 6) ^ rotr$1(c, 11) ^ rotr$1(c, 25), k = g + $ + Chi$2(c, h, p) + SHA256_K$2[y] + SHA256_W$2[y] | 0, w = (rotr$1(r, 2) ^ rotr$1(r, 13) ^ rotr$1(r, 22)) + Maj$2(r, s, o) | 0;
      g = p, p = h, h = c, c = a + k | 0, a = o, o = s, s = r, r = k + w | 0;
    }
    r = r + this.A | 0, s = s + this.B | 0, o = o + this.C | 0, a = a + this.D | 0, c = c + this.E | 0, h = h + this.F | 0, p = p + this.G | 0, g = g + this.H | 0, this.set(r, s, o, a, c, h, p, g);
  }
  roundClean() {
    SHA256_W$2.fill(0);
  }
  destroy() {
    this.set(0, 0, 0, 0, 0, 0, 0, 0), this.buffer.fill(0);
  }
};
const sha256$2 = /* @__PURE__ */ wrapConstructor$1(() => new SHA256$2()), U32_MASK64 = /* @__PURE__ */ BigInt(2 ** 32 - 1), _32n = /* @__PURE__ */ BigInt(32);
function fromBig(t, e = !1) {
  return e ? { h: Number(t & U32_MASK64), l: Number(t >> _32n & U32_MASK64) } : { h: Number(t >> _32n & U32_MASK64) | 0, l: Number(t & U32_MASK64) | 0 };
}
function split(t, e = !1) {
  let n = new Uint32Array(t.length), r = new Uint32Array(t.length);
  for (let s = 0; s < t.length; s++) {
    const { h: o, l: a } = fromBig(t[s], e);
    [n[s], r[s]] = [o, a];
  }
  return [n, r];
}
const toBig = (t, e) => BigInt(t >>> 0) << _32n | BigInt(e >>> 0), shrSH = (t, e, n) => t >>> n, shrSL = (t, e, n) => t << 32 - n | e >>> n, rotrSH = (t, e, n) => t >>> n | e << 32 - n, rotrSL = (t, e, n) => t << 32 - n | e >>> n, rotrBH = (t, e, n) => t << 64 - n | e >>> n - 32, rotrBL = (t, e, n) => t >>> n - 32 | e << 64 - n, rotr32H = (t, e) => e, rotr32L = (t, e) => t, rotlSH = (t, e, n) => t << n | e >>> 32 - n, rotlSL = (t, e, n) => e << n | t >>> 32 - n, rotlBH = (t, e, n) => e << n - 32 | t >>> 64 - n, rotlBL = (t, e, n) => t << n - 32 | e >>> 64 - n;
function add(t, e, n, r) {
  const s = (e >>> 0) + (r >>> 0);
  return { h: t + n + (s / 2 ** 32 | 0) | 0, l: s | 0 };
}
const add3L = (t, e, n) => (t >>> 0) + (e >>> 0) + (n >>> 0), add3H = (t, e, n, r) => e + n + r + (t / 2 ** 32 | 0) | 0, add4L = (t, e, n, r) => (t >>> 0) + (e >>> 0) + (n >>> 0) + (r >>> 0), add4H = (t, e, n, r, s) => e + n + r + s + (t / 2 ** 32 | 0) | 0, add5L = (t, e, n, r, s) => (t >>> 0) + (e >>> 0) + (n >>> 0) + (r >>> 0) + (s >>> 0), add5H = (t, e, n, r, s, o) => e + n + r + s + o + (t / 2 ** 32 | 0) | 0, u64 = {
  fromBig,
  split,
  toBig,
  shrSH,
  shrSL,
  rotrSH,
  rotrSL,
  rotrBH,
  rotrBL,
  rotr32H,
  rotr32L,
  rotlSH,
  rotlSL,
  rotlBH,
  rotlBL,
  add,
  add3L,
  add3H,
  add4L,
  add4H,
  add5H,
  add5L
}, [SHA512_Kh, SHA512_Kl] = u64.split([
  "0x428a2f98d728ae22",
  "0x7137449123ef65cd",
  "0xb5c0fbcfec4d3b2f",
  "0xe9b5dba58189dbbc",
  "0x3956c25bf348b538",
  "0x59f111f1b605d019",
  "0x923f82a4af194f9b",
  "0xab1c5ed5da6d8118",
  "0xd807aa98a3030242",
  "0x12835b0145706fbe",
  "0x243185be4ee4b28c",
  "0x550c7dc3d5ffb4e2",
  "0x72be5d74f27b896f",
  "0x80deb1fe3b1696b1",
  "0x9bdc06a725c71235",
  "0xc19bf174cf692694",
  "0xe49b69c19ef14ad2",
  "0xefbe4786384f25e3",
  "0x0fc19dc68b8cd5b5",
  "0x240ca1cc77ac9c65",
  "0x2de92c6f592b0275",
  "0x4a7484aa6ea6e483",
  "0x5cb0a9dcbd41fbd4",
  "0x76f988da831153b5",
  "0x983e5152ee66dfab",
  "0xa831c66d2db43210",
  "0xb00327c898fb213f",
  "0xbf597fc7beef0ee4",
  "0xc6e00bf33da88fc2",
  "0xd5a79147930aa725",
  "0x06ca6351e003826f",
  "0x142929670a0e6e70",
  "0x27b70a8546d22ffc",
  "0x2e1b21385c26c926",
  "0x4d2c6dfc5ac42aed",
  "0x53380d139d95b3df",
  "0x650a73548baf63de",
  "0x766a0abb3c77b2a8",
  "0x81c2c92e47edaee6",
  "0x92722c851482353b",
  "0xa2bfe8a14cf10364",
  "0xa81a664bbc423001",
  "0xc24b8b70d0f89791",
  "0xc76c51a30654be30",
  "0xd192e819d6ef5218",
  "0xd69906245565a910",
  "0xf40e35855771202a",
  "0x106aa07032bbd1b8",
  "0x19a4c116b8d2d0c8",
  "0x1e376c085141ab53",
  "0x2748774cdf8eeb99",
  "0x34b0bcb5e19b48a8",
  "0x391c0cb3c5c95a63",
  "0x4ed8aa4ae3418acb",
  "0x5b9cca4f7763e373",
  "0x682e6ff3d6b2b8a3",
  "0x748f82ee5defb2fc",
  "0x78a5636f43172f60",
  "0x84c87814a1f0ab72",
  "0x8cc702081a6439ec",
  "0x90befffa23631e28",
  "0xa4506cebde82bde9",
  "0xbef9a3f7b2c67915",
  "0xc67178f2e372532b",
  "0xca273eceea26619c",
  "0xd186b8c721c0c207",
  "0xeada7dd6cde0eb1e",
  "0xf57d4f7fee6ed178",
  "0x06f067aa72176fba",
  "0x0a637dc5a2c898a6",
  "0x113f9804bef90dae",
  "0x1b710b35131c471b",
  "0x28db77f523047d84",
  "0x32caab7b40c72493",
  "0x3c9ebe0a15c9bebc",
  "0x431d67c49c100d4c",
  "0x4cc5d4becb3e42b6",
  "0x597f299cfc657e2a",
  "0x5fcb6fab3ad6faec",
  "0x6c44198c4a475817"
].map((t) => BigInt(t))), SHA512_W_H = /* @__PURE__ */ new Uint32Array(80), SHA512_W_L = /* @__PURE__ */ new Uint32Array(80);
class SHA512 extends SHA2$1 {
  constructor() {
    super(128, 64, 16, !1), this.Ah = 1779033703, this.Al = -205731576, this.Bh = -1150833019, this.Bl = -2067093701, this.Ch = 1013904242, this.Cl = -23791573, this.Dh = -1521486534, this.Dl = 1595750129, this.Eh = 1359893119, this.El = -1377402159, this.Fh = -1694144372, this.Fl = 725511199, this.Gh = 528734635, this.Gl = -79577749, this.Hh = 1541459225, this.Hl = 327033209;
  }
  // prettier-ignore
  get() {
    const { Ah: e, Al: n, Bh: r, Bl: s, Ch: o, Cl: a, Dh: c, Dl: h, Eh: p, El: g, Fh: y, Fl: $, Gh: k, Gl: S, Hh: w, Hl: x } = this;
    return [e, n, r, s, o, a, c, h, p, g, y, $, k, S, w, x];
  }
  // prettier-ignore
  set(e, n, r, s, o, a, c, h, p, g, y, $, k, S, w, x) {
    this.Ah = e | 0, this.Al = n | 0, this.Bh = r | 0, this.Bl = s | 0, this.Ch = o | 0, this.Cl = a | 0, this.Dh = c | 0, this.Dl = h | 0, this.Eh = p | 0, this.El = g | 0, this.Fh = y | 0, this.Fl = $ | 0, this.Gh = k | 0, this.Gl = S | 0, this.Hh = w | 0, this.Hl = x | 0;
  }
  process(e, n) {
    for (let C = 0; C < 16; C++, n += 4)
      SHA512_W_H[C] = e.getUint32(n), SHA512_W_L[C] = e.getUint32(n += 4);
    for (let C = 16; C < 80; C++) {
      const W = SHA512_W_H[C - 15] | 0, q = SHA512_W_L[C - 15] | 0, I = u64.rotrSH(W, q, 1) ^ u64.rotrSH(W, q, 8) ^ u64.shrSH(W, q, 7), L = u64.rotrSL(W, q, 1) ^ u64.rotrSL(W, q, 8) ^ u64.shrSL(W, q, 7), P = SHA512_W_H[C - 2] | 0, ie = SHA512_W_L[C - 2] | 0, te = u64.rotrSH(P, ie, 19) ^ u64.rotrBH(P, ie, 61) ^ u64.shrSH(P, ie, 6), T = u64.rotrSL(P, ie, 19) ^ u64.rotrBL(P, ie, 61) ^ u64.shrSL(P, ie, 6), O = u64.add4L(L, T, SHA512_W_L[C - 7], SHA512_W_L[C - 16]), K = u64.add4H(O, I, te, SHA512_W_H[C - 7], SHA512_W_H[C - 16]);
      SHA512_W_H[C] = K | 0, SHA512_W_L[C] = O | 0;
    }
    let { Ah: r, Al: s, Bh: o, Bl: a, Ch: c, Cl: h, Dh: p, Dl: g, Eh: y, El: $, Fh: k, Fl: S, Gh: w, Gl: x, Hh: A, Hl: N } = this;
    for (let C = 0; C < 80; C++) {
      const W = u64.rotrSH(y, $, 14) ^ u64.rotrSH(y, $, 18) ^ u64.rotrBH(y, $, 41), q = u64.rotrSL(y, $, 14) ^ u64.rotrSL(y, $, 18) ^ u64.rotrBL(y, $, 41), I = y & k ^ ~y & w, L = $ & S ^ ~$ & x, P = u64.add5L(N, q, L, SHA512_Kl[C], SHA512_W_L[C]), ie = u64.add5H(P, A, W, I, SHA512_Kh[C], SHA512_W_H[C]), te = P | 0, T = u64.rotrSH(r, s, 28) ^ u64.rotrBH(r, s, 34) ^ u64.rotrBH(r, s, 39), O = u64.rotrSL(r, s, 28) ^ u64.rotrBL(r, s, 34) ^ u64.rotrBL(r, s, 39), K = r & o ^ r & c ^ o & c, ae = s & a ^ s & h ^ a & h;
      A = w | 0, N = x | 0, w = k | 0, x = S | 0, k = y | 0, S = $ | 0, { h: y, l: $ } = u64.add(p | 0, g | 0, ie | 0, te | 0), p = c | 0, g = h | 0, c = o | 0, h = a | 0, o = r | 0, a = s | 0;
      const E = u64.add3L(te, O, ae);
      r = u64.add3H(E, ie, T, K), s = E | 0;
    }
    ({ h: r, l: s } = u64.add(this.Ah | 0, this.Al | 0, r | 0, s | 0)), { h: o, l: a } = u64.add(this.Bh | 0, this.Bl | 0, o | 0, a | 0), { h: c, l: h } = u64.add(this.Ch | 0, this.Cl | 0, c | 0, h | 0), { h: p, l: g } = u64.add(this.Dh | 0, this.Dl | 0, p | 0, g | 0), { h: y, l: $ } = u64.add(this.Eh | 0, this.El | 0, y | 0, $ | 0), { h: k, l: S } = u64.add(this.Fh | 0, this.Fl | 0, k | 0, S | 0), { h: w, l: x } = u64.add(this.Gh | 0, this.Gl | 0, w | 0, x | 0), { h: A, l: N } = u64.add(this.Hh | 0, this.Hl | 0, A | 0, N | 0), this.set(r, s, o, a, c, h, p, g, y, $, k, S, w, x, A, N);
  }
  roundClean() {
    SHA512_W_H.fill(0), SHA512_W_L.fill(0);
  }
  destroy() {
    this.buffer.fill(0), this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  }
}
const sha512 = /* @__PURE__ */ wrapConstructor$1(() => new SHA512());
function number$1(t) {
  if (!Number.isSafeInteger(t) || t < 0)
    throw new Error(`Wrong positive integer: ${t}`);
}
function bool$1(t) {
  if (typeof t != "boolean")
    throw new Error(`Expected boolean, not ${t}`);
}
function bytes$1(t, ...e) {
  if (!(t instanceof Uint8Array))
    throw new Error("Expected Uint8Array");
  if (e.length > 0 && !e.includes(t.length))
    throw new Error(`Expected Uint8Array of length ${e}, not of length=${t.length}`);
}
function hash$1(t) {
  if (typeof t != "function" || typeof t.create != "function")
    throw new Error("Hash should be wrapped by utils.wrapConstructor");
  number$1(t.outputLen), number$1(t.blockLen);
}
function exists$1(t, e = !0) {
  if (t.destroyed)
    throw new Error("Hash instance has been destroyed");
  if (e && t.finished)
    throw new Error("Hash#digest() has already been called");
}
function output$1(t, e) {
  bytes$1(t);
  const n = e.outputLen;
  if (t.length < n)
    throw new Error(`digestInto() expects output buffer of length at least ${n}`);
}
const assert$1 = {
  number: number$1,
  bool: bool$1,
  bytes: bytes$1,
  hash: hash$1,
  exists: exists$1,
  output: output$1
}, crypto$1 = typeof globalThis == "object" && "crypto" in globalThis ? globalThis.crypto : void 0;
/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */
const u8a$2 = (t) => t instanceof Uint8Array, createView = (t) => new DataView(t.buffer, t.byteOffset, t.byteLength), rotr = (t, e) => t << 32 - e | t >>> e, isLE$1 = new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68;
if (!isLE$1)
  throw new Error("Non little-endian hardware is not supported");
Array.from({ length: 256 }, (t, e) => e.toString(16).padStart(2, "0"));
function utf8ToBytes$3(t) {
  if (typeof t != "string")
    throw new Error(`utf8ToBytes expected string, got ${typeof t}`);
  return new Uint8Array(new TextEncoder().encode(t));
}
function toBytes$1(t) {
  if (typeof t == "string" && (t = utf8ToBytes$3(t)), !u8a$2(t))
    throw new Error(`expected Uint8Array, got ${typeof t}`);
  return t;
}
function concatBytes$2(...t) {
  const e = new Uint8Array(t.reduce((r, s) => r + s.length, 0));
  let n = 0;
  return t.forEach((r) => {
    if (!u8a$2(r))
      throw new Error("Uint8Array expected");
    e.set(r, n), n += r.length;
  }), e;
}
class Hash {
  // Safe version that clones internal state
  clone() {
    return this._cloneInto();
  }
}
function wrapConstructor(t) {
  const e = (r) => t().update(toBytes$1(r)).digest(), n = t();
  return e.outputLen = n.outputLen, e.blockLen = n.blockLen, e.create = () => t(), e;
}
function randomBytes(t = 32) {
  if (crypto$1 && typeof crypto$1.getRandomValues == "function")
    return crypto$1.getRandomValues(new Uint8Array(t));
  throw new Error("crypto.getRandomValues must be defined");
}
function setBigUint64$1(t, e, n, r) {
  if (typeof t.setBigUint64 == "function")
    return t.setBigUint64(e, n, r);
  const s = BigInt(32), o = BigInt(4294967295), a = Number(n >> s & o), c = Number(n & o), h = r ? 4 : 0, p = r ? 0 : 4;
  t.setUint32(e + h, a, r), t.setUint32(e + p, c, r);
}
class SHA2 extends Hash {
  constructor(e, n, r, s) {
    super(), this.blockLen = e, this.outputLen = n, this.padOffset = r, this.isLE = s, this.finished = !1, this.length = 0, this.pos = 0, this.destroyed = !1, this.buffer = new Uint8Array(e), this.view = createView(this.buffer);
  }
  update(e) {
    assert$1.exists(this);
    const { view: n, buffer: r, blockLen: s } = this;
    e = toBytes$1(e);
    const o = e.length;
    for (let a = 0; a < o; ) {
      const c = Math.min(s - this.pos, o - a);
      if (c === s) {
        const h = createView(e);
        for (; s <= o - a; a += s)
          this.process(h, a);
        continue;
      }
      r.set(e.subarray(a, a + c), this.pos), this.pos += c, a += c, this.pos === s && (this.process(n, 0), this.pos = 0);
    }
    return this.length += e.length, this.roundClean(), this;
  }
  digestInto(e) {
    assert$1.exists(this), assert$1.output(e, this), this.finished = !0;
    const { buffer: n, view: r, blockLen: s, isLE: o } = this;
    let { pos: a } = this;
    n[a++] = 128, this.buffer.subarray(a).fill(0), this.padOffset > s - a && (this.process(r, 0), a = 0);
    for (let y = a; y < s; y++)
      n[y] = 0;
    setBigUint64$1(r, s - 8, BigInt(this.length * 8), o), this.process(r, 0);
    const c = createView(e), h = this.outputLen;
    if (h % 4)
      throw new Error("_sha2: outputLen should be aligned to 32bit");
    const p = h / 4, g = this.get();
    if (p > g.length)
      throw new Error("_sha2: outputLen bigger than state");
    for (let y = 0; y < p; y++)
      c.setUint32(4 * y, g[y], o);
  }
  digest() {
    const { buffer: e, outputLen: n } = this;
    this.digestInto(e);
    const r = e.slice(0, n);
    return this.destroy(), r;
  }
  _cloneInto(e) {
    e || (e = new this.constructor()), e.set(...this.get());
    const { blockLen: n, buffer: r, length: s, finished: o, destroyed: a, pos: c } = this;
    return e.length = s, e.pos = c, e.finished = o, e.destroyed = a, s % n && e.buffer.set(r), e;
  }
}
const Chi$1 = (t, e, n) => t & e ^ ~t & n, Maj$1 = (t, e, n) => t & e ^ t & n ^ e & n, SHA256_K$1 = new Uint32Array([
  1116352408,
  1899447441,
  3049323471,
  3921009573,
  961987163,
  1508970993,
  2453635748,
  2870763221,
  3624381080,
  310598401,
  607225278,
  1426881987,
  1925078388,
  2162078206,
  2614888103,
  3248222580,
  3835390401,
  4022224774,
  264347078,
  604807628,
  770255983,
  1249150122,
  1555081692,
  1996064986,
  2554220882,
  2821834349,
  2952996808,
  3210313671,
  3336571891,
  3584528711,
  113926993,
  338241895,
  666307205,
  773529912,
  1294757372,
  1396182291,
  1695183700,
  1986661051,
  2177026350,
  2456956037,
  2730485921,
  2820302411,
  3259730800,
  3345764771,
  3516065817,
  3600352804,
  4094571909,
  275423344,
  430227734,
  506948616,
  659060556,
  883997877,
  958139571,
  1322822218,
  1537002063,
  1747873779,
  1955562222,
  2024104815,
  2227730452,
  2361852424,
  2428436474,
  2756734187,
  3204031479,
  3329325298
]), IV = new Uint32Array([
  1779033703,
  3144134277,
  1013904242,
  2773480762,
  1359893119,
  2600822924,
  528734635,
  1541459225
]), SHA256_W$1 = new Uint32Array(64);
let SHA256$1 = class extends SHA2 {
  constructor() {
    super(64, 32, 8, !1), this.A = IV[0] | 0, this.B = IV[1] | 0, this.C = IV[2] | 0, this.D = IV[3] | 0, this.E = IV[4] | 0, this.F = IV[5] | 0, this.G = IV[6] | 0, this.H = IV[7] | 0;
  }
  get() {
    const { A: e, B: n, C: r, D: s, E: o, F: a, G: c, H: h } = this;
    return [e, n, r, s, o, a, c, h];
  }
  // prettier-ignore
  set(e, n, r, s, o, a, c, h) {
    this.A = e | 0, this.B = n | 0, this.C = r | 0, this.D = s | 0, this.E = o | 0, this.F = a | 0, this.G = c | 0, this.H = h | 0;
  }
  process(e, n) {
    for (let y = 0; y < 16; y++, n += 4)
      SHA256_W$1[y] = e.getUint32(n, !1);
    for (let y = 16; y < 64; y++) {
      const $ = SHA256_W$1[y - 15], k = SHA256_W$1[y - 2], S = rotr($, 7) ^ rotr($, 18) ^ $ >>> 3, w = rotr(k, 17) ^ rotr(k, 19) ^ k >>> 10;
      SHA256_W$1[y] = w + SHA256_W$1[y - 7] + S + SHA256_W$1[y - 16] | 0;
    }
    let { A: r, B: s, C: o, D: a, E: c, F: h, G: p, H: g } = this;
    for (let y = 0; y < 64; y++) {
      const $ = rotr(c, 6) ^ rotr(c, 11) ^ rotr(c, 25), k = g + $ + Chi$1(c, h, p) + SHA256_K$1[y] + SHA256_W$1[y] | 0, w = (rotr(r, 2) ^ rotr(r, 13) ^ rotr(r, 22)) + Maj$1(r, s, o) | 0;
      g = p, p = h, h = c, c = a + k | 0, a = o, o = s, s = r, r = k + w | 0;
    }
    r = r + this.A | 0, s = s + this.B | 0, o = o + this.C | 0, a = a + this.D | 0, c = c + this.E | 0, h = h + this.F | 0, p = p + this.G | 0, g = g + this.H | 0, this.set(r, s, o, a, c, h, p, g);
  }
  roundClean() {
    SHA256_W$1.fill(0);
  }
  destroy() {
    this.set(0, 0, 0, 0, 0, 0, 0, 0), this.buffer.fill(0);
  }
};
class SHA224 extends SHA256$1 {
  constructor() {
    super(), this.A = -1056596264, this.B = 914150663, this.C = 812702999, this.D = -150054599, this.E = -4191439, this.F = 1750603025, this.G = 1694076839, this.H = -1090891868, this.outputLen = 28;
  }
}
const sha256$1 = wrapConstructor(() => new SHA256$1());
wrapConstructor(() => new SHA224());
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
const _0n$8 = BigInt(0), _1n$9 = BigInt(1), _2n$5 = BigInt(2), u8a$1 = (t) => t instanceof Uint8Array, hexes$1 = Array.from({ length: 256 }, (t, e) => e.toString(16).padStart(2, "0"));
function bytesToHex$1(t) {
  if (!u8a$1(t))
    throw new Error("Uint8Array expected");
  let e = "";
  for (let n = 0; n < t.length; n++)
    e += hexes$1[t[n]];
  return e;
}
function numberToHexUnpadded$1(t) {
  const e = t.toString(16);
  return e.length & 1 ? `0${e}` : e;
}
function hexToNumber$1(t) {
  if (typeof t != "string")
    throw new Error("hex string expected, got " + typeof t);
  return BigInt(t === "" ? "0" : `0x${t}`);
}
function hexToBytes$1(t) {
  if (typeof t != "string")
    throw new Error("hex string expected, got " + typeof t);
  const e = t.length;
  if (e % 2)
    throw new Error("padded hex string expected, got unpadded hex of length " + e);
  const n = new Uint8Array(e / 2);
  for (let r = 0; r < n.length; r++) {
    const s = r * 2, o = t.slice(s, s + 2), a = Number.parseInt(o, 16);
    if (Number.isNaN(a) || a < 0)
      throw new Error("Invalid byte sequence");
    n[r] = a;
  }
  return n;
}
function bytesToNumberBE$1(t) {
  return hexToNumber$1(bytesToHex$1(t));
}
function bytesToNumberLE$1(t) {
  if (!u8a$1(t))
    throw new Error("Uint8Array expected");
  return hexToNumber$1(bytesToHex$1(Uint8Array.from(t).reverse()));
}
function numberToBytesBE$1(t, e) {
  return hexToBytes$1(t.toString(16).padStart(e * 2, "0"));
}
function numberToBytesLE$1(t, e) {
  return numberToBytesBE$1(t, e).reverse();
}
function numberToVarBytesBE$1(t) {
  return hexToBytes$1(numberToHexUnpadded$1(t));
}
function ensureBytes$2(t, e, n) {
  let r;
  if (typeof e == "string")
    try {
      r = hexToBytes$1(e);
    } catch (o) {
      throw new Error(`${t} must be valid hex string, got "${e}". Cause: ${o}`);
    }
  else if (u8a$1(e))
    r = Uint8Array.from(e);
  else
    throw new Error(`${t} must be hex string or Uint8Array`);
  const s = r.length;
  if (typeof n == "number" && s !== n)
    throw new Error(`${t} expected ${n} bytes, got ${s}`);
  return r;
}
function concatBytes$1(...t) {
  const e = new Uint8Array(t.reduce((r, s) => r + s.length, 0));
  let n = 0;
  return t.forEach((r) => {
    if (!u8a$1(r))
      throw new Error("Uint8Array expected");
    e.set(r, n), n += r.length;
  }), e;
}
function equalBytes$2(t, e) {
  if (t.length !== e.length)
    return !1;
  for (let n = 0; n < t.length; n++)
    if (t[n] !== e[n])
      return !1;
  return !0;
}
function utf8ToBytes$2(t) {
  if (typeof t != "string")
    throw new Error(`utf8ToBytes expected string, got ${typeof t}`);
  return new Uint8Array(new TextEncoder().encode(t));
}
function bitLen$1(t) {
  let e;
  for (e = 0; t > _0n$8; t >>= _1n$9, e += 1)
    ;
  return e;
}
function bitGet$1(t, e) {
  return t >> BigInt(e) & _1n$9;
}
const bitSet$1 = (t, e, n) => t | (n ? _1n$9 : _0n$8) << BigInt(e), bitMask$1 = (t) => (_2n$5 << BigInt(t - 1)) - _1n$9, u8n$1 = (t) => new Uint8Array(t), u8fr$1 = (t) => Uint8Array.from(t);
function createHmacDrbg$1(t, e, n) {
  if (typeof t != "number" || t < 2)
    throw new Error("hashLen must be a number");
  if (typeof e != "number" || e < 2)
    throw new Error("qByteLen must be a number");
  if (typeof n != "function")
    throw new Error("hmacFn must be a function");
  let r = u8n$1(t), s = u8n$1(t), o = 0;
  const a = () => {
    r.fill(1), s.fill(0), o = 0;
  }, c = (...y) => n(s, r, ...y), h = (y = u8n$1()) => {
    s = c(u8fr$1([0]), y), r = c(), y.length !== 0 && (s = c(u8fr$1([1]), y), r = c());
  }, p = () => {
    if (o++ >= 1e3)
      throw new Error("drbg: tried 1000 values");
    let y = 0;
    const $ = [];
    for (; y < e; ) {
      r = c();
      const k = r.slice();
      $.push(k), y += r.length;
    }
    return concatBytes$1(...$);
  };
  return (y, $) => {
    a(), h(y);
    let k;
    for (; !(k = $(p())); )
      h();
    return a(), k;
  };
}
const validatorFns$1 = {
  bigint: (t) => typeof t == "bigint",
  function: (t) => typeof t == "function",
  boolean: (t) => typeof t == "boolean",
  string: (t) => typeof t == "string",
  isSafeInteger: (t) => Number.isSafeInteger(t),
  array: (t) => Array.isArray(t),
  field: (t, e) => e.Fp.isValid(t),
  hash: (t) => typeof t == "function" && Number.isSafeInteger(t.outputLen)
};
function validateObject$1(t, e, n = {}) {
  const r = (s, o, a) => {
    const c = validatorFns$1[o];
    if (typeof c != "function")
      throw new Error(`Invalid validator "${o}", expected function`);
    const h = t[s];
    if (!(a && h === void 0) && !c(h, t))
      throw new Error(`Invalid param ${String(s)}=${h} (${typeof h}), expected ${o}`);
  };
  for (const [s, o] of Object.entries(e))
    r(s, o, !1);
  for (const [s, o] of Object.entries(n))
    r(s, o, !0);
  return t;
}
const ut$1 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  bitGet: bitGet$1,
  bitLen: bitLen$1,
  bitMask: bitMask$1,
  bitSet: bitSet$1,
  bytesToHex: bytesToHex$1,
  bytesToNumberBE: bytesToNumberBE$1,
  bytesToNumberLE: bytesToNumberLE$1,
  concatBytes: concatBytes$1,
  createHmacDrbg: createHmacDrbg$1,
  ensureBytes: ensureBytes$2,
  equalBytes: equalBytes$2,
  hexToBytes: hexToBytes$1,
  hexToNumber: hexToNumber$1,
  numberToBytesBE: numberToBytesBE$1,
  numberToBytesLE: numberToBytesLE$1,
  numberToHexUnpadded: numberToHexUnpadded$1,
  numberToVarBytesBE: numberToVarBytesBE$1,
  utf8ToBytes: utf8ToBytes$2,
  validateObject: validateObject$1
}, Symbol.toStringTag, { value: "Module" }));
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
const _0n$7 = BigInt(0), _1n$8 = BigInt(1), _2n$4 = BigInt(2), _3n$3 = BigInt(3), _4n$1 = BigInt(4), _5n$1 = BigInt(5), _8n$1 = BigInt(8);
BigInt(9);
BigInt(16);
function mod$1(t, e) {
  const n = t % e;
  return n >= _0n$7 ? n : e + n;
}
function pow$1(t, e, n) {
  if (n <= _0n$7 || e < _0n$7)
    throw new Error("Expected power/modulo > 0");
  if (n === _1n$8)
    return _0n$7;
  let r = _1n$8;
  for (; e > _0n$7; )
    e & _1n$8 && (r = r * t % n), t = t * t % n, e >>= _1n$8;
  return r;
}
function pow2$1(t, e, n) {
  let r = t;
  for (; e-- > _0n$7; )
    r *= r, r %= n;
  return r;
}
function invert$1(t, e) {
  if (t === _0n$7 || e <= _0n$7)
    throw new Error(`invert: expected positive integers, got n=${t} mod=${e}`);
  let n = mod$1(t, e), r = e, s = _0n$7, o = _1n$8;
  for (; n !== _0n$7; ) {
    const c = r / n, h = r % n, p = s - o * c;
    r = n, n = h, s = o, o = p;
  }
  if (r !== _1n$8)
    throw new Error("invert: does not exist");
  return mod$1(s, e);
}
function tonelliShanks$1(t) {
  const e = (t - _1n$8) / _2n$4;
  let n, r, s;
  for (n = t - _1n$8, r = 0; n % _2n$4 === _0n$7; n /= _2n$4, r++)
    ;
  for (s = _2n$4; s < t && pow$1(s, e, t) !== t - _1n$8; s++)
    ;
  if (r === 1) {
    const a = (t + _1n$8) / _4n$1;
    return function(h, p) {
      const g = h.pow(p, a);
      if (!h.eql(h.sqr(g), p))
        throw new Error("Cannot find square root");
      return g;
    };
  }
  const o = (n + _1n$8) / _2n$4;
  return function(c, h) {
    if (c.pow(h, e) === c.neg(c.ONE))
      throw new Error("Cannot find square root");
    let p = r, g = c.pow(c.mul(c.ONE, s), n), y = c.pow(h, o), $ = c.pow(h, n);
    for (; !c.eql($, c.ONE); ) {
      if (c.eql($, c.ZERO))
        return c.ZERO;
      let k = 1;
      for (let w = c.sqr($); k < p && !c.eql(w, c.ONE); k++)
        w = c.sqr(w);
      const S = c.pow(g, _1n$8 << BigInt(p - k - 1));
      g = c.sqr(S), y = c.mul(y, S), $ = c.mul($, g), p = k;
    }
    return y;
  };
}
function FpSqrt$1(t) {
  if (t % _4n$1 === _3n$3) {
    const e = (t + _1n$8) / _4n$1;
    return function(r, s) {
      const o = r.pow(s, e);
      if (!r.eql(r.sqr(o), s))
        throw new Error("Cannot find square root");
      return o;
    };
  }
  if (t % _8n$1 === _5n$1) {
    const e = (t - _5n$1) / _8n$1;
    return function(r, s) {
      const o = r.mul(s, _2n$4), a = r.pow(o, e), c = r.mul(s, a), h = r.mul(r.mul(c, _2n$4), a), p = r.mul(c, r.sub(h, r.ONE));
      if (!r.eql(r.sqr(p), s))
        throw new Error("Cannot find square root");
      return p;
    };
  }
  return tonelliShanks$1(t);
}
const FIELD_FIELDS$1 = [
  "create",
  "isValid",
  "is0",
  "neg",
  "inv",
  "sqrt",
  "sqr",
  "eql",
  "add",
  "sub",
  "mul",
  "pow",
  "div",
  "addN",
  "subN",
  "mulN",
  "sqrN"
];
function validateField$1(t) {
  const e = {
    ORDER: "bigint",
    MASK: "bigint",
    BYTES: "isSafeInteger",
    BITS: "isSafeInteger"
  }, n = FIELD_FIELDS$1.reduce((r, s) => (r[s] = "function", r), e);
  return validateObject$1(t, n);
}
function FpPow$1(t, e, n) {
  if (n < _0n$7)
    throw new Error("Expected power > 0");
  if (n === _0n$7)
    return t.ONE;
  if (n === _1n$8)
    return e;
  let r = t.ONE, s = e;
  for (; n > _0n$7; )
    n & _1n$8 && (r = t.mul(r, s)), s = t.sqr(s), n >>= _1n$8;
  return r;
}
function FpInvertBatch$1(t, e) {
  const n = new Array(e.length), r = e.reduce((o, a, c) => t.is0(a) ? o : (n[c] = o, t.mul(o, a)), t.ONE), s = t.inv(r);
  return e.reduceRight((o, a, c) => t.is0(a) ? o : (n[c] = t.mul(o, n[c]), t.mul(o, a)), s), n;
}
function nLength$1(t, e) {
  const n = e !== void 0 ? e : t.toString(2).length, r = Math.ceil(n / 8);
  return { nBitLength: n, nByteLength: r };
}
function Field$1(t, e, n = !1, r = {}) {
  if (t <= _0n$7)
    throw new Error(`Expected Fp ORDER > 0, got ${t}`);
  const { nBitLength: s, nByteLength: o } = nLength$1(t, e);
  if (o > 2048)
    throw new Error("Field lengths over 2048 bytes are not supported");
  const a = FpSqrt$1(t), c = Object.freeze({
    ORDER: t,
    BITS: s,
    BYTES: o,
    MASK: bitMask$1(s),
    ZERO: _0n$7,
    ONE: _1n$8,
    create: (h) => mod$1(h, t),
    isValid: (h) => {
      if (typeof h != "bigint")
        throw new Error(`Invalid field element: expected bigint, got ${typeof h}`);
      return _0n$7 <= h && h < t;
    },
    is0: (h) => h === _0n$7,
    isOdd: (h) => (h & _1n$8) === _1n$8,
    neg: (h) => mod$1(-h, t),
    eql: (h, p) => h === p,
    sqr: (h) => mod$1(h * h, t),
    add: (h, p) => mod$1(h + p, t),
    sub: (h, p) => mod$1(h - p, t),
    mul: (h, p) => mod$1(h * p, t),
    pow: (h, p) => FpPow$1(c, h, p),
    div: (h, p) => mod$1(h * invert$1(p, t), t),
    // Same as above, but doesn't normalize
    sqrN: (h) => h * h,
    addN: (h, p) => h + p,
    subN: (h, p) => h - p,
    mulN: (h, p) => h * p,
    inv: (h) => invert$1(h, t),
    sqrt: r.sqrt || ((h) => a(c, h)),
    invertBatch: (h) => FpInvertBatch$1(c, h),
    // TODO: do we really need constant cmov?
    // We don't have const-time bigints anyway, so probably will be not very useful
    cmov: (h, p, g) => g ? p : h,
    toBytes: (h) => n ? numberToBytesLE$1(h, o) : numberToBytesBE$1(h, o),
    fromBytes: (h) => {
      if (h.length !== o)
        throw new Error(`Fp.fromBytes: expected ${o}, got ${h.length}`);
      return n ? bytesToNumberLE$1(h) : bytesToNumberBE$1(h);
    }
  });
  return Object.freeze(c);
}
function hashToPrivateScalar(t, e, n = !1) {
  t = ensureBytes$2("privateHash", t);
  const r = t.length, s = nLength$1(e).nByteLength + 8;
  if (s < 24 || r < s || r > 1024)
    throw new Error(`hashToPrivateScalar: expected ${s}-1024 bytes of input, got ${r}`);
  const o = n ? bytesToNumberLE$1(t) : bytesToNumberBE$1(t);
  return mod$1(o, e - _1n$8) + _1n$8;
}
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
const _0n$6 = BigInt(0), _1n$7 = BigInt(1);
function wNAF$1(t, e) {
  const n = (s, o) => {
    const a = o.negate();
    return s ? a : o;
  }, r = (s) => {
    const o = Math.ceil(e / s) + 1, a = 2 ** (s - 1);
    return { windows: o, windowSize: a };
  };
  return {
    constTimeNegate: n,
    // non-const time multiplication ladder
    unsafeLadder(s, o) {
      let a = t.ZERO, c = s;
      for (; o > _0n$6; )
        o & _1n$7 && (a = a.add(c)), c = c.double(), o >>= _1n$7;
      return a;
    },
    /**
     * Creates a wNAF precomputation window. Used for caching.
     * Default window size is set by `utils.precompute()` and is equal to 8.
     * Number of precomputed points depends on the curve size:
     * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:
     * - 𝑊 is the window size
     * - 𝑛 is the bitlength of the curve order.
     * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.
     * @returns precomputed point tables flattened to a single array
     */
    precomputeWindow(s, o) {
      const { windows: a, windowSize: c } = r(o), h = [];
      let p = s, g = p;
      for (let y = 0; y < a; y++) {
        g = p, h.push(g);
        for (let $ = 1; $ < c; $++)
          g = g.add(p), h.push(g);
        p = g.double();
      }
      return h;
    },
    /**
     * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.
     * @param W window size
     * @param precomputes precomputed tables
     * @param n scalar (we don't check here, but should be less than curve order)
     * @returns real and fake (for const-time) points
     */
    wNAF(s, o, a) {
      const { windows: c, windowSize: h } = r(s);
      let p = t.ZERO, g = t.BASE;
      const y = BigInt(2 ** s - 1), $ = 2 ** s, k = BigInt(s);
      for (let S = 0; S < c; S++) {
        const w = S * h;
        let x = Number(a & y);
        a >>= k, x > h && (x -= $, a += _1n$7);
        const A = w, N = w + Math.abs(x) - 1, C = S % 2 !== 0, W = x < 0;
        x === 0 ? g = g.add(n(C, o[A])) : p = p.add(n(W, o[N]));
      }
      return { p, f: g };
    },
    wNAFCached(s, o, a, c) {
      const h = s._WINDOW_SIZE || 1;
      let p = o.get(s);
      return p || (p = this.precomputeWindow(s, h), h !== 1 && o.set(s, c(p))), this.wNAF(h, p, a);
    }
  };
}
function validateBasic$1(t) {
  return validateField$1(t.Fp), validateObject$1(t, {
    n: "bigint",
    h: "bigint",
    Gx: "field",
    Gy: "field"
  }, {
    nBitLength: "isSafeInteger",
    nByteLength: "isSafeInteger"
  }), Object.freeze({
    ...nLength$1(t.n, t.nBitLength),
    ...t,
    p: t.Fp.ORDER
  });
}
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
function validatePointOpts$1(t) {
  const e = validateBasic$1(t);
  validateObject$1(e, {
    a: "field",
    b: "field"
  }, {
    allowedPrivateKeyLengths: "array",
    wrapPrivateKey: "boolean",
    isTorsionFree: "function",
    clearCofactor: "function",
    allowInfinityPoint: "boolean",
    fromBytes: "function",
    toBytes: "function"
  });
  const { endo: n, Fp: r, a: s } = e;
  if (n) {
    if (!r.eql(s, r.ZERO))
      throw new Error("Endomorphism can only be defined for Koblitz curves that have a=0");
    if (typeof n != "object" || typeof n.beta != "bigint" || typeof n.splitScalar != "function")
      throw new Error("Expected endomorphism with beta: bigint and splitScalar: function");
  }
  return Object.freeze({ ...e });
}
const { bytesToNumberBE: b2n$1, hexToBytes: h2b$1 } = ut$1, DER$1 = {
  // asn.1 DER encoding utils
  Err: class extends Error {
    constructor(e = "") {
      super(e);
    }
  },
  _parseInt(t) {
    const { Err: e } = DER$1;
    if (t.length < 2 || t[0] !== 2)
      throw new e("Invalid signature integer tag");
    const n = t[1], r = t.subarray(2, n + 2);
    if (!n || r.length !== n)
      throw new e("Invalid signature integer: wrong length");
    if (r[0] & 128)
      throw new e("Invalid signature integer: negative");
    if (r[0] === 0 && !(r[1] & 128))
      throw new e("Invalid signature integer: unnecessary leading zero");
    return { d: b2n$1(r), l: t.subarray(n + 2) };
  },
  toSig(t) {
    const { Err: e } = DER$1, n = typeof t == "string" ? h2b$1(t) : t;
    if (!(n instanceof Uint8Array))
      throw new Error("ui8a expected");
    let r = n.length;
    if (r < 2 || n[0] != 48)
      throw new e("Invalid signature tag");
    if (n[1] !== r - 2)
      throw new e("Invalid signature: incorrect length");
    const { d: s, l: o } = DER$1._parseInt(n.subarray(2)), { d: a, l: c } = DER$1._parseInt(o);
    if (c.length)
      throw new e("Invalid signature: left bytes after parsing");
    return { r: s, s: a };
  },
  hexFromSig(t) {
    const e = (p) => Number.parseInt(p[0], 16) & 8 ? "00" + p : p, n = (p) => {
      const g = p.toString(16);
      return g.length & 1 ? `0${g}` : g;
    }, r = e(n(t.s)), s = e(n(t.r)), o = r.length / 2, a = s.length / 2, c = n(o), h = n(a);
    return `30${n(a + o + 4)}02${h}${s}02${c}${r}`;
  }
}, _0n$5 = BigInt(0), _1n$6 = BigInt(1);
BigInt(2);
const _3n$2 = BigInt(3);
BigInt(4);
function weierstrassPoints$1(t) {
  const e = validatePointOpts$1(t), { Fp: n } = e, r = e.toBytes || ((S, w, x) => {
    const A = w.toAffine();
    return concatBytes$1(Uint8Array.from([4]), n.toBytes(A.x), n.toBytes(A.y));
  }), s = e.fromBytes || ((S) => {
    const w = S.subarray(1), x = n.fromBytes(w.subarray(0, n.BYTES)), A = n.fromBytes(w.subarray(n.BYTES, 2 * n.BYTES));
    return { x, y: A };
  });
  function o(S) {
    const { a: w, b: x } = e, A = n.sqr(S), N = n.mul(A, S);
    return n.add(n.add(N, n.mul(S, w)), x);
  }
  if (!n.eql(n.sqr(e.Gy), o(e.Gx)))
    throw new Error("bad generator point: equation left != right");
  function a(S) {
    return typeof S == "bigint" && _0n$5 < S && S < e.n;
  }
  function c(S) {
    if (!a(S))
      throw new Error("Expected valid bigint: 0 < bigint < curve.n");
  }
  function h(S) {
    const { allowedPrivateKeyLengths: w, nByteLength: x, wrapPrivateKey: A, n: N } = e;
    if (w && typeof S != "bigint") {
      if (S instanceof Uint8Array && (S = bytesToHex$1(S)), typeof S != "string" || !w.includes(S.length))
        throw new Error("Invalid key");
      S = S.padStart(x * 2, "0");
    }
    let C;
    try {
      C = typeof S == "bigint" ? S : bytesToNumberBE$1(ensureBytes$2("private key", S, x));
    } catch {
      throw new Error(`private key must be ${x} bytes, hex or bigint, not ${typeof S}`);
    }
    return A && (C = mod$1(C, N)), c(C), C;
  }
  const p = /* @__PURE__ */ new Map();
  function g(S) {
    if (!(S instanceof y))
      throw new Error("ProjectivePoint expected");
  }
  class y {
    constructor(w, x, A) {
      if (this.px = w, this.py = x, this.pz = A, w == null || !n.isValid(w))
        throw new Error("x required");
      if (x == null || !n.isValid(x))
        throw new Error("y required");
      if (A == null || !n.isValid(A))
        throw new Error("z required");
    }
    // Does not validate if the point is on-curve.
    // Use fromHex instead, or call assertValidity() later.
    static fromAffine(w) {
      const { x, y: A } = w || {};
      if (!w || !n.isValid(x) || !n.isValid(A))
        throw new Error("invalid affine point");
      if (w instanceof y)
        throw new Error("projective point not allowed");
      const N = (C) => n.eql(C, n.ZERO);
      return N(x) && N(A) ? y.ZERO : new y(x, A, n.ONE);
    }
    get x() {
      return this.toAffine().x;
    }
    get y() {
      return this.toAffine().y;
    }
    /**
     * Takes a bunch of Projective Points but executes only one
     * inversion on all of them. Inversion is very slow operation,
     * so this improves performance massively.
     * Optimization: converts a list of projective points to a list of identical points with Z=1.
     */
    static normalizeZ(w) {
      const x = n.invertBatch(w.map((A) => A.pz));
      return w.map((A, N) => A.toAffine(x[N])).map(y.fromAffine);
    }
    /**
     * Converts hash string or Uint8Array to Point.
     * @param hex short/long ECDSA hex
     */
    static fromHex(w) {
      const x = y.fromAffine(s(ensureBytes$2("pointHex", w)));
      return x.assertValidity(), x;
    }
    // Multiplies generator point by privateKey.
    static fromPrivateKey(w) {
      return y.BASE.multiply(h(w));
    }
    // "Private method", don't use it directly
    _setWindowSize(w) {
      this._WINDOW_SIZE = w, p.delete(this);
    }
    // A point on curve is valid if it conforms to equation.
    assertValidity() {
      if (this.is0()) {
        if (e.allowInfinityPoint)
          return;
        throw new Error("bad point: ZERO");
      }
      const { x: w, y: x } = this.toAffine();
      if (!n.isValid(w) || !n.isValid(x))
        throw new Error("bad point: x or y not FE");
      const A = n.sqr(x), N = o(w);
      if (!n.eql(A, N))
        throw new Error("bad point: equation left != right");
      if (!this.isTorsionFree())
        throw new Error("bad point: not in prime-order subgroup");
    }
    hasEvenY() {
      const { y: w } = this.toAffine();
      if (n.isOdd)
        return !n.isOdd(w);
      throw new Error("Field doesn't support isOdd");
    }
    /**
     * Compare one point to another.
     */
    equals(w) {
      g(w);
      const { px: x, py: A, pz: N } = this, { px: C, py: W, pz: q } = w, I = n.eql(n.mul(x, q), n.mul(C, N)), L = n.eql(n.mul(A, q), n.mul(W, N));
      return I && L;
    }
    /**
     * Flips point to one corresponding to (x, -y) in Affine coordinates.
     */
    negate() {
      return new y(this.px, n.neg(this.py), this.pz);
    }
    // Renes-Costello-Batina exception-free doubling formula.
    // There is 30% faster Jacobian formula, but it is not complete.
    // https://eprint.iacr.org/2015/1060, algorithm 3
    // Cost: 8M + 3S + 3*a + 2*b3 + 15add.
    double() {
      const { a: w, b: x } = e, A = n.mul(x, _3n$2), { px: N, py: C, pz: W } = this;
      let q = n.ZERO, I = n.ZERO, L = n.ZERO, P = n.mul(N, N), ie = n.mul(C, C), te = n.mul(W, W), T = n.mul(N, C);
      return T = n.add(T, T), L = n.mul(N, W), L = n.add(L, L), q = n.mul(w, L), I = n.mul(A, te), I = n.add(q, I), q = n.sub(ie, I), I = n.add(ie, I), I = n.mul(q, I), q = n.mul(T, q), L = n.mul(A, L), te = n.mul(w, te), T = n.sub(P, te), T = n.mul(w, T), T = n.add(T, L), L = n.add(P, P), P = n.add(L, P), P = n.add(P, te), P = n.mul(P, T), I = n.add(I, P), te = n.mul(C, W), te = n.add(te, te), P = n.mul(te, T), q = n.sub(q, P), L = n.mul(te, ie), L = n.add(L, L), L = n.add(L, L), new y(q, I, L);
    }
    // Renes-Costello-Batina exception-free addition formula.
    // There is 30% faster Jacobian formula, but it is not complete.
    // https://eprint.iacr.org/2015/1060, algorithm 1
    // Cost: 12M + 0S + 3*a + 3*b3 + 23add.
    add(w) {
      g(w);
      const { px: x, py: A, pz: N } = this, { px: C, py: W, pz: q } = w;
      let I = n.ZERO, L = n.ZERO, P = n.ZERO;
      const ie = e.a, te = n.mul(e.b, _3n$2);
      let T = n.mul(x, C), O = n.mul(A, W), K = n.mul(N, q), ae = n.add(x, A), E = n.add(C, W);
      ae = n.mul(ae, E), E = n.add(T, O), ae = n.sub(ae, E), E = n.add(x, N);
      let B = n.add(C, q);
      return E = n.mul(E, B), B = n.add(T, K), E = n.sub(E, B), B = n.add(A, N), I = n.add(W, q), B = n.mul(B, I), I = n.add(O, K), B = n.sub(B, I), P = n.mul(ie, E), I = n.mul(te, K), P = n.add(I, P), I = n.sub(O, P), P = n.add(O, P), L = n.mul(I, P), O = n.add(T, T), O = n.add(O, T), K = n.mul(ie, K), E = n.mul(te, E), O = n.add(O, K), K = n.sub(T, K), K = n.mul(ie, K), E = n.add(E, K), T = n.mul(O, E), L = n.add(L, T), T = n.mul(B, E), I = n.mul(ae, I), I = n.sub(I, T), T = n.mul(ae, O), P = n.mul(B, P), P = n.add(P, T), new y(I, L, P);
    }
    subtract(w) {
      return this.add(w.negate());
    }
    is0() {
      return this.equals(y.ZERO);
    }
    wNAF(w) {
      return k.wNAFCached(this, p, w, (x) => {
        const A = n.invertBatch(x.map((N) => N.pz));
        return x.map((N, C) => N.toAffine(A[C])).map(y.fromAffine);
      });
    }
    /**
     * Non-constant-time multiplication. Uses double-and-add algorithm.
     * It's faster, but should only be used when you don't care about
     * an exposed private key e.g. sig verification, which works over *public* keys.
     */
    multiplyUnsafe(w) {
      const x = y.ZERO;
      if (w === _0n$5)
        return x;
      if (c(w), w === _1n$6)
        return this;
      const { endo: A } = e;
      if (!A)
        return k.unsafeLadder(this, w);
      let { k1neg: N, k1: C, k2neg: W, k2: q } = A.splitScalar(w), I = x, L = x, P = this;
      for (; C > _0n$5 || q > _0n$5; )
        C & _1n$6 && (I = I.add(P)), q & _1n$6 && (L = L.add(P)), P = P.double(), C >>= _1n$6, q >>= _1n$6;
      return N && (I = I.negate()), W && (L = L.negate()), L = new y(n.mul(L.px, A.beta), L.py, L.pz), I.add(L);
    }
    /**
     * Constant time multiplication.
     * Uses wNAF method. Windowed method may be 10% faster,
     * but takes 2x longer to generate and consumes 2x memory.
     * Uses precomputes when available.
     * Uses endomorphism for Koblitz curves.
     * @param scalar by which the point would be multiplied
     * @returns New point
     */
    multiply(w) {
      c(w);
      let x = w, A, N;
      const { endo: C } = e;
      if (C) {
        const { k1neg: W, k1: q, k2neg: I, k2: L } = C.splitScalar(x);
        let { p: P, f: ie } = this.wNAF(q), { p: te, f: T } = this.wNAF(L);
        P = k.constTimeNegate(W, P), te = k.constTimeNegate(I, te), te = new y(n.mul(te.px, C.beta), te.py, te.pz), A = P.add(te), N = ie.add(T);
      } else {
        const { p: W, f: q } = this.wNAF(x);
        A = W, N = q;
      }
      return y.normalizeZ([A, N])[0];
    }
    /**
     * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.
     * Not using Strauss-Shamir trick: precomputation tables are faster.
     * The trick could be useful if both P and Q are not G (not in our case).
     * @returns non-zero affine point
     */
    multiplyAndAddUnsafe(w, x, A) {
      const N = y.BASE, C = (q, I) => I === _0n$5 || I === _1n$6 || !q.equals(N) ? q.multiplyUnsafe(I) : q.multiply(I), W = C(this, x).add(C(w, A));
      return W.is0() ? void 0 : W;
    }
    // Converts Projective point to affine (x, y) coordinates.
    // Can accept precomputed Z^-1 - for example, from invertBatch.
    // (x, y, z) ∋ (x=x/z, y=y/z)
    toAffine(w) {
      const { px: x, py: A, pz: N } = this, C = this.is0();
      w == null && (w = C ? n.ONE : n.inv(N));
      const W = n.mul(x, w), q = n.mul(A, w), I = n.mul(N, w);
      if (C)
        return { x: n.ZERO, y: n.ZERO };
      if (!n.eql(I, n.ONE))
        throw new Error("invZ was invalid");
      return { x: W, y: q };
    }
    isTorsionFree() {
      const { h: w, isTorsionFree: x } = e;
      if (w === _1n$6)
        return !0;
      if (x)
        return x(y, this);
      throw new Error("isTorsionFree() has not been declared for the elliptic curve");
    }
    clearCofactor() {
      const { h: w, clearCofactor: x } = e;
      return w === _1n$6 ? this : x ? x(y, this) : this.multiplyUnsafe(e.h);
    }
    toRawBytes(w = !0) {
      return this.assertValidity(), r(y, this, w);
    }
    toHex(w = !0) {
      return bytesToHex$1(this.toRawBytes(w));
    }
  }
  y.BASE = new y(e.Gx, e.Gy, n.ONE), y.ZERO = new y(n.ZERO, n.ONE, n.ZERO);
  const $ = e.nBitLength, k = wNAF$1(y, e.endo ? Math.ceil($ / 2) : $);
  return {
    CURVE: e,
    ProjectivePoint: y,
    normPrivateKeyToScalar: h,
    weierstrassEquation: o,
    isWithinCurveOrder: a
  };
}
function validateOpts$1(t) {
  const e = validateBasic$1(t);
  return validateObject$1(e, {
    hash: "hash",
    hmac: "function",
    randomBytes: "function"
  }, {
    bits2int: "function",
    bits2int_modN: "function",
    lowS: "boolean"
  }), Object.freeze({ lowS: !0, ...e });
}
function weierstrass$1(t) {
  const e = validateOpts$1(t), { Fp: n, n: r } = e, s = n.BYTES + 1, o = 2 * n.BYTES + 1;
  function a(E) {
    return _0n$5 < E && E < n.ORDER;
  }
  function c(E) {
    return mod$1(E, r);
  }
  function h(E) {
    return invert$1(E, r);
  }
  const { ProjectivePoint: p, normPrivateKeyToScalar: g, weierstrassEquation: y, isWithinCurveOrder: $ } = weierstrassPoints$1({
    ...e,
    toBytes(E, B, H) {
      const Q = B.toAffine(), F = n.toBytes(Q.x), ce = concatBytes$1;
      return H ? ce(Uint8Array.from([B.hasEvenY() ? 2 : 3]), F) : ce(Uint8Array.from([4]), F, n.toBytes(Q.y));
    },
    fromBytes(E) {
      const B = E.length, H = E[0], Q = E.subarray(1);
      if (B === s && (H === 2 || H === 3)) {
        const F = bytesToNumberBE$1(Q);
        if (!a(F))
          throw new Error("Point is not on curve");
        const ce = y(F);
        let oe = n.sqrt(ce);
        const le = (oe & _1n$6) === _1n$6;
        return (H & 1) === 1 !== le && (oe = n.neg(oe)), { x: F, y: oe };
      } else if (B === o && H === 4) {
        const F = n.fromBytes(Q.subarray(0, n.BYTES)), ce = n.fromBytes(Q.subarray(n.BYTES, 2 * n.BYTES));
        return { x: F, y: ce };
      } else
        throw new Error(`Point of length ${B} was invalid. Expected ${s} compressed bytes or ${o} uncompressed bytes`);
    }
  }), k = (E) => bytesToHex$1(numberToBytesBE$1(E, e.nByteLength));
  function S(E) {
    const B = r >> _1n$6;
    return E > B;
  }
  function w(E) {
    return S(E) ? c(-E) : E;
  }
  const x = (E, B, H) => bytesToNumberBE$1(E.slice(B, H));
  class A {
    constructor(B, H, Q) {
      this.r = B, this.s = H, this.recovery = Q, this.assertValidity();
    }
    // pair (bytes of r, bytes of s)
    static fromCompact(B) {
      const H = e.nByteLength;
      return B = ensureBytes$2("compactSignature", B, H * 2), new A(x(B, 0, H), x(B, H, 2 * H));
    }
    // DER encoded ECDSA signature
    // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script
    static fromDER(B) {
      const { r: H, s: Q } = DER$1.toSig(ensureBytes$2("DER", B));
      return new A(H, Q);
    }
    assertValidity() {
      if (!$(this.r))
        throw new Error("r must be 0 < r < CURVE.n");
      if (!$(this.s))
        throw new Error("s must be 0 < s < CURVE.n");
    }
    addRecoveryBit(B) {
      return new A(this.r, this.s, B);
    }
    recoverPublicKey(B) {
      const { r: H, s: Q, recovery: F } = this, ce = L(ensureBytes$2("msgHash", B));
      if (F == null || ![0, 1, 2, 3].includes(F))
        throw new Error("recovery id invalid");
      const oe = F === 2 || F === 3 ? H + e.n : H;
      if (oe >= n.ORDER)
        throw new Error("recovery id 2 or 3 invalid");
      const le = F & 1 ? "03" : "02", ve = p.fromHex(le + k(oe)), xe = h(oe), Se = c(-ce * xe), Te = c(Q * xe), Ae = p.BASE.multiplyAndAddUnsafe(ve, Se, Te);
      if (!Ae)
        throw new Error("point at infinify");
      return Ae.assertValidity(), Ae;
    }
    // Signatures should be low-s, to prevent malleability.
    hasHighS() {
      return S(this.s);
    }
    normalizeS() {
      return this.hasHighS() ? new A(this.r, c(-this.s), this.recovery) : this;
    }
    // DER-encoded
    toDERRawBytes() {
      return hexToBytes$1(this.toDERHex());
    }
    toDERHex() {
      return DER$1.hexFromSig({ r: this.r, s: this.s });
    }
    // padded bytes of r, then padded bytes of s
    toCompactRawBytes() {
      return hexToBytes$1(this.toCompactHex());
    }
    toCompactHex() {
      return k(this.r) + k(this.s);
    }
  }
  const N = {
    isValidPrivateKey(E) {
      try {
        return g(E), !0;
      } catch {
        return !1;
      }
    },
    normPrivateKeyToScalar: g,
    /**
     * Produces cryptographically secure private key from random of size (nBitLength+64)
     * as per FIPS 186 B.4.1 with modulo bias being neglible.
     */
    randomPrivateKey: () => {
      const E = e.randomBytes(n.BYTES + 8), B = hashToPrivateScalar(E, r);
      return numberToBytesBE$1(B, e.nByteLength);
    },
    /**
     * Creates precompute table for an arbitrary EC point. Makes point "cached".
     * Allows to massively speed-up `point.multiply(scalar)`.
     * @returns cached point
     * @example
     * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));
     * fast.multiply(privKey); // much faster ECDH now
     */
    precompute(E = 8, B = p.BASE) {
      return B._setWindowSize(E), B.multiply(BigInt(3)), B;
    }
  };
  function C(E, B = !0) {
    return p.fromPrivateKey(E).toRawBytes(B);
  }
  function W(E) {
    const B = E instanceof Uint8Array, H = typeof E == "string", Q = (B || H) && E.length;
    return B ? Q === s || Q === o : H ? Q === 2 * s || Q === 2 * o : E instanceof p;
  }
  function q(E, B, H = !0) {
    if (W(E))
      throw new Error("first arg must be private key");
    if (!W(B))
      throw new Error("second arg must be public key");
    return p.fromHex(B).multiply(g(E)).toRawBytes(H);
  }
  const I = e.bits2int || function(E) {
    const B = bytesToNumberBE$1(E), H = E.length * 8 - e.nBitLength;
    return H > 0 ? B >> BigInt(H) : B;
  }, L = e.bits2int_modN || function(E) {
    return c(I(E));
  }, P = bitMask$1(e.nBitLength);
  function ie(E) {
    if (typeof E != "bigint")
      throw new Error("bigint expected");
    if (!(_0n$5 <= E && E < P))
      throw new Error(`bigint expected < 2^${e.nBitLength}`);
    return numberToBytesBE$1(E, e.nByteLength);
  }
  function te(E, B, H = T) {
    if (["recovered", "canonical"].some((de) => de in H))
      throw new Error("sign() legacy options not supported");
    const { hash: Q, randomBytes: F } = e;
    let { lowS: ce, prehash: oe, extraEntropy: le } = H;
    ce == null && (ce = !0), E = ensureBytes$2("msgHash", E), oe && (E = ensureBytes$2("prehashed msgHash", Q(E)));
    const ve = L(E), xe = g(B), Se = [ie(xe), ie(ve)];
    if (le != null) {
      const de = le === !0 ? F(n.BYTES) : le;
      Se.push(ensureBytes$2("extraEntropy", de, n.BYTES));
    }
    const Te = concatBytes$1(...Se), Ae = ve;
    function Oe(de) {
      const Ue = I(de);
      if (!$(Ue))
        return;
      const Ve = h(Ue), _e = p.BASE.multiply(Ue).toAffine(), Be = c(_e.x);
      if (Be === _0n$5)
        return;
      const Pe = c(Ve * c(Ae + Be * xe));
      if (Pe === _0n$5)
        return;
      let qe = (_e.x === Be ? 0 : 2) | Number(_e.y & _1n$6), Xe = Pe;
      return ce && S(Pe) && (Xe = w(Pe), qe ^= 1), new A(Be, Xe, qe);
    }
    return { seed: Te, k2sig: Oe };
  }
  const T = { lowS: e.lowS, prehash: !1 }, O = { lowS: e.lowS, prehash: !1 };
  function K(E, B, H = T) {
    const { seed: Q, k2sig: F } = te(E, B, H), ce = e;
    return createHmacDrbg$1(ce.hash.outputLen, ce.nByteLength, ce.hmac)(Q, F);
  }
  p.BASE._setWindowSize(8);
  function ae(E, B, H, Q = O) {
    var _e;
    const F = E;
    if (B = ensureBytes$2("msgHash", B), H = ensureBytes$2("publicKey", H), "strict" in Q)
      throw new Error("options.strict was renamed to lowS");
    const { lowS: ce, prehash: oe } = Q;
    let le, ve;
    try {
      if (typeof F == "string" || F instanceof Uint8Array)
        try {
          le = A.fromDER(F);
        } catch (Be) {
          if (!(Be instanceof DER$1.Err))
            throw Be;
          le = A.fromCompact(F);
        }
      else if (typeof F == "object" && typeof F.r == "bigint" && typeof F.s == "bigint") {
        const { r: Be, s: Pe } = F;
        le = new A(Be, Pe);
      } else
        throw new Error("PARSE");
      ve = p.fromHex(H);
    } catch (Be) {
      if (Be.message === "PARSE")
        throw new Error("signature must be Signature instance, Uint8Array or hex string");
      return !1;
    }
    if (ce && le.hasHighS())
      return !1;
    oe && (B = e.hash(B));
    const { r: xe, s: Se } = le, Te = L(B), Ae = h(Se), Oe = c(Te * Ae), de = c(xe * Ae), Ue = (_e = p.BASE.multiplyAndAddUnsafe(ve, Oe, de)) == null ? void 0 : _e.toAffine();
    return Ue ? c(Ue.x) === xe : !1;
  }
  return {
    CURVE: e,
    getPublicKey: C,
    getSharedSecret: q,
    sign: K,
    verify: ae,
    ProjectivePoint: p,
    Signature: A,
    utils: N
  };
}
let HMAC$1 = class extends Hash {
  constructor(e, n) {
    super(), this.finished = !1, this.destroyed = !1, assert$1.hash(e);
    const r = toBytes$1(n);
    if (this.iHash = e.create(), typeof this.iHash.update != "function")
      throw new Error("Expected instance of class which extends utils.Hash");
    this.blockLen = this.iHash.blockLen, this.outputLen = this.iHash.outputLen;
    const s = this.blockLen, o = new Uint8Array(s);
    o.set(r.length > s ? e.create().update(r).digest() : r);
    for (let a = 0; a < o.length; a++)
      o[a] ^= 54;
    this.iHash.update(o), this.oHash = e.create();
    for (let a = 0; a < o.length; a++)
      o[a] ^= 106;
    this.oHash.update(o), o.fill(0);
  }
  update(e) {
    return assert$1.exists(this), this.iHash.update(e), this;
  }
  digestInto(e) {
    assert$1.exists(this), assert$1.bytes(e, this.outputLen), this.finished = !0, this.iHash.digestInto(e), this.oHash.update(e), this.oHash.digestInto(e), this.destroy();
  }
  digest() {
    const e = new Uint8Array(this.oHash.outputLen);
    return this.digestInto(e), e;
  }
  _cloneInto(e) {
    e || (e = Object.create(Object.getPrototypeOf(this), {}));
    const { oHash: n, iHash: r, finished: s, destroyed: o, blockLen: a, outputLen: c } = this;
    return e = e, e.finished = s, e.destroyed = o, e.blockLen = a, e.outputLen = c, e.oHash = n._cloneInto(e.oHash), e.iHash = r._cloneInto(e.iHash), e;
  }
  destroy() {
    this.destroyed = !0, this.oHash.destroy(), this.iHash.destroy();
  }
};
const hmac$1 = (t, e, n) => new HMAC$1(t, e).update(n).digest();
hmac$1.create = (t, e) => new HMAC$1(t, e);
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
function getHash$1(t) {
  return {
    hash: t,
    hmac: (e, ...n) => hmac$1(t, e, concatBytes$2(...n)),
    randomBytes
  };
}
function createCurve$1(t, e) {
  const n = (r) => weierstrass$1({ ...t, ...getHash$1(r) });
  return Object.freeze({ ...n(e), create: n });
}
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
const secp256k1P$1 = BigInt("0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f"), secp256k1N$1 = BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141"), _1n$5 = BigInt(1), _2n$3 = BigInt(2), divNearest$1 = (t, e) => (t + e / _2n$3) / e;
function sqrtMod$1(t) {
  const e = secp256k1P$1, n = BigInt(3), r = BigInt(6), s = BigInt(11), o = BigInt(22), a = BigInt(23), c = BigInt(44), h = BigInt(88), p = t * t * t % e, g = p * p * t % e, y = pow2$1(g, n, e) * g % e, $ = pow2$1(y, n, e) * g % e, k = pow2$1($, _2n$3, e) * p % e, S = pow2$1(k, s, e) * k % e, w = pow2$1(S, o, e) * S % e, x = pow2$1(w, c, e) * w % e, A = pow2$1(x, h, e) * x % e, N = pow2$1(A, c, e) * w % e, C = pow2$1(N, n, e) * g % e, W = pow2$1(C, a, e) * S % e, q = pow2$1(W, r, e) * p % e, I = pow2$1(q, _2n$3, e);
  if (!Fp$1.eql(Fp$1.sqr(I), t))
    throw new Error("Cannot find square root");
  return I;
}
const Fp$1 = Field$1(secp256k1P$1, void 0, void 0, { sqrt: sqrtMod$1 }), secp256k1$1 = createCurve$1({
  a: BigInt(0),
  b: BigInt(7),
  Fp: Fp$1,
  n: secp256k1N$1,
  // Base point (x, y) aka generator point
  Gx: BigInt("55066263022277343669578718895168534326250603453777594175500187360389116729240"),
  Gy: BigInt("32670510020758816978083085130507043184471273380659243275938904335757337482424"),
  h: BigInt(1),
  lowS: !0,
  /**
   * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.
   * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.
   * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.
   * Explanation: https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066
   */
  endo: {
    beta: BigInt("0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee"),
    splitScalar: (t) => {
      const e = secp256k1N$1, n = BigInt("0x3086d221a7d46bcde86c90e49284eb15"), r = -_1n$5 * BigInt("0xe4437ed6010e88286f547fa90abfe4c3"), s = BigInt("0x114ca50f7a8e2f3f657c1108d9d44cfd8"), o = n, a = BigInt("0x100000000000000000000000000000000"), c = divNearest$1(o * t, e), h = divNearest$1(-r * t, e);
      let p = mod$1(t - c * n - h * s, e), g = mod$1(-c * r - h * o, e);
      const y = p > a, $ = g > a;
      if (y && (p = e - p), $ && (g = e - g), p > a || g > a)
        throw new Error("splitScalar: Endomorphism failed, k=" + t);
      return { k1neg: y, k1: p, k2neg: $, k2: g };
    }
  }
}, sha256$1);
BigInt(0);
secp256k1$1.ProjectivePoint;
const Point$1 = secp256k1$1.ProjectivePoint, base58check = base58check$1(sha256$2);
function bytesToNumber(t) {
  return BigInt(`0x${bytesToHex$2(t)}`);
}
function numberToBytes(t) {
  return hexToBytes$2(t.toString(16).padStart(64, "0"));
}
const MASTER_SECRET = utf8ToBytes$4("Bitcoin seed"), BITCOIN_VERSIONS = { private: 76066276, public: 76067358 }, HARDENED_OFFSET = 2147483648, hash160 = (t) => ripemd160(sha256$2(t)), fromU32 = (t) => createView$1(t).getUint32(0, !1), toU32 = (t) => {
  if (!Number.isSafeInteger(t) || t < 0 || t > 2 ** 32 - 1)
    throw new Error(`Invalid number=${t}. Should be from 0 to 2 ** 32 - 1`);
  const e = new Uint8Array(4);
  return createView$1(e).setUint32(0, t, !1), e;
};
class HDKey {
  get fingerprint() {
    if (!this.pubHash)
      throw new Error("No publicKey set!");
    return fromU32(this.pubHash);
  }
  get identifier() {
    return this.pubHash;
  }
  get pubKeyHash() {
    return this.pubHash;
  }
  get privateKey() {
    return this.privKeyBytes || null;
  }
  get publicKey() {
    return this.pubKey || null;
  }
  get privateExtendedKey() {
    const e = this.privateKey;
    if (!e)
      throw new Error("No private key");
    return base58check.encode(this.serialize(this.versions.private, concatBytes$3(new Uint8Array([0]), e)));
  }
  get publicExtendedKey() {
    if (!this.pubKey)
      throw new Error("No public key");
    return base58check.encode(this.serialize(this.versions.public, this.pubKey));
  }
  static fromMasterSeed(e, n = BITCOIN_VERSIONS) {
    if (bytes$2(e), 8 * e.length < 128 || 8 * e.length > 512)
      throw new Error(`HDKey: wrong seed length=${e.length}. Should be between 128 and 512 bits; 256 bits is advised)`);
    const r = hmac$2(sha512, MASTER_SECRET, e);
    return new HDKey({
      versions: n,
      chainCode: r.slice(32),
      privateKey: r.slice(0, 32)
    });
  }
  static fromExtendedKey(e, n = BITCOIN_VERSIONS) {
    const r = base58check.decode(e), s = createView$1(r), o = s.getUint32(0, !1), a = {
      versions: n,
      depth: r[4],
      parentFingerprint: s.getUint32(5, !1),
      index: s.getUint32(9, !1),
      chainCode: r.slice(13, 45)
    }, c = r.slice(45), h = c[0] === 0;
    if (o !== n[h ? "private" : "public"])
      throw new Error("Version mismatch");
    return h ? new HDKey({ ...a, privateKey: c.slice(1) }) : new HDKey({ ...a, publicKey: c });
  }
  static fromJSON(e) {
    return HDKey.fromExtendedKey(e.xpriv);
  }
  constructor(e) {
    if (this.depth = 0, this.index = 0, this.chainCode = null, this.parentFingerprint = 0, !e || typeof e != "object")
      throw new Error("HDKey.constructor must not be called directly");
    if (this.versions = e.versions || BITCOIN_VERSIONS, this.depth = e.depth || 0, this.chainCode = e.chainCode, this.index = e.index || 0, this.parentFingerprint = e.parentFingerprint || 0, !this.depth && (this.parentFingerprint || this.index))
      throw new Error("HDKey: zero depth with non-zero index/parent fingerprint");
    if (e.publicKey && e.privateKey)
      throw new Error("HDKey: publicKey and privateKey at same time.");
    if (e.privateKey) {
      if (!secp256k1$1.utils.isValidPrivateKey(e.privateKey))
        throw new Error("Invalid private key");
      this.privKey = typeof e.privateKey == "bigint" ? e.privateKey : bytesToNumber(e.privateKey), this.privKeyBytes = numberToBytes(this.privKey), this.pubKey = secp256k1$1.getPublicKey(e.privateKey, !0);
    } else if (e.publicKey)
      this.pubKey = Point$1.fromHex(e.publicKey).toRawBytes(!0);
    else
      throw new Error("HDKey: no public or private key provided");
    this.pubHash = hash160(this.pubKey);
  }
  derive(e) {
    if (!/^[mM]'?/.test(e))
      throw new Error('Path must start with "m" or "M"');
    if (/^[mM]'?$/.test(e))
      return this;
    const n = e.replace(/^[mM]'?\//, "").split("/");
    let r = this;
    for (const s of n) {
      const o = /^(\d+)('?)$/.exec(s);
      if (!o || o.length !== 3)
        throw new Error(`Invalid child index: ${s}`);
      let a = +o[1];
      if (!Number.isSafeInteger(a) || a >= HARDENED_OFFSET)
        throw new Error("Invalid index");
      o[2] === "'" && (a += HARDENED_OFFSET), r = r.deriveChild(a);
    }
    return r;
  }
  deriveChild(e) {
    if (!this.pubKey || !this.chainCode)
      throw new Error("No publicKey or chainCode set");
    let n = toU32(e);
    if (e >= HARDENED_OFFSET) {
      const c = this.privateKey;
      if (!c)
        throw new Error("Could not derive hardened child key");
      n = concatBytes$3(new Uint8Array([0]), c, n);
    } else
      n = concatBytes$3(this.pubKey, n);
    const r = hmac$2(sha512, this.chainCode, n), s = bytesToNumber(r.slice(0, 32)), o = r.slice(32);
    if (!secp256k1$1.utils.isValidPrivateKey(s))
      throw new Error("Tweak bigger than curve order");
    const a = {
      versions: this.versions,
      chainCode: o,
      depth: this.depth + 1,
      parentFingerprint: this.fingerprint,
      index: e
    };
    try {
      if (this.privateKey) {
        const c = mod$1(this.privKey + s, secp256k1$1.CURVE.n);
        if (!secp256k1$1.utils.isValidPrivateKey(c))
          throw new Error("The tweak was out of range or the resulted private key is invalid");
        a.privateKey = c;
      } else {
        const c = Point$1.fromHex(this.pubKey).add(Point$1.fromPrivateKey(s));
        if (c.equals(Point$1.ZERO))
          throw new Error("The tweak was equal to negative P, which made the result key invalid");
        a.publicKey = c.toRawBytes(!0);
      }
      return new HDKey(a);
    } catch {
      return this.deriveChild(e + 1);
    }
  }
  sign(e) {
    if (!this.privateKey)
      throw new Error("No privateKey set!");
    return bytes$2(e, 32), secp256k1$1.sign(e, this.privKey).toCompactRawBytes();
  }
  verify(e, n) {
    if (bytes$2(e, 32), bytes$2(n, 64), !this.publicKey)
      throw new Error("No publicKey set!");
    let r;
    try {
      r = secp256k1$1.Signature.fromCompact(n);
    } catch {
      return !1;
    }
    return secp256k1$1.verify(r, e, this.publicKey);
  }
  wipePrivateData() {
    return this.privKey = void 0, this.privKeyBytes && (this.privKeyBytes.fill(0), this.privKeyBytes = void 0), this;
  }
  toJSON() {
    return {
      xpriv: this.privateExtendedKey,
      xpub: this.publicExtendedKey
    };
  }
  serialize(e, n) {
    if (!this.chainCode)
      throw new Error("No chainCode set");
    return bytes$2(n, 33), concatBytes$3(toU32(e), new Uint8Array([this.depth]), toU32(this.parentFingerprint), toU32(this.index), this.chainCode, n);
  }
}
/*! noble-ciphers - MIT License (c) 2023 Paul Miller (paulmillr.com) */
const u8a = (t) => t instanceof Uint8Array, u32 = (t) => new Uint32Array(t.buffer, t.byteOffset, Math.floor(t.byteLength / 4)), isLE = new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68;
if (!isLE)
  throw new Error("Non little-endian hardware is not supported");
function utf8ToBytes$1(t) {
  if (typeof t != "string")
    throw new Error(`utf8ToBytes expected string, got ${typeof t}`);
  return new Uint8Array(new TextEncoder().encode(t));
}
function toBytes(t) {
  if (typeof t == "string" && (t = utf8ToBytes$1(t)), !u8a(t))
    throw new Error(`expected Uint8Array, got ${typeof t}`);
  return t;
}
const isPlainObject = (t) => Object.prototype.toString.call(t) === "[object Object]" && t.constructor === Object;
function checkOpts(t, e) {
  if (e !== void 0 && (typeof e != "object" || !isPlainObject(e)))
    throw new Error("options must be object or undefined");
  return Object.assign(t, e);
}
function ensureBytes$1(t, e) {
  if (!(t instanceof Uint8Array))
    throw new Error("Uint8Array expected");
  if (t.length !== e)
    throw new Error(`Uint8Array length ${e} expected`);
}
function equalBytes$1(t, e) {
  if (t.length !== e.length)
    throw new Error("equalBytes: Different size of Uint8Arrays");
  let n = !0;
  for (let r = 0; r < t.length; r++)
    n && (n = t[r] === e[r]);
  return n;
}
function number(t) {
  if (!Number.isSafeInteger(t) || t < 0)
    throw new Error(`Wrong positive integer: ${t}`);
}
function bool(t) {
  if (typeof t != "boolean")
    throw new Error(`Expected boolean, not ${t}`);
}
function bytes(t, ...e) {
  if (!(t instanceof Uint8Array))
    throw new Error("Expected Uint8Array");
  if (e.length > 0 && !e.includes(t.length))
    throw new Error(`Expected Uint8Array of length ${e}, not of length=${t.length}`);
}
function hash(t) {
  if (typeof t != "function" || typeof t.create != "function")
    throw new Error("hash must be wrapped by utils.wrapConstructor");
  number(t.outputLen), number(t.blockLen);
}
function exists(t, e = !0) {
  if (t.destroyed)
    throw new Error("Hash instance has been destroyed");
  if (e && t.finished)
    throw new Error("Hash#digest() has already been called");
}
function output(t, e) {
  bytes(t);
  const n = e.outputLen;
  if (t.length < n)
    throw new Error(`digestInto() expects output buffer of length at least ${n}`);
}
const assert = { number, bool, bytes, hash, exists, output }, u8to16 = (t, e) => t[e++] & 255 | (t[e++] & 255) << 8;
class Poly1305 {
  constructor(e) {
    this.blockLen = 16, this.outputLen = 16, this.buffer = new Uint8Array(16), this.r = new Uint16Array(10), this.h = new Uint16Array(10), this.pad = new Uint16Array(8), this.pos = 0, this.finished = !1, e = toBytes(e), ensureBytes$1(e, 32);
    const n = u8to16(e, 0), r = u8to16(e, 2), s = u8to16(e, 4), o = u8to16(e, 6), a = u8to16(e, 8), c = u8to16(e, 10), h = u8to16(e, 12), p = u8to16(e, 14);
    this.r[0] = n & 8191, this.r[1] = (n >>> 13 | r << 3) & 8191, this.r[2] = (r >>> 10 | s << 6) & 7939, this.r[3] = (s >>> 7 | o << 9) & 8191, this.r[4] = (o >>> 4 | a << 12) & 255, this.r[5] = a >>> 1 & 8190, this.r[6] = (a >>> 14 | c << 2) & 8191, this.r[7] = (c >>> 11 | h << 5) & 8065, this.r[8] = (h >>> 8 | p << 8) & 8191, this.r[9] = p >>> 5 & 127;
    for (let g = 0; g < 8; g++)
      this.pad[g] = u8to16(e, 16 + 2 * g);
  }
  process(e, n, r = !1) {
    const s = r ? 0 : 2048, { h: o, r: a } = this, c = a[0], h = a[1], p = a[2], g = a[3], y = a[4], $ = a[5], k = a[6], S = a[7], w = a[8], x = a[9], A = u8to16(e, n + 0), N = u8to16(e, n + 2), C = u8to16(e, n + 4), W = u8to16(e, n + 6), q = u8to16(e, n + 8), I = u8to16(e, n + 10), L = u8to16(e, n + 12), P = u8to16(e, n + 14);
    let ie = o[0] + (A & 8191), te = o[1] + ((A >>> 13 | N << 3) & 8191), T = o[2] + ((N >>> 10 | C << 6) & 8191), O = o[3] + ((C >>> 7 | W << 9) & 8191), K = o[4] + ((W >>> 4 | q << 12) & 8191), ae = o[5] + (q >>> 1 & 8191), E = o[6] + ((q >>> 14 | I << 2) & 8191), B = o[7] + ((I >>> 11 | L << 5) & 8191), H = o[8] + ((L >>> 8 | P << 8) & 8191), Q = o[9] + (P >>> 5 | s), F = 0, ce = F + ie * c + te * (5 * x) + T * (5 * w) + O * (5 * S) + K * (5 * k);
    F = ce >>> 13, ce &= 8191, ce += ae * (5 * $) + E * (5 * y) + B * (5 * g) + H * (5 * p) + Q * (5 * h), F += ce >>> 13, ce &= 8191;
    let oe = F + ie * h + te * c + T * (5 * x) + O * (5 * w) + K * (5 * S);
    F = oe >>> 13, oe &= 8191, oe += ae * (5 * k) + E * (5 * $) + B * (5 * y) + H * (5 * g) + Q * (5 * p), F += oe >>> 13, oe &= 8191;
    let le = F + ie * p + te * h + T * c + O * (5 * x) + K * (5 * w);
    F = le >>> 13, le &= 8191, le += ae * (5 * S) + E * (5 * k) + B * (5 * $) + H * (5 * y) + Q * (5 * g), F += le >>> 13, le &= 8191;
    let ve = F + ie * g + te * p + T * h + O * c + K * (5 * x);
    F = ve >>> 13, ve &= 8191, ve += ae * (5 * w) + E * (5 * S) + B * (5 * k) + H * (5 * $) + Q * (5 * y), F += ve >>> 13, ve &= 8191;
    let xe = F + ie * y + te * g + T * p + O * h + K * c;
    F = xe >>> 13, xe &= 8191, xe += ae * (5 * x) + E * (5 * w) + B * (5 * S) + H * (5 * k) + Q * (5 * $), F += xe >>> 13, xe &= 8191;
    let Se = F + ie * $ + te * y + T * g + O * p + K * h;
    F = Se >>> 13, Se &= 8191, Se += ae * c + E * (5 * x) + B * (5 * w) + H * (5 * S) + Q * (5 * k), F += Se >>> 13, Se &= 8191;
    let Te = F + ie * k + te * $ + T * y + O * g + K * p;
    F = Te >>> 13, Te &= 8191, Te += ae * h + E * c + B * (5 * x) + H * (5 * w) + Q * (5 * S), F += Te >>> 13, Te &= 8191;
    let Ae = F + ie * S + te * k + T * $ + O * y + K * g;
    F = Ae >>> 13, Ae &= 8191, Ae += ae * p + E * h + B * c + H * (5 * x) + Q * (5 * w), F += Ae >>> 13, Ae &= 8191;
    let Oe = F + ie * w + te * S + T * k + O * $ + K * y;
    F = Oe >>> 13, Oe &= 8191, Oe += ae * g + E * p + B * h + H * c + Q * (5 * x), F += Oe >>> 13, Oe &= 8191;
    let de = F + ie * x + te * w + T * S + O * k + K * $;
    F = de >>> 13, de &= 8191, de += ae * y + E * g + B * p + H * h + Q * c, F += de >>> 13, de &= 8191, F = (F << 2) + F | 0, F = F + ce | 0, ce = F & 8191, F = F >>> 13, oe += F, o[0] = ce, o[1] = oe, o[2] = le, o[3] = ve, o[4] = xe, o[5] = Se, o[6] = Te, o[7] = Ae, o[8] = Oe, o[9] = de;
  }
  finalize() {
    const { h: e, pad: n } = this, r = new Uint16Array(10);
    let s = e[1] >>> 13;
    e[1] &= 8191;
    for (let c = 2; c < 10; c++)
      e[c] += s, s = e[c] >>> 13, e[c] &= 8191;
    e[0] += s * 5, s = e[0] >>> 13, e[0] &= 8191, e[1] += s, s = e[1] >>> 13, e[1] &= 8191, e[2] += s, r[0] = e[0] + 5, s = r[0] >>> 13, r[0] &= 8191;
    for (let c = 1; c < 10; c++)
      r[c] = e[c] + s, s = r[c] >>> 13, r[c] &= 8191;
    r[9] -= 8192;
    let o = (s ^ 1) - 1;
    for (let c = 0; c < 10; c++)
      r[c] &= o;
    o = ~o;
    for (let c = 0; c < 10; c++)
      e[c] = e[c] & o | r[c];
    e[0] = (e[0] | e[1] << 13) & 65535, e[1] = (e[1] >>> 3 | e[2] << 10) & 65535, e[2] = (e[2] >>> 6 | e[3] << 7) & 65535, e[3] = (e[3] >>> 9 | e[4] << 4) & 65535, e[4] = (e[4] >>> 12 | e[5] << 1 | e[6] << 14) & 65535, e[5] = (e[6] >>> 2 | e[7] << 11) & 65535, e[6] = (e[7] >>> 5 | e[8] << 8) & 65535, e[7] = (e[8] >>> 8 | e[9] << 5) & 65535;
    let a = e[0] + n[0];
    e[0] = a & 65535;
    for (let c = 1; c < 8; c++)
      a = (e[c] + n[c] | 0) + (a >>> 16) | 0, e[c] = a & 65535;
  }
  update(e) {
    assert.exists(this);
    const { buffer: n, blockLen: r } = this;
    e = toBytes(e);
    const s = e.length;
    for (let o = 0; o < s; ) {
      const a = Math.min(r - this.pos, s - o);
      if (a === r) {
        for (; r <= s - o; o += r)
          this.process(e, o);
        continue;
      }
      n.set(e.subarray(o, o + a), this.pos), this.pos += a, o += a, this.pos === r && (this.process(n, 0, !1), this.pos = 0);
    }
    return this;
  }
  destroy() {
    this.h.fill(0), this.r.fill(0), this.buffer.fill(0), this.pad.fill(0);
  }
  digestInto(e) {
    assert.exists(this), assert.output(e, this), this.finished = !0;
    const { buffer: n, h: r } = this;
    let { pos: s } = this;
    if (s) {
      for (n[s++] = 1; s < 16; s++)
        n[s] = 0;
      this.process(n, 0, !0);
    }
    this.finalize();
    let o = 0;
    for (let a = 0; a < 8; a++)
      e[o++] = r[a] >>> 0, e[o++] = r[a] >>> 8;
    return e;
  }
  digest() {
    const { buffer: e, outputLen: n } = this;
    this.digestInto(e);
    const r = e.slice(0, n);
    return this.destroy(), r;
  }
}
function wrapConstructorWithKey(t) {
  const e = (r, s) => t(s).update(toBytes(r)).digest(), n = t(new Uint8Array(32));
  return e.outputLen = n.outputLen, e.blockLen = n.blockLen, e.create = (r) => t(r), e;
}
wrapConstructorWithKey((t) => new Poly1305(t));
const sigma16 = utf8ToBytes$1("expand 16-byte k"), sigma32 = utf8ToBytes$1("expand 32-byte k"), sigma16_32 = u32(sigma16), sigma32_32 = u32(sigma32), isAligned32 = (t) => !(t.byteOffset % 4), salsaBasic = (t) => {
  const { core: e, rounds: n, counterRight: r, counterLen: s, allow128bitKeys: o, extendNonceFn: a, blockLen: c } = checkOpts({ rounds: 20, counterRight: !1, counterLen: 8, allow128bitKeys: !0, blockLen: 64 }, t);
  assert.number(s), assert.number(n), assert.number(c), assert.bool(r), assert.bool(o);
  const h = c / 4;
  if (c % 4 !== 0)
    throw new Error("Salsa/ChaCha: blockLen must be aligned to 4 bytes");
  return (p, g, y, $, k = 0) => {
    if (assert.bytes(p), assert.bytes(g), assert.bytes(y), $ || ($ = new Uint8Array(y.length)), assert.bytes($), assert.number(k), k < 0 || k >= 2 ** 32 - 1)
      throw new Error("Salsa/ChaCha: counter overflow");
    if ($.length < y.length)
      throw new Error(`Salsa/ChaCha: output (${$.length}) is shorter than data (${y.length})`);
    const S = [];
    let w, x;
    if (p.length === 32)
      w = p, x = sigma32_32;
    else if (p.length === 16 && o)
      w = new Uint8Array(32), w.set(p), w.set(p, 16), x = sigma16_32, S.push(w);
    else
      throw new Error(`Salsa/ChaCha: invalid 32-byte key, got length=${p.length}`);
    if (a) {
      if (g.length <= 16)
        throw new Error("Salsa/ChaCha: extended nonce must be bigger than 16 bytes");
      w = a(x, w, g.subarray(0, 16), new Uint8Array(32)), S.push(w), g = g.subarray(16);
    }
    const A = 16 - s;
    if (g.length !== A)
      throw new Error(`Salsa/ChaCha: nonce must be ${A} or 16 bytes`);
    if (A !== 12) {
      const ie = new Uint8Array(12);
      ie.set(g, r ? 0 : 12 - g.length), S.push(g = ie);
    }
    const N = new Uint8Array(c), C = u32(N), W = u32(w), q = u32(g), I = isAligned32(y) && u32(y), L = isAligned32($) && u32($);
    S.push(C);
    const P = y.length;
    for (let ie = 0, te = k; ie < P; te++) {
      if (e(x, W, q, C, te, n), te >= 2 ** 32 - 1)
        throw new Error("Salsa/ChaCha: counter overflow");
      const T = Math.min(c, P - ie);
      if (T === c && L && I) {
        const O = ie / 4;
        if (ie % 4 !== 0)
          throw new Error("Salsa/ChaCha: invalid block position");
        for (let K = 0; K < h; K++)
          L[O + K] = I[O + K] ^ C[K];
        ie += c;
        continue;
      }
      for (let O = 0; O < T; O++)
        $[ie + O] = y[ie + O] ^ N[O];
      ie += T;
    }
    for (let ie = 0; ie < S.length; ie++)
      S[ie].fill(0);
    return $;
  };
}, rotl = (t, e) => t << e | t >>> 32 - e;
function chachaCore(t, e, n, r, s, o = 20) {
  let a = t[0], c = t[1], h = t[2], p = t[3], g = e[0], y = e[1], $ = e[2], k = e[3], S = e[4], w = e[5], x = e[6], A = e[7], N = s, C = n[0], W = n[1], q = n[2], I = a, L = c, P = h, ie = p, te = g, T = y, O = $, K = k, ae = S, E = w, B = x, H = A, Q = N, F = C, ce = W, oe = q;
  for (let ve = 0; ve < o; ve += 2)
    I = I + te | 0, Q = rotl(Q ^ I, 16), ae = ae + Q | 0, te = rotl(te ^ ae, 12), I = I + te | 0, Q = rotl(Q ^ I, 8), ae = ae + Q | 0, te = rotl(te ^ ae, 7), L = L + T | 0, F = rotl(F ^ L, 16), E = E + F | 0, T = rotl(T ^ E, 12), L = L + T | 0, F = rotl(F ^ L, 8), E = E + F | 0, T = rotl(T ^ E, 7), P = P + O | 0, ce = rotl(ce ^ P, 16), B = B + ce | 0, O = rotl(O ^ B, 12), P = P + O | 0, ce = rotl(ce ^ P, 8), B = B + ce | 0, O = rotl(O ^ B, 7), ie = ie + K | 0, oe = rotl(oe ^ ie, 16), H = H + oe | 0, K = rotl(K ^ H, 12), ie = ie + K | 0, oe = rotl(oe ^ ie, 8), H = H + oe | 0, K = rotl(K ^ H, 7), I = I + T | 0, oe = rotl(oe ^ I, 16), B = B + oe | 0, T = rotl(T ^ B, 12), I = I + T | 0, oe = rotl(oe ^ I, 8), B = B + oe | 0, T = rotl(T ^ B, 7), L = L + O | 0, Q = rotl(Q ^ L, 16), H = H + Q | 0, O = rotl(O ^ H, 12), L = L + O | 0, Q = rotl(Q ^ L, 8), H = H + Q | 0, O = rotl(O ^ H, 7), P = P + K | 0, F = rotl(F ^ P, 16), ae = ae + F | 0, K = rotl(K ^ ae, 12), P = P + K | 0, F = rotl(F ^ P, 8), ae = ae + F | 0, K = rotl(K ^ ae, 7), ie = ie + te | 0, ce = rotl(ce ^ ie, 16), E = E + ce | 0, te = rotl(te ^ E, 12), ie = ie + te | 0, ce = rotl(ce ^ ie, 8), E = E + ce | 0, te = rotl(te ^ E, 7);
  let le = 0;
  r[le++] = a + I | 0, r[le++] = c + L | 0, r[le++] = h + P | 0, r[le++] = p + ie | 0, r[le++] = g + te | 0, r[le++] = y + T | 0, r[le++] = $ + O | 0, r[le++] = k + K | 0, r[le++] = S + ae | 0, r[le++] = w + E | 0, r[le++] = x + B | 0, r[le++] = A + H | 0, r[le++] = N + Q | 0, r[le++] = C + F | 0, r[le++] = W + ce | 0, r[le++] = q + oe | 0;
}
const chacha20 = /* @__PURE__ */ salsaBasic({
  core: chachaCore,
  counterRight: !1,
  counterLen: 4,
  allow128bitKeys: !1
});
function extract(t, e, n) {
  return assert$3.hash(t), n === void 0 && (n = new Uint8Array(t.outputLen)), hmac$4(t, toBytes$4(n), toBytes$4(e));
}
const HKDF_COUNTER = new Uint8Array([0]), EMPTY_BUFFER = new Uint8Array();
function expand(t, e, n, r = 32) {
  if (assert$3.hash(t), assert$3.number(r), r > 255 * t.outputLen)
    throw new Error("Length should be <= 255*HashLen");
  const s = Math.ceil(r / t.outputLen), o = new Uint8Array(s * t.outputLen), a = hmac$4.create(t, e), c = a._cloneInto(), h = new Uint8Array(a.outputLen);
  for (let p = 0; p < s; p++)
    HKDF_COUNTER[0] = p + 1, c.update(p === 0 ? EMPTY_BUFFER : h).update(n).update(HKDF_COUNTER).digestInto(h), o.set(h, t.outputLen * p), a._cloneInto(c);
  return a.destroy(), c.destroy(), h.fill(0), HKDF_COUNTER.fill(0), o.slice(0, r);
}
const hkdf = (t, e, n, r, s) => expand(t, extract(t, e, n), r, s);
var __defProp = Object.defineProperty, __export = (t, e) => {
  for (var n in e)
    __defProp(t, n, { get: e[n], enumerable: !0 });
};
function generatePrivateKey() {
  return bytesToHex$4(schnorr$1.utils.randomPrivateKey());
}
function getPublicKey(t) {
  return bytesToHex$4(schnorr$1.getPublicKey(t));
}
var utils_exports = {};
__export(utils_exports, {
  MessageNode: () => MessageNode,
  MessageQueue: () => MessageQueue,
  insertEventIntoAscendingList: () => insertEventIntoAscendingList,
  insertEventIntoDescendingList: () => insertEventIntoDescendingList,
  normalizeURL: () => normalizeURL,
  utf8Decoder: () => utf8Decoder,
  utf8Encoder: () => utf8Encoder
});
var utf8Decoder = new TextDecoder("utf-8"), utf8Encoder = new TextEncoder();
function normalizeURL(t) {
  let e = new URL(t);
  return e.pathname = e.pathname.replace(/\/+/g, "/"), e.pathname.endsWith("/") && (e.pathname = e.pathname.slice(0, -1)), (e.port === "80" && e.protocol === "ws:" || e.port === "443" && e.protocol === "wss:") && (e.port = ""), e.searchParams.sort(), e.hash = "", e.toString();
}
function insertEventIntoDescendingList(t, e) {
  var a;
  let n = 0, r = t.length - 1, s, o = n;
  if (r < 0)
    o = 0;
  else if (e.created_at < t[r].created_at)
    o = r + 1;
  else if (e.created_at >= t[n].created_at)
    o = n;
  else
    for (; ; ) {
      if (r <= n + 1) {
        o = r;
        break;
      }
      if (s = Math.floor(n + (r - n) / 2), t[s].created_at > e.created_at)
        n = s;
      else if (t[s].created_at < e.created_at)
        r = s;
      else {
        o = s;
        break;
      }
    }
  return ((a = t[o]) == null ? void 0 : a.id) !== e.id ? [...t.slice(0, o), e, ...t.slice(o)] : t;
}
function insertEventIntoAscendingList(t, e) {
  var a;
  let n = 0, r = t.length - 1, s, o = n;
  if (r < 0)
    o = 0;
  else if (e.created_at > t[r].created_at)
    o = r + 1;
  else if (e.created_at <= t[n].created_at)
    o = n;
  else
    for (; ; ) {
      if (r <= n + 1) {
        o = r;
        break;
      }
      if (s = Math.floor(n + (r - n) / 2), t[s].created_at < e.created_at)
        n = s;
      else if (t[s].created_at > e.created_at)
        r = s;
      else {
        o = s;
        break;
      }
    }
  return ((a = t[o]) == null ? void 0 : a.id) !== e.id ? [...t.slice(0, o), e, ...t.slice(o)] : t;
}
var MessageNode = class {
  constructor(t) {
    M(this, "_value");
    M(this, "_next");
    this._value = t, this._next = null;
  }
  get value() {
    return this._value;
  }
  set value(t) {
    this._value = t;
  }
  get next() {
    return this._next;
  }
  set next(t) {
    this._next = t;
  }
}, MessageQueue = class {
  constructor() {
    M(this, "_first");
    M(this, "_last");
    M(this, "_size");
    this._first = null, this._last = null, this._size = 0;
  }
  get first() {
    return this._first;
  }
  set first(t) {
    this._first = t;
  }
  get last() {
    return this._last;
  }
  set last(t) {
    this._last = t;
  }
  get size() {
    return this._size;
  }
  set size(t) {
    this._size = t;
  }
  enqueue(t) {
    const e = new MessageNode(t);
    return this._size === 0 || !this._last ? (this._first = e, this._last = e) : (this._last.next = e, this._last = e), this._size++, !0;
  }
  dequeue() {
    if (this._size === 0 || !this._first)
      return null;
    let t = this._first;
    return this._first = t.next, t.next = null, this._size--, t.value;
  }
}, verifiedSymbol = Symbol("verified");
function getBlankEvent(t = 255) {
  return {
    kind: t,
    content: "",
    tags: [],
    created_at: 0
  };
}
function finishEvent(t, e) {
  const n = t;
  return n.pubkey = getPublicKey(e), n.id = getEventHash$1(n), n.sig = getSignature(n, e), n[verifiedSymbol] = !0, n;
}
function serializeEvent(t) {
  if (!validateEvent(t))
    throw new Error("can't serialize event with wrong or missing properties");
  return JSON.stringify([0, t.pubkey, t.created_at, t.kind, t.tags, t.content]);
}
function getEventHash$1(t) {
  let e = sha256$4(utf8Encoder.encode(serializeEvent(t)));
  return bytesToHex$4(e);
}
var isRecord = (t) => t instanceof Object;
function validateEvent(t) {
  if (!isRecord(t) || typeof t.kind != "number" || typeof t.content != "string" || typeof t.created_at != "number" || typeof t.pubkey != "string" || !t.pubkey.match(/^[a-f0-9]{64}$/) || !Array.isArray(t.tags))
    return !1;
  for (let e = 0; e < t.tags.length; e++) {
    let n = t.tags[e];
    if (!Array.isArray(n))
      return !1;
    for (let r = 0; r < n.length; r++)
      if (typeof n[r] == "object")
        return !1;
  }
  return !0;
}
function verifySignature$1(t) {
  if (typeof t[verifiedSymbol] == "boolean")
    return t[verifiedSymbol];
  const e = getEventHash$1(t);
  if (e !== t.id)
    return t[verifiedSymbol] = !1;
  try {
    return t[verifiedSymbol] = schnorr$1.verify(t.sig, e, t.pubkey);
  } catch {
    return t[verifiedSymbol] = !1;
  }
}
function getSignature(t, e) {
  return bytesToHex$4(schnorr$1.sign(getEventHash$1(t), e));
}
function matchFilter(t, e) {
  if (t.ids && t.ids.indexOf(e.id) === -1 && !t.ids.some((n) => e.id.startsWith(n)) || t.kinds && t.kinds.indexOf(e.kind) === -1 || t.authors && t.authors.indexOf(e.pubkey) === -1 && !t.authors.some((n) => e.pubkey.startsWith(n)))
    return !1;
  for (let n in t)
    if (n[0] === "#") {
      let r = n.slice(1), s = t[`#${r}`];
      if (s && !e.tags.find(([o, a]) => o === n.slice(1) && s.indexOf(a) !== -1))
        return !1;
    }
  return !(t.since && e.created_at < t.since || t.until && e.created_at > t.until);
}
function matchFilters(t, e) {
  for (let n = 0; n < t.length; n++)
    if (matchFilter(t[n], e))
      return !0;
  return !1;
}
var fakejson_exports = {};
__export(fakejson_exports, {
  getHex64: () => getHex64,
  getInt: () => getInt,
  getSubscriptionId: () => getSubscriptionId,
  matchEventId: () => matchEventId,
  matchEventKind: () => matchEventKind,
  matchEventPubkey: () => matchEventPubkey
});
function getHex64(t, e) {
  let n = e.length + 3, r = t.indexOf(`"${e}":`) + n, s = t.slice(r).indexOf('"') + r + 1;
  return t.slice(s, s + 64);
}
function getInt(t, e) {
  let n = e.length, r = t.indexOf(`"${e}":`) + n + 3, s = t.slice(r), o = Math.min(s.indexOf(","), s.indexOf("}"));
  return parseInt(s.slice(0, o), 10);
}
function getSubscriptionId(t) {
  let e = t.slice(0, 22).indexOf('"EVENT"');
  if (e === -1)
    return null;
  let n = t.slice(e + 7 + 1).indexOf('"');
  if (n === -1)
    return null;
  let r = e + 7 + 1 + n, s = t.slice(r + 1, 80).indexOf('"');
  if (s === -1)
    return null;
  let o = r + 1 + s;
  return t.slice(r + 1, o);
}
function matchEventId(t, e) {
  return e === getHex64(t, "id");
}
function matchEventPubkey(t, e) {
  return e === getHex64(t, "pubkey");
}
function matchEventKind(t, e) {
  return e === getInt(t, "kind");
}
var newListeners = () => ({
  connect: [],
  disconnect: [],
  error: [],
  notice: [],
  auth: []
});
function relayInit(t, e = {}) {
  let { listTimeout: n = 3e3, getTimeout: r = 3e3, countTimeout: s = 3e3 } = e;
  var o, a = {}, c = newListeners(), h = {}, p = {}, g;
  async function y() {
    return g || (g = new Promise((A, N) => {
      try {
        o = new WebSocket(t);
      } catch (I) {
        N(I);
      }
      o.onopen = () => {
        c.connect.forEach((I) => I()), A();
      }, o.onerror = () => {
        g = void 0, c.error.forEach((I) => I()), N();
      }, o.onclose = async () => {
        g = void 0, c.disconnect.forEach((I) => I());
      };
      let C = new MessageQueue(), W;
      o.onmessage = (I) => {
        C.enqueue(I.data), W || (W = setInterval(q, 0));
      };
      function q() {
        var P, ie, te;
        if (C.size === 0) {
          clearInterval(W), W = null;
          return;
        }
        var I = C.dequeue();
        if (!I)
          return;
        let L = getSubscriptionId(I);
        if (L) {
          let T = a[L];
          if (T && T.alreadyHaveEvent && T.alreadyHaveEvent(getHex64(I, "id"), t))
            return;
        }
        try {
          let T = JSON.parse(I);
          switch (T[0]) {
            case "EVENT": {
              let E = T[1], B = T[2];
              validateEvent(B) && a[E] && (a[E].skipVerification || verifySignature$1(B)) && matchFilters(a[E].filters, B) && (a[E], (((P = h[E]) == null ? void 0 : P.event) || []).forEach((H) => H(B)));
              return;
            }
            case "COUNT":
              let O = T[1], K = T[2];
              a[O] && (((ie = h[O]) == null ? void 0 : ie.count) || []).forEach((E) => E(K));
              return;
            case "EOSE": {
              let E = T[1];
              E in h && (h[E].eose.forEach((B) => B()), h[E].eose = []);
              return;
            }
            case "OK": {
              let E = T[1], B = T[2], H = T[3] || "";
              if (E in p) {
                let { resolve: Q, reject: F } = p[E];
                B ? Q(null) : F(new Error(H));
              }
              return;
            }
            case "NOTICE":
              let ae = T[1];
              c.notice.forEach((E) => E(ae));
              return;
            case "AUTH": {
              let E = T[1];
              (te = c.auth) == null || te.forEach((B) => B(E));
              return;
            }
          }
        } catch {
          return;
        }
      }
    }), g);
  }
  function $() {
    return (o == null ? void 0 : o.readyState) === 1;
  }
  async function k() {
    $() || await y();
  }
  async function S(A) {
    let N = JSON.stringify(A);
    if (!(!$() && (await new Promise((C) => setTimeout(C, 1e3)), !$())))
      try {
        o.send(N);
      } catch (C) {
        console.log(C);
      }
  }
  const w = (A, {
    verb: N = "REQ",
    skipVerification: C = !1,
    alreadyHaveEvent: W = null,
    id: q = Math.random().toString().slice(2)
  } = {}) => {
    let I = q;
    a[I] = {
      id: I,
      filters: A,
      skipVerification: C,
      alreadyHaveEvent: W
    }, S([N, I, ...A]);
    let L = {
      sub: (P, ie = {}) => w(P || A, {
        skipVerification: ie.skipVerification || C,
        alreadyHaveEvent: ie.alreadyHaveEvent || W,
        id: I
      }),
      unsub: () => {
        delete a[I], delete h[I], S(["CLOSE", I]);
      },
      on: (P, ie) => {
        h[I] = h[I] || {
          event: [],
          count: [],
          eose: []
        }, h[I][P].push(ie);
      },
      off: (P, ie) => {
        let te = h[I], T = te[P].indexOf(ie);
        T >= 0 && te[P].splice(T, 1);
      },
      get events() {
        return eventsGenerator(L);
      }
    };
    return L;
  };
  function x(A, N) {
    return new Promise((C, W) => {
      if (!A.id) {
        W(new Error(`event ${A} has no id`));
        return;
      }
      let q = A.id;
      S([N, A]), p[q] = { resolve: C, reject: W };
    });
  }
  return {
    url: t,
    sub: w,
    on: (A, N) => {
      c[A].push(N), A === "connect" && (o == null ? void 0 : o.readyState) === 1 && N();
    },
    off: (A, N) => {
      let C = c[A].indexOf(N);
      C !== -1 && c[A].splice(C, 1);
    },
    list: (A, N) => new Promise((C) => {
      let W = w(A, N), q = [], I = setTimeout(() => {
        W.unsub(), C(q);
      }, n);
      W.on("eose", () => {
        W.unsub(), clearTimeout(I), C(q);
      }), W.on("event", (L) => {
        q.push(L);
      });
    }),
    get: (A, N) => new Promise((C) => {
      let W = w([A], N), q = setTimeout(() => {
        W.unsub(), C(null);
      }, r);
      W.on("event", (I) => {
        W.unsub(), clearTimeout(q), C(I);
      });
    }),
    count: (A) => new Promise((N) => {
      let C = w(A, { ...w, verb: "COUNT" }), W = setTimeout(() => {
        C.unsub(), N(null);
      }, s);
      C.on("count", (q) => {
        C.unsub(), clearTimeout(W), N(q);
      });
    }),
    async publish(A) {
      await x(A, "EVENT");
    },
    async auth(A) {
      await x(A, "AUTH");
    },
    connect: k,
    close() {
      c = newListeners(), h = {}, p = {}, (o == null ? void 0 : o.readyState) === WebSocket.OPEN && o.close();
    },
    get status() {
      return (o == null ? void 0 : o.readyState) ?? 3;
    }
  };
}
async function* eventsGenerator(t) {
  let e;
  const n = [], r = (s) => {
    e ? (e(s), e = void 0) : n.push(s);
  };
  t.on("event", r);
  try {
    for (; ; )
      n.length > 0 ? yield n.shift() : yield await new Promise((o) => {
        e = o;
      });
  } finally {
    t.off("event", r);
  }
}
var nip19_exports = {};
__export(nip19_exports, {
  BECH32_REGEX: () => BECH32_REGEX$1,
  decode: () => decode,
  naddrEncode: () => naddrEncode,
  neventEncode: () => neventEncode,
  noteEncode: () => noteEncode,
  nprofileEncode: () => nprofileEncode,
  npubEncode: () => npubEncode,
  nrelayEncode: () => nrelayEncode,
  nsecEncode: () => nsecEncode
});
var Bech32MaxSize = 5e3, BECH32_REGEX$1 = /[\x21-\x7E]{1,83}1[023456789acdefghjklmnpqrstuvwxyz]{6,}/;
function integerToUint8Array(t) {
  const e = new Uint8Array(4);
  return e[0] = t >> 24 & 255, e[1] = t >> 16 & 255, e[2] = t >> 8 & 255, e[3] = t & 255, e;
}
function decode(t) {
  var s, o, a, c, h, p, g, y;
  let { prefix: e, words: n } = bech32.decode(t, Bech32MaxSize), r = new Uint8Array(bech32.fromWords(n));
  switch (e) {
    case "nprofile": {
      let $ = parseTLV(r);
      if (!((s = $[0]) != null && s[0]))
        throw new Error("missing TLV 0 for nprofile");
      if ($[0][0].length !== 32)
        throw new Error("TLV 0 should be 32 bytes");
      return {
        type: "nprofile",
        data: {
          pubkey: bytesToHex$4($[0][0]),
          relays: $[1] ? $[1].map((k) => utf8Decoder.decode(k)) : []
        }
      };
    }
    case "nevent": {
      let $ = parseTLV(r);
      if (!((o = $[0]) != null && o[0]))
        throw new Error("missing TLV 0 for nevent");
      if ($[0][0].length !== 32)
        throw new Error("TLV 0 should be 32 bytes");
      if ($[2] && $[2][0].length !== 32)
        throw new Error("TLV 2 should be 32 bytes");
      if ($[3] && $[3][0].length !== 4)
        throw new Error("TLV 3 should be 4 bytes");
      return {
        type: "nevent",
        data: {
          id: bytesToHex$4($[0][0]),
          relays: $[1] ? $[1].map((k) => utf8Decoder.decode(k)) : [],
          author: (a = $[2]) != null && a[0] ? bytesToHex$4($[2][0]) : void 0,
          kind: (c = $[3]) != null && c[0] ? parseInt(bytesToHex$4($[3][0]), 16) : void 0
        }
      };
    }
    case "naddr": {
      let $ = parseTLV(r);
      if (!((h = $[0]) != null && h[0]))
        throw new Error("missing TLV 0 for naddr");
      if (!((p = $[2]) != null && p[0]))
        throw new Error("missing TLV 2 for naddr");
      if ($[2][0].length !== 32)
        throw new Error("TLV 2 should be 32 bytes");
      if (!((g = $[3]) != null && g[0]))
        throw new Error("missing TLV 3 for naddr");
      if ($[3][0].length !== 4)
        throw new Error("TLV 3 should be 4 bytes");
      return {
        type: "naddr",
        data: {
          identifier: utf8Decoder.decode($[0][0]),
          pubkey: bytesToHex$4($[2][0]),
          kind: parseInt(bytesToHex$4($[3][0]), 16),
          relays: $[1] ? $[1].map((k) => utf8Decoder.decode(k)) : []
        }
      };
    }
    case "nrelay": {
      let $ = parseTLV(r);
      if (!((y = $[0]) != null && y[0]))
        throw new Error("missing TLV 0 for nrelay");
      return {
        type: "nrelay",
        data: utf8Decoder.decode($[0][0])
      };
    }
    case "nsec":
    case "npub":
    case "note":
      return { type: e, data: bytesToHex$4(r) };
    default:
      throw new Error(`unknown prefix ${e}`);
  }
}
function parseTLV(t) {
  let e = {}, n = t;
  for (; n.length > 0; ) {
    let r = n[0], s = n[1];
    if (!s)
      throw new Error(`malformed TLV ${r}`);
    let o = n.slice(2, 2 + s);
    if (n = n.slice(2 + s), o.length < s)
      throw new Error(`not enough data to read on TLV ${r}`);
    e[r] = e[r] || [], e[r].push(o);
  }
  return e;
}
function nsecEncode(t) {
  return encodeBytes("nsec", t);
}
function npubEncode(t) {
  return encodeBytes("npub", t);
}
function noteEncode(t) {
  return encodeBytes("note", t);
}
function encodeBech32(t, e) {
  let n = bech32.toWords(e);
  return bech32.encode(t, n, Bech32MaxSize);
}
function encodeBytes(t, e) {
  let n = hexToBytes$4(e);
  return encodeBech32(t, n);
}
function nprofileEncode(t) {
  let e = encodeTLV({
    0: [hexToBytes$4(t.pubkey)],
    1: (t.relays || []).map((n) => utf8Encoder.encode(n))
  });
  return encodeBech32("nprofile", e);
}
function neventEncode(t) {
  let e;
  t.kind != null && (e = integerToUint8Array(t.kind));
  let n = encodeTLV({
    0: [hexToBytes$4(t.id)],
    1: (t.relays || []).map((r) => utf8Encoder.encode(r)),
    2: t.author ? [hexToBytes$4(t.author)] : [],
    3: e ? [new Uint8Array(e)] : []
  });
  return encodeBech32("nevent", n);
}
function naddrEncode(t) {
  let e = new ArrayBuffer(4);
  new DataView(e).setUint32(0, t.kind, !1);
  let n = encodeTLV({
    0: [utf8Encoder.encode(t.identifier)],
    1: (t.relays || []).map((r) => utf8Encoder.encode(r)),
    2: [hexToBytes$4(t.pubkey)],
    3: [new Uint8Array(e)]
  });
  return encodeBech32("naddr", n);
}
function nrelayEncode(t) {
  let e = encodeTLV({
    0: [utf8Encoder.encode(t)]
  });
  return encodeBech32("nrelay", e);
}
function encodeTLV(t) {
  let e = [];
  return Object.entries(t).forEach(([n, r]) => {
    r.forEach((s) => {
      let o = new Uint8Array(s.length + 2);
      o.set([parseInt(n)], 0), o.set([s.length], 1), o.set(s, 2), e.push(o);
    });
  }), concatBytes$5(...e);
}
var nip04_exports = {};
__export(nip04_exports, {
  decrypt: () => decrypt$1,
  encrypt: () => encrypt$1
});
typeof crypto < "u" && !crypto.subtle && crypto.webcrypto && (crypto.subtle = crypto.webcrypto.subtle);
async function encrypt$1(t, e, n) {
  const r = secp256k1$2.getSharedSecret(t, "02" + e), s = getNormalizedX(r);
  let o = Uint8Array.from(randomBytes$2(16)), a = utf8Encoder.encode(n), c = await crypto.subtle.importKey("raw", s, { name: "AES-CBC" }, !1, ["encrypt"]), h = await crypto.subtle.encrypt({ name: "AES-CBC", iv: o }, c, a), p = base64.encode(new Uint8Array(h)), g = base64.encode(new Uint8Array(o.buffer));
  return `${p}?iv=${g}`;
}
async function decrypt$1(t, e, n) {
  let [r, s] = n.split("?iv="), o = secp256k1$2.getSharedSecret(t, "02" + e), a = getNormalizedX(o), c = await crypto.subtle.importKey("raw", a, { name: "AES-CBC" }, !1, ["decrypt"]), h = base64.decode(r), p = base64.decode(s), g = await crypto.subtle.decrypt({ name: "AES-CBC", iv: p }, c, h);
  return utf8Decoder.decode(g);
}
function getNormalizedX(t) {
  return t.slice(1, 33);
}
var nip05_exports = {};
__export(nip05_exports, {
  NIP05_REGEX: () => NIP05_REGEX$1,
  queryProfile: () => queryProfile,
  searchDomain: () => searchDomain,
  useFetchImplementation: () => useFetchImplementation
});
var NIP05_REGEX$1 = /^(?:([\w.+-]+)@)?([\w.-]+)$/, _fetch;
try {
  _fetch = fetch;
} catch {
}
function useFetchImplementation(t) {
  _fetch = t;
}
async function searchDomain(t, e = "") {
  try {
    return (await (await _fetch(`https://${t}/.well-known/nostr.json?name=${e}`)).json()).names;
  } catch {
    return {};
  }
}
async function queryProfile(t) {
  const e = t.match(NIP05_REGEX$1);
  if (!e)
    return null;
  const [n, r = "_", s] = e;
  try {
    const o = await _fetch(`https://${s}/.well-known/nostr.json?name=${r}`), { names: a, relays: c } = parseNIP05Result$1(await o.json()), h = a[r];
    return h ? { pubkey: h, relays: c == null ? void 0 : c[h] } : null;
  } catch {
    return null;
  }
}
function parseNIP05Result$1(t) {
  const e = {
    names: {}
  };
  for (const [n, r] of Object.entries(t.names))
    typeof n == "string" && typeof r == "string" && (e.names[n] = r);
  if (t.relays) {
    e.relays = {};
    for (const [n, r] of Object.entries(t.relays))
      typeof n == "string" && Array.isArray(r) && (e.relays[n] = r.filter((s) => typeof s == "string"));
  }
  return e;
}
var nip06_exports = {};
__export(nip06_exports, {
  generateSeedWords: () => generateSeedWords,
  privateKeyFromSeedWords: () => privateKeyFromSeedWords,
  validateWords: () => validateWords
});
function privateKeyFromSeedWords(t, e) {
  let r = HDKey.fromMasterSeed(mnemonicToSeedSync(t, e)).derive("m/44'/1237'/0'/0/0").privateKey;
  if (!r)
    throw new Error("could not derive private key");
  return bytesToHex$4(r);
}
function generateSeedWords() {
  return generateMnemonic(wordlist);
}
function validateWords(t) {
  return validateMnemonic(t, wordlist);
}
var nip10_exports = {};
__export(nip10_exports, {
  parse: () => parse
});
function parse(t) {
  const e = {
    reply: void 0,
    root: void 0,
    mentions: [],
    profiles: []
  }, n = [];
  for (const r of t.tags)
    r[0] === "e" && r[1] && n.push(r), r[0] === "p" && r[1] && e.profiles.push({
      pubkey: r[1],
      relays: r[2] ? [r[2]] : []
    });
  for (let r = 0; r < n.length; r++) {
    const s = n[r], [o, a, c, h] = s, p = {
      id: a,
      relays: c ? [c] : []
    }, g = r === 0, y = r === n.length - 1;
    if (h === "root") {
      e.root = p;
      continue;
    }
    if (h === "reply") {
      e.reply = p;
      continue;
    }
    if (h === "mention") {
      e.mentions.push(p);
      continue;
    }
    if (g) {
      e.root = p;
      continue;
    }
    if (y) {
      e.reply = p;
      continue;
    }
    e.mentions.push(p);
  }
  return e;
}
var nip13_exports = {};
__export(nip13_exports, {
  getPow: () => getPow,
  minePow: () => minePow
});
function getPow(t) {
  let e = 0;
  for (let n = 0; n < t.length; n++) {
    const r = parseInt(t[n], 16);
    if (r === 0)
      e += 4;
    else {
      e += Math.clz32(r) - 28;
      break;
    }
  }
  return e;
}
function minePow(t, e) {
  let n = 0;
  const r = t, s = ["nonce", n.toString(), e.toString()];
  for (r.tags.push(s); ; ) {
    const o = Math.floor((/* @__PURE__ */ new Date()).getTime() / 1e3);
    if (o !== r.created_at && (n = 0, r.created_at = o), s[1] = (++n).toString(), r.id = getEventHash$1(r), getPow(r.id) >= e)
      break;
  }
  return r;
}
var nip18_exports = {};
__export(nip18_exports, {
  finishRepostEvent: () => finishRepostEvent,
  getRepostedEvent: () => getRepostedEvent,
  getRepostedEventPointer: () => getRepostedEventPointer
});
function finishRepostEvent(t, e, n, r) {
  return finishEvent(
    {
      kind: 6,
      tags: [...t.tags ?? [], ["e", e.id, n], ["p", e.pubkey]],
      content: t.content === "" ? "" : JSON.stringify(e),
      created_at: t.created_at
    },
    r
  );
}
function getRepostedEventPointer(t) {
  if (t.kind !== 6)
    return;
  let e, n;
  for (let r = t.tags.length - 1; r >= 0 && (e === void 0 || n === void 0); r--) {
    const s = t.tags[r];
    s.length >= 2 && (s[0] === "e" && e === void 0 ? e = s : s[0] === "p" && n === void 0 && (n = s));
  }
  if (e !== void 0)
    return {
      id: e[1],
      relays: [e[2], n == null ? void 0 : n[2]].filter((r) => typeof r == "string"),
      author: n == null ? void 0 : n[1]
    };
}
function getRepostedEvent(t, { skipVerification: e } = {}) {
  const n = getRepostedEventPointer(t);
  if (n === void 0 || t.content === "")
    return;
  let r;
  try {
    r = JSON.parse(t.content);
  } catch {
    return;
  }
  if (r.id === n.id && !(!e && !verifySignature$1(r)))
    return r;
}
var nip21_exports = {};
__export(nip21_exports, {
  NOSTR_URI_REGEX: () => NOSTR_URI_REGEX,
  parse: () => parse2,
  test: () => test
});
var NOSTR_URI_REGEX = new RegExp(`nostr:(${BECH32_REGEX$1.source})`);
function test(t) {
  return typeof t == "string" && new RegExp(`^${NOSTR_URI_REGEX.source}$`).test(t);
}
function parse2(t) {
  const e = t.match(new RegExp(`^${NOSTR_URI_REGEX.source}$`));
  if (!e)
    throw new Error(`Invalid Nostr URI: ${t}`);
  return {
    uri: e[0],
    value: e[1],
    decoded: decode(e[1])
  };
}
var nip25_exports = {};
__export(nip25_exports, {
  finishReactionEvent: () => finishReactionEvent,
  getReactedEventPointer: () => getReactedEventPointer
});
function finishReactionEvent(t, e, n) {
  const r = e.tags.filter((s) => s.length >= 2 && (s[0] === "e" || s[0] === "p"));
  return finishEvent(
    {
      ...t,
      kind: 7,
      tags: [...t.tags ?? [], ...r, ["e", e.id], ["p", e.pubkey]],
      content: t.content ?? "+"
    },
    n
  );
}
function getReactedEventPointer(t) {
  if (t.kind !== 7)
    return;
  let e, n;
  for (let r = t.tags.length - 1; r >= 0 && (e === void 0 || n === void 0); r--) {
    const s = t.tags[r];
    s.length >= 2 && (s[0] === "e" && e === void 0 ? e = s : s[0] === "p" && n === void 0 && (n = s));
  }
  if (!(e === void 0 || n === void 0))
    return {
      id: e[1],
      relays: [e[2], n[2]].filter((r) => r !== void 0),
      author: n[1]
    };
}
var nip26_exports = {};
__export(nip26_exports, {
  createDelegation: () => createDelegation,
  getDelegator: () => getDelegator
});
function createDelegation(t, e) {
  let n = [];
  (e.kind || -1) >= 0 && n.push(`kind=${e.kind}`), e.until && n.push(`created_at<${e.until}`), e.since && n.push(`created_at>${e.since}`);
  let r = n.join("&");
  if (r === "")
    throw new Error("refusing to create a delegation without any conditions");
  let s = sha256$4(utf8Encoder.encode(`nostr:delegation:${e.pubkey}:${r}`)), o = bytesToHex$4(schnorr$1.sign(s, t));
  return {
    from: getPublicKey(t),
    to: e.pubkey,
    cond: r,
    sig: o
  };
}
function getDelegator(t) {
  let e = t.tags.find((c) => c[0] === "delegation" && c.length >= 4);
  if (!e)
    return null;
  let n = e[1], r = e[2], s = e[3], o = r.split("&");
  for (let c = 0; c < o.length; c++) {
    let [h, p, g] = o[c].split(/\b/);
    if (!(h === "kind" && p === "=" && t.kind === parseInt(g))) {
      if (h === "created_at" && p === "<" && t.created_at < parseInt(g))
        continue;
      if (h === "created_at" && p === ">" && t.created_at > parseInt(g))
        continue;
      return null;
    }
  }
  let a = sha256$4(utf8Encoder.encode(`nostr:delegation:${t.pubkey}:${r}`));
  return schnorr$1.verify(s, a, n) ? n : null;
}
var nip27_exports = {};
__export(nip27_exports, {
  matchAll: () => matchAll,
  regex: () => regex,
  replaceAll: () => replaceAll
});
var regex = () => new RegExp(`\\b${NOSTR_URI_REGEX.source}\\b`, "g");
function* matchAll(t) {
  const e = t.matchAll(regex());
  for (const n of e)
    try {
      const [r, s] = n;
      yield {
        uri: r,
        value: s,
        decoded: decode(s),
        start: n.index,
        end: n.index + r.length
      };
    } catch {
    }
}
function replaceAll(t, e) {
  return t.replaceAll(regex(), (n, r) => e({
    uri: n,
    value: r,
    decoded: decode(r)
  }));
}
var nip28_exports = {};
__export(nip28_exports, {
  channelCreateEvent: () => channelCreateEvent,
  channelHideMessageEvent: () => channelHideMessageEvent,
  channelMessageEvent: () => channelMessageEvent,
  channelMetadataEvent: () => channelMetadataEvent,
  channelMuteUserEvent: () => channelMuteUserEvent
});
var channelCreateEvent = (t, e) => {
  let n;
  if (typeof t.content == "object")
    n = JSON.stringify(t.content);
  else if (typeof t.content == "string")
    n = t.content;
  else
    return;
  return finishEvent(
    {
      kind: 40,
      tags: [...t.tags ?? []],
      content: n,
      created_at: t.created_at
    },
    e
  );
}, channelMetadataEvent = (t, e) => {
  let n;
  if (typeof t.content == "object")
    n = JSON.stringify(t.content);
  else if (typeof t.content == "string")
    n = t.content;
  else
    return;
  return finishEvent(
    {
      kind: 41,
      tags: [["e", t.channel_create_event_id], ...t.tags ?? []],
      content: n,
      created_at: t.created_at
    },
    e
  );
}, channelMessageEvent = (t, e) => {
  const n = [["e", t.channel_create_event_id, t.relay_url, "root"]];
  return t.reply_to_channel_message_event_id && n.push(["e", t.reply_to_channel_message_event_id, t.relay_url, "reply"]), finishEvent(
    {
      kind: 42,
      tags: [...n, ...t.tags ?? []],
      content: t.content,
      created_at: t.created_at
    },
    e
  );
}, channelHideMessageEvent = (t, e) => {
  let n;
  if (typeof t.content == "object")
    n = JSON.stringify(t.content);
  else if (typeof t.content == "string")
    n = t.content;
  else
    return;
  return finishEvent(
    {
      kind: 43,
      tags: [["e", t.channel_message_event_id], ...t.tags ?? []],
      content: n,
      created_at: t.created_at
    },
    e
  );
}, channelMuteUserEvent = (t, e) => {
  let n;
  if (typeof t.content == "object")
    n = JSON.stringify(t.content);
  else if (typeof t.content == "string")
    n = t.content;
  else
    return;
  return finishEvent(
    {
      kind: 44,
      tags: [["p", t.pubkey_to_mute], ...t.tags ?? []],
      content: n,
      created_at: t.created_at
    },
    e
  );
}, nip39_exports = {};
__export(nip39_exports, {
  useFetchImplementation: () => useFetchImplementation2,
  validateGithub: () => validateGithub
});
var _fetch2;
try {
  _fetch2 = fetch;
} catch {
}
function useFetchImplementation2(t) {
  _fetch2 = t;
}
async function validateGithub(t, e, n) {
  try {
    return await (await _fetch2(`https://gist.github.com/${e}/${n}/raw`)).text() === `Verifying that I control the following Nostr public key: ${t}`;
  } catch {
    return !1;
  }
}
var nip42_exports = {};
__export(nip42_exports, {
  authenticate: () => authenticate
});
var authenticate = async ({
  challenge: t,
  relay: e,
  sign: n
}) => {
  const r = {
    kind: 22242,
    created_at: Math.floor(Date.now() / 1e3),
    tags: [
      ["relay", e.url],
      ["challenge", t]
    ],
    content: ""
  };
  return e.auth(await n(r));
}, nip44_exports = {};
__export(nip44_exports, {
  decrypt: () => decrypt2,
  encrypt: () => encrypt2,
  utils: () => utils$1
});
var utils$1 = {
  v2: {
    maxPlaintextSize: 65408,
    minCiphertextSize: 100,
    maxCiphertextSize: 102400,
    getConversationKey(t, e) {
      return secp256k1$2.getSharedSecret(t, "02" + e).subarray(1, 33);
    },
    getMessageKeys(t, e) {
      const n = hkdf(sha256$4, t, e, "nip44-v2", 76);
      return {
        encryption: n.subarray(0, 32),
        nonce: n.subarray(32, 44),
        auth: n.subarray(44, 76)
      };
    },
    calcPadding(t) {
      if (!Number.isSafeInteger(t) || t < 0)
        throw new Error("expected positive integer");
      if (t <= 32)
        return 32;
      const e = 1 << Math.floor(Math.log2(t - 1)) + 1, n = e <= 256 ? 32 : e / 8;
      return n * (Math.floor((t - 1) / n) + 1);
    },
    pad(t) {
      const e = utf8Encoder.encode(t), n = e.length;
      if (n < 1 || n >= utils$1.v2.maxPlaintextSize)
        throw new Error("invalid plaintext length: must be between 1b and 64KB");
      const r = utils$1.v2.calcPadding(n), s = new Uint8Array(r - n), o = new Uint8Array(2);
      return new DataView(o.buffer).setUint16(0, n), concatBytes$5(o, e, s);
    },
    unpad(t) {
      const e = new DataView(t.buffer).getUint16(0), n = t.subarray(2, 2 + e);
      if (e === 0 || n.length !== e || t.length !== 2 + utils$1.v2.calcPadding(e))
        throw new Error("invalid padding");
      return utf8Decoder.decode(n);
    }
  }
};
function encrypt2(t, e, n = {}) {
  const r = n.version ?? 2;
  if (r !== 2)
    throw new Error("unknown encryption version " + r);
  const s = n.salt ?? randomBytes$2(32);
  ensureBytes$1(s, 32);
  const o = utils$1.v2.getMessageKeys(t, s), a = utils$1.v2.pad(e), c = chacha20(o.encryption, o.nonce, a), h = hmac$4(sha256$4, o.auth, c);
  return base64.encode(concatBytes$5(new Uint8Array([r]), s, c, h));
}
function decrypt2(t, e) {
  const n = utils$1.v2;
  ensureBytes$1(t, 32);
  const r = e.length;
  if (r < n.minCiphertextSize || r >= n.maxCiphertextSize)
    throw new Error("invalid ciphertext length: " + r);
  if (e[0] === "#")
    throw new Error("unknown encryption version");
  let s;
  try {
    s = base64.decode(e);
  } catch ($) {
    throw new Error("invalid base64: " + $.message);
  }
  const o = s.subarray(0, 1)[0];
  if (o !== 2)
    throw new Error("unknown encryption version " + o);
  const a = s.subarray(1, 33), c = s.subarray(33, -32), h = s.subarray(-32), p = n.getMessageKeys(t, a), g = hmac$4(sha256$4, p.auth, c);
  if (!equalBytes$1(g, h))
    throw new Error("invalid MAC");
  const y = chacha20(p.encryption, p.nonce, c);
  return n.unpad(y);
}
var nip47_exports = {};
__export(nip47_exports, {
  makeNwcRequestEvent: () => makeNwcRequestEvent,
  parseConnectionString: () => parseConnectionString
});
function parseConnectionString(t) {
  const { pathname: e, searchParams: n } = new URL(t), r = e, s = n.get("relay"), o = n.get("secret");
  if (!r || !s || !o)
    throw new Error("invalid connection string");
  return { pubkey: r, relay: s, secret: o };
}
async function makeNwcRequestEvent({
  pubkey: t,
  secret: e,
  invoice: n
}) {
  const s = await encrypt$1(e, t, JSON.stringify({
    method: "pay_invoice",
    params: {
      invoice: n
    }
  })), o = {
    kind: 23194,
    created_at: Math.round(Date.now() / 1e3),
    content: s,
    tags: [["p", t]]
  };
  return finishEvent(o, e);
}
var nip57_exports = {};
__export(nip57_exports, {
  getZapEndpoint: () => getZapEndpoint,
  makeZapReceipt: () => makeZapReceipt,
  makeZapRequest: () => makeZapRequest,
  useFetchImplementation: () => useFetchImplementation3,
  validateZapRequest: () => validateZapRequest
});
var _fetch3;
try {
  _fetch3 = fetch;
} catch {
}
function useFetchImplementation3(t) {
  _fetch3 = t;
}
async function getZapEndpoint(t) {
  try {
    let e = "", { lud06: n, lud16: r } = JSON.parse(t.content);
    if (n) {
      let { words: a } = bech32.decode(n, 1e3), c = bech32.fromWords(a);
      e = utf8Decoder.decode(c);
    } else if (r) {
      let [a, c] = r.split("@");
      e = `https://${c}/.well-known/lnurlp/${a}`;
    } else
      return null;
    let o = await (await _fetch3(e)).json();
    if (o.allowsNostr && o.nostrPubkey)
      return o.callback;
  } catch {
  }
  return null;
}
function makeZapRequest({
  profile: t,
  event: e,
  amount: n,
  relays: r,
  comment: s = ""
}) {
  if (!n)
    throw new Error("amount not given");
  if (!t)
    throw new Error("profile not given");
  let o = {
    kind: 9734,
    created_at: Math.round(Date.now() / 1e3),
    content: s,
    tags: [
      ["p", t],
      ["amount", n.toString()],
      ["relays", ...r]
    ]
  };
  return e && o.tags.push(["e", e]), o;
}
function validateZapRequest(t) {
  let e;
  try {
    e = JSON.parse(t);
  } catch {
    return "Invalid zap request JSON.";
  }
  if (!validateEvent(e))
    return "Zap request is not a valid Nostr event.";
  if (!verifySignature$1(e))
    return "Invalid signature on zap request.";
  let n = e.tags.find(([o, a]) => o === "p" && a);
  if (!n)
    return "Zap request doesn't have a 'p' tag.";
  if (!n[1].match(/^[a-f0-9]{64}$/))
    return "Zap request 'p' tag is not valid hex.";
  let r = e.tags.find(([o, a]) => o === "e" && a);
  return r && !r[1].match(/^[a-f0-9]{64}$/) ? "Zap request 'e' tag is not valid hex." : e.tags.find(([o, a]) => o === "relays" && a) ? null : "Zap request doesn't have a 'relays' tag.";
}
function makeZapReceipt({
  zapRequest: t,
  preimage: e,
  bolt11: n,
  paidAt: r
}) {
  let o = JSON.parse(t).tags.filter(([c]) => c === "e" || c === "p" || c === "a"), a = {
    kind: 9735,
    created_at: Math.round(r.getTime() / 1e3),
    content: "",
    tags: [...o, ["bolt11", n], ["description", t]]
  };
  return e && a.tags.push(["preimage", e]), a;
}
var nip98_exports = {};
__export(nip98_exports, {
  getToken: () => getToken,
  unpackEventFromToken: () => unpackEventFromToken,
  validateEvent: () => validateEvent2,
  validateToken: () => validateToken
});
var _authorizationScheme = "Nostr ";
async function getToken(t, e, n, r = !1) {
  if (!t || !e)
    throw new Error("Missing loginUrl or httpMethod");
  const s = getBlankEvent(
    27235
    /* HttpAuth */
  );
  s.tags = [
    ["u", t],
    ["method", e]
  ], s.created_at = Math.round((/* @__PURE__ */ new Date()).getTime() / 1e3);
  const o = await n(s);
  return (r ? _authorizationScheme : "") + base64.encode(utf8Encoder.encode(JSON.stringify(o)));
}
async function validateToken(t, e, n) {
  const r = await unpackEventFromToken(t).catch((o) => {
    throw o;
  });
  return await validateEvent2(r, e, n).catch((o) => {
    throw o;
  });
}
async function unpackEventFromToken(t) {
  if (!t)
    throw new Error("Missing token");
  t = t.replace(_authorizationScheme, "");
  const e = utf8Decoder.decode(base64.decode(t));
  if (!e || e.length === 0 || !e.startsWith("{"))
    throw new Error("Invalid token");
  return JSON.parse(e);
}
async function validateEvent2(t, e, n) {
  if (!t)
    throw new Error("Invalid nostr event");
  if (!verifySignature$1(t))
    throw new Error("Invalid nostr event, signature invalid");
  if (t.kind !== 27235)
    throw new Error("Invalid nostr event, kind invalid");
  if (!t.created_at)
    throw new Error("Invalid nostr event, created_at invalid");
  if (Math.round((/* @__PURE__ */ new Date()).getTime() / 1e3) - t.created_at > 60)
    throw new Error("Invalid nostr event, expired");
  const r = t.tags.find((o) => o[0] === "u");
  if ((r == null ? void 0 : r.length) !== 1 && (r == null ? void 0 : r[1]) !== e)
    throw new Error("Invalid nostr event, url tag invalid");
  const s = t.tags.find((o) => o[0] === "method");
  if ((s == null ? void 0 : s.length) !== 1 && (s == null ? void 0 : s[1].toLowerCase()) !== n.toLowerCase())
    throw new Error("Invalid nostr event, method tag invalid");
  return !0;
}
var commonjsGlobal = typeof globalThis < "u" ? globalThis : typeof window < "u" ? window : typeof global < "u" ? global : typeof self < "u" ? self : {};
function getDefaultExportFromCjs(t) {
  return t && t.__esModule && Object.prototype.hasOwnProperty.call(t, "default") ? t.default : t;
}
var lib$1 = {}, types = {};
Object.defineProperty(types, "__esModule", { value: !0 });
var ee = {}, taskCollection$1 = {}, taskCollection = {}, bakeCollection = {};
(function(exports) {
  Object.defineProperty(exports, "__esModule", { value: !0 }), exports.bakeCollectionVariadic = exports.bakeCollectionAwait = exports.bakeCollection = exports.BAKED_EMPTY_FUNC = void 0, exports.BAKED_EMPTY_FUNC = function() {
  };
  var FORLOOP_FALLBACK = 1500;
  function generateArgsDefCode(t) {
    var e = "";
    if (t === 0)
      return e;
    for (var n = 0; n < t - 1; ++n)
      e += "arg" + String(n) + ", ";
    return e += "arg" + String(t - 1), e;
  }
  function generateBodyPartsCode(t, e) {
    for (var n = "", r = "", s = 0; s < e; ++s)
      n += "var f".concat(s, " = collection[").concat(s, `];
`), r += "f".concat(s, "(").concat(t, `)
`);
    return { funcDefCode: n, funcCallCode: r };
  }
  function generateBodyPartsVariadicCode(t) {
    for (var e = "", n = "", r = 0; r < t; ++r)
      e += "var f".concat(r, " = collection[").concat(r, `];
`), n += "f".concat(r, `.apply(undefined, arguments)
`);
    return { funcDefCode: e, funcCallCode: n };
  }
  function bakeCollection(collection, fixedArgsNum) {
    if (collection.length === 0)
      return exports.BAKED_EMPTY_FUNC;
    if (collection.length === 1)
      return collection[0];
    var funcFactoryCode;
    if (collection.length < FORLOOP_FALLBACK) {
      var argsDefCode = generateArgsDefCode(fixedArgsNum), _a = generateBodyPartsCode(argsDefCode, collection.length), funcDefCode = _a.funcDefCode, funcCallCode = _a.funcCallCode;
      funcFactoryCode = `(function(collection) {
            `.concat(funcDefCode, `
            collection = undefined;
            return (function(`).concat(argsDefCode, `) {
                `).concat(funcCallCode, `
            });
        })`);
    } else {
      var argsDefCode = generateArgsDefCode(fixedArgsNum);
      collection.length % 10 === 0 ? funcFactoryCode = `(function(collection) {
                return (function(`.concat(argsDefCode, `) {
                    for (var i = 0; i < collection.length; i += 10) {
                        collection[i](`).concat(argsDefCode, `);
                        collection[i+1](`).concat(argsDefCode, `);
                        collection[i+2](`).concat(argsDefCode, `);
                        collection[i+3](`).concat(argsDefCode, `);
                        collection[i+4](`).concat(argsDefCode, `);
                        collection[i+5](`).concat(argsDefCode, `);
                        collection[i+6](`).concat(argsDefCode, `);
                        collection[i+7](`).concat(argsDefCode, `);
                        collection[i+8](`).concat(argsDefCode, `);
                        collection[i+9](`).concat(argsDefCode, `);
                    }
                });
            })`) : collection.length % 4 === 0 ? funcFactoryCode = `(function(collection) {
                return (function(`.concat(argsDefCode, `) {
                    for (var i = 0; i < collection.length; i += 4) {
                        collection[i](`).concat(argsDefCode, `);
                        collection[i+1](`).concat(argsDefCode, `);
                        collection[i+2](`).concat(argsDefCode, `);
                        collection[i+3](`).concat(argsDefCode, `);
                    }
                });
            })`) : collection.length % 3 === 0 ? funcFactoryCode = `(function(collection) {
                return (function(`.concat(argsDefCode, `) {
                    for (var i = 0; i < collection.length; i += 3) {
                        collection[i](`).concat(argsDefCode, `);
                        collection[i+1](`).concat(argsDefCode, `);
                        collection[i+2](`).concat(argsDefCode, `);
                    }
                });
            })`) : funcFactoryCode = `(function(collection) {
                return (function(`.concat(argsDefCode, `) {
                    for (var i = 0; i < collection.length; ++i) {
                        collection[i](`).concat(argsDefCode, `);
                    }
                });
            })`);
    }
    {
      var funcFactory = eval(funcFactoryCode);
      return funcFactory(collection);
    }
  }
  exports.bakeCollection = bakeCollection;
  function bakeCollectionAwait(collection, fixedArgsNum) {
    if (collection.length === 0)
      return exports.BAKED_EMPTY_FUNC;
    if (collection.length === 1)
      return collection[0];
    var funcFactoryCode;
    if (collection.length < FORLOOP_FALLBACK) {
      var argsDefCode = generateArgsDefCode(fixedArgsNum), _a = generateBodyPartsCode(argsDefCode, collection.length), funcDefCode = _a.funcDefCode, funcCallCode = _a.funcCallCode;
      funcFactoryCode = `(function(collection) {
            `.concat(funcDefCode, `
            collection = undefined;
            return (function(`).concat(argsDefCode, `) {
                return Promise.all([ `).concat(funcCallCode, ` ]);
            });
        })`);
    } else {
      var argsDefCode = generateArgsDefCode(fixedArgsNum);
      funcFactoryCode = `(function(collection) {
            return (function(`.concat(argsDefCode, `) {
                var promises = Array(collection.length);
                for (var i = 0; i < collection.length; ++i) {
                    promises[i] = collection[i](`).concat(argsDefCode, `);
                }
                return Promise.all(promises);
            });
        })`);
    }
    {
      var funcFactory = eval(funcFactoryCode);
      return funcFactory(collection);
    }
  }
  exports.bakeCollectionAwait = bakeCollectionAwait;
  function bakeCollectionVariadic(collection) {
    if (collection.length === 0)
      return exports.BAKED_EMPTY_FUNC;
    if (collection.length === 1)
      return collection[0];
    var funcFactoryCode;
    if (collection.length < FORLOOP_FALLBACK) {
      var _a = generateBodyPartsVariadicCode(collection.length), funcDefCode = _a.funcDefCode, funcCallCode = _a.funcCallCode;
      funcFactoryCode = `(function(collection) {
            `.concat(funcDefCode, `
            collection = undefined;
            return (function() {
                `).concat(funcCallCode, `
            });
        })`);
    } else
      funcFactoryCode = `(function(collection) {
            return (function() {
                for (var i = 0; i < collection.length; ++i) {
                    collection[i].apply(undefined, arguments);
                }
            });
        })`;
    {
      var funcFactory = eval(funcFactoryCode);
      return funcFactory(collection);
    }
  }
  exports.bakeCollectionVariadic = bakeCollectionVariadic;
})(bakeCollection);
var __spreadArray$1 = commonjsGlobal && commonjsGlobal.__spreadArray || function(t, e, n) {
  if (n || arguments.length === 2)
    for (var r = 0, s = e.length, o; r < s; r++)
      (o || !(r in e)) && (o || (o = Array.prototype.slice.call(e, 0, r)), o[r] = e[r]);
  return t.concat(o || Array.prototype.slice.call(e));
};
Object.defineProperty(taskCollection, "__esModule", { value: !0 });
taskCollection.TaskCollection = taskCollection._fast_remove_single = void 0;
var bake_collection_1 = bakeCollection;
function push_norebuild(t, e) {
  var n = this.length;
  if (n > 1)
    if (e) {
      var r;
      (r = this._tasks).push.apply(r, arguments), this.length += arguments.length;
    } else
      this._tasks.push(t), this.length++;
  else if (e) {
    if (n === 1) {
      var s = Array(1 + arguments.length);
      s.push(s), s.push.apply(s, arguments), this._tasks = s;
    } else {
      var s = Array(arguments.length);
      s.push.apply(s, arguments), this._tasks = s;
    }
    this.length += arguments.length;
  } else
    n === 1 ? this._tasks = [this._tasks, t] : this._tasks = t, this.length++;
}
function push_rebuild(t, e) {
  var n = this.length;
  if (n > 1)
    if (e) {
      var r;
      (r = this._tasks).push.apply(r, arguments), this.length += arguments.length;
    } else
      this._tasks.push(t), this.length++;
  else if (e) {
    if (n === 1) {
      var s = Array(1 + arguments.length);
      s.push(s), s.push.apply(s, arguments), this._tasks = s;
    } else {
      var s = Array(arguments.length);
      s.push.apply(s, arguments), this._tasks = s;
    }
    this.length += arguments.length;
  } else
    n === 1 ? this._tasks = [this._tasks, t] : this._tasks = t, this.length++;
  this.firstEmitBuildStrategy ? this.call = rebuild_on_first_call : this.rebuild();
}
function _fast_remove_single(t, e) {
  e !== -1 && (e === 0 ? t.shift() : e === t.length - 1 ? t.length = t.length - 1 : t.splice(e, 1));
}
taskCollection._fast_remove_single = _fast_remove_single;
function removeLast_norebuild(t) {
  this.length !== 0 && (this.length === 1 ? this._tasks === t && (this.length = 0) : (_fast_remove_single(this._tasks, this._tasks.lastIndexOf(t)), this._tasks.length === 1 ? (this._tasks = this._tasks[0], this.length = 1) : this.length = this._tasks.length));
}
function removeLast_rebuild(t) {
  if (this.length !== 0) {
    if (this.length === 1)
      if (this._tasks === t && (this.length = 0), this.firstEmitBuildStrategy) {
        this.call = bake_collection_1.BAKED_EMPTY_FUNC;
        return;
      } else {
        this.rebuild();
        return;
      }
    else
      _fast_remove_single(this._tasks, this._tasks.lastIndexOf(t)), this._tasks.length === 1 ? (this._tasks = this._tasks[0], this.length = 1) : this.length = this._tasks.length;
    this.firstEmitBuildStrategy ? this.call = rebuild_on_first_call : this.rebuild();
  }
}
function insert_norebuild(t) {
  for (var e, n = [], r = 1; r < arguments.length; r++)
    n[r - 1] = arguments[r];
  this.length === 0 ? (this._tasks = n, this.length = 1) : this.length === 1 ? (n.unshift(this._tasks), this._tasks = n, this.length = this._tasks.length) : ((e = this._tasks).splice.apply(e, __spreadArray$1([t, 0], n, !1)), this.length = this._tasks.length);
}
function insert_rebuild(t) {
  for (var e, n = [], r = 1; r < arguments.length; r++)
    n[r - 1] = arguments[r];
  this.length === 0 ? (this._tasks = n, this.length = 1) : this.length === 1 ? (n.unshift(this._tasks), this._tasks = n, this.length = this._tasks.length) : ((e = this._tasks).splice.apply(e, __spreadArray$1([t, 0], n, !1)), this.length = this._tasks.length), this.firstEmitBuildStrategy ? this.call = rebuild_on_first_call : this.rebuild();
}
function rebuild_noawait() {
  this.length === 0 ? this.call = bake_collection_1.BAKED_EMPTY_FUNC : this.length === 1 ? this.call = this._tasks : this.call = (0, bake_collection_1.bakeCollection)(this._tasks, this.argsNum);
}
function rebuild_await() {
  this.length === 0 ? this.call = bake_collection_1.BAKED_EMPTY_FUNC : this.length === 1 ? this.call = this._tasks : this.call = (0, bake_collection_1.bakeCollectionAwait)(this._tasks, this.argsNum);
}
function rebuild_on_first_call() {
  this.rebuild(), this.call.apply(void 0, arguments);
}
var TaskCollection = (
  /** @class */
  /* @__PURE__ */ function() {
    function t(e, n, r, s) {
      n === void 0 && (n = !0), r === void 0 && (r = null), s === void 0 && (s = !1), this.awaitTasks = s, this.call = bake_collection_1.BAKED_EMPTY_FUNC, this.argsNum = e, this.firstEmitBuildStrategy = !0, s ? this.rebuild = rebuild_await.bind(this) : this.rebuild = rebuild_noawait.bind(this), this.setAutoRebuild(n), r ? typeof r == "function" ? (this._tasks = r, this.length = 1) : (this._tasks = r, this.length = r.length) : (this._tasks = null, this.length = 0), n && this.rebuild();
    }
    return t;
  }()
);
taskCollection.TaskCollection = TaskCollection;
function fastClear() {
  this._tasks = null, this.length = 0, this.call = bake_collection_1.BAKED_EMPTY_FUNC;
}
function clear() {
  this._tasks = null, this.length = 0, this.call = bake_collection_1.BAKED_EMPTY_FUNC;
}
function growArgsNum(t) {
  this.argsNum < t && (this.argsNum = t, this.firstEmitBuildStrategy ? this.call = rebuild_on_first_call : this.rebuild());
}
function setAutoRebuild(t) {
  t ? (this.push = push_rebuild.bind(this), this.insert = insert_rebuild.bind(this), this.removeLast = removeLast_rebuild.bind(this)) : (this.push = push_norebuild.bind(this), this.insert = insert_norebuild.bind(this), this.removeLast = removeLast_norebuild.bind(this));
}
function tasksAsArray() {
  return this.length === 0 ? [] : this.length === 1 ? [this._tasks] : this._tasks;
}
function setTasks(t) {
  t.length === 0 ? (this.length = 0, this.call = bake_collection_1.BAKED_EMPTY_FUNC) : t.length === 1 ? (this.length = 1, this.call = t[0], this._tasks = t[0]) : (this.length = t.length, this._tasks = t, this.firstEmitBuildStrategy ? this.call = rebuild_on_first_call : this.rebuild());
}
TaskCollection.prototype.fastClear = fastClear;
TaskCollection.prototype.clear = clear;
TaskCollection.prototype.growArgsNum = growArgsNum;
TaskCollection.prototype.setAutoRebuild = setAutoRebuild;
TaskCollection.prototype.tasksAsArray = tasksAsArray;
TaskCollection.prototype.setTasks = setTasks;
(function(t) {
  var e = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function(r, s, o, a) {
    a === void 0 && (a = o);
    var c = Object.getOwnPropertyDescriptor(s, o);
    (!c || ("get" in c ? !s.__esModule : c.writable || c.configurable)) && (c = { enumerable: !0, get: function() {
      return s[o];
    } }), Object.defineProperty(r, a, c);
  } : function(r, s, o, a) {
    a === void 0 && (a = o), r[a] = s[o];
  }), n = commonjsGlobal && commonjsGlobal.__exportStar || function(r, s) {
    for (var o in r)
      o !== "default" && !Object.prototype.hasOwnProperty.call(s, o) && e(s, r, o);
  };
  Object.defineProperty(t, "__esModule", { value: !0 }), n(taskCollection, t);
})(taskCollection$1);
var utils = {};
Object.defineProperty(utils, "__esModule", { value: !0 });
utils.nullObj = void 0;
function nullObj() {
  var t = {};
  return t.__proto__ = null, t.prototype = null, t;
}
utils.nullObj = nullObj;
var __spreadArray = commonjsGlobal && commonjsGlobal.__spreadArray || function(t, e, n) {
  if (n || arguments.length === 2)
    for (var r = 0, s = e.length, o; r < s; r++)
      (o || !(r in e)) && (o || (o = Array.prototype.slice.call(e, 0, r)), o[r] = e[r]);
  return t.concat(o || Array.prototype.slice.call(e));
};
Object.defineProperty(ee, "__esModule", { value: !0 });
ee.EventEmitter = void 0;
var task_collection_1 = taskCollection$1, utils_1 = utils;
function emit(t, e, n, r, s, o) {
  var a = this.events[t];
  return a ? a.length === 0 ? !1 : (a.argsNum < 6 ? a.call(e, n, r, s, o) : a.call.apply(void 0, arguments), !0) : !1;
}
function emitHasOnce(t, e, n, r, s, o) {
  var a = this.events[t];
  if (a) {
    if (a.length === 0)
      return !1;
    a.argsNum < 6 ? a.call(e, n, r, s, o) : a.call.apply(void 0, arguments);
  }
  var c = this.onceEvents[t];
  if (c) {
    if (typeof c == "function")
      this.onceEvents[t] = void 0, arguments.length < 6 ? c(e, n, r, s, o) : c.apply(void 0, arguments);
    else {
      var h = c;
      if (this.onceEvents[t] = void 0, arguments.length < 6)
        for (var p = 0; p < h.length; ++p)
          h[p](e, n, r, s, o);
      else
        for (var p = 0; p < h.length; ++p)
          h[p].apply(void 0, arguments);
    }
    return !0;
  }
  return !!a;
}
var EventEmitter = (
  /** @class */
  function() {
    function t() {
      this.events = (0, utils_1.nullObj)(), this.onceEvents = (0, utils_1.nullObj)(), this._symbolKeys = /* @__PURE__ */ new Set(), this.maxListeners = 1 / 0;
    }
    return Object.defineProperty(t.prototype, "_eventsCount", {
      get: function() {
        return this.eventNames().length;
      },
      enumerable: !1,
      configurable: !0
    }), t;
  }()
);
ee.EventEmitter = EventEmitter;
function once(t, e) {
  switch (this.emit === emit && (this.emit = emitHasOnce), typeof this.onceEvents[t]) {
    case "undefined":
      this.onceEvents[t] = e, typeof t == "symbol" && this._symbolKeys.add(t);
      break;
    case "function":
      this.onceEvents[t] = [this.onceEvents[t], e];
      break;
    case "object":
      this.onceEvents[t].push(e);
  }
  return this;
}
function addListener(t, e, n) {
  if (n === void 0 && (n = e.length), typeof e != "function")
    throw new TypeError("The listener must be a function");
  var r = this.events[t];
  return r ? (r.push(e), r.growArgsNum(n), this.maxListeners !== 1 / 0 && this.maxListeners <= r.length && console.warn('Maximum event listeners for "'.concat(String(t), '" event!'))) : (this.events[t] = new task_collection_1.TaskCollection(n, !0, e, !1), typeof t == "symbol" && this._symbolKeys.add(t)), this;
}
function removeListener(t, e) {
  var n = this.events[t];
  n && n.removeLast(e);
  var r = this.onceEvents[t];
  return r && (typeof r == "function" ? this.onceEvents[t] = void 0 : typeof r == "object" && (r.length === 1 && r[0] === e ? this.onceEvents[t] = void 0 : (0, task_collection_1._fast_remove_single)(r, r.lastIndexOf(e)))), this;
}
function addListenerBound(t, e, n, r) {
  n === void 0 && (n = this), r === void 0 && (r = e.length), this.boundFuncs || (this.boundFuncs = /* @__PURE__ */ new Map());
  var s = e.bind(n);
  return this.boundFuncs.set(e, s), this.addListener(t, s, r);
}
function removeListenerBound(t, e) {
  var n, r, s = (n = this.boundFuncs) === null || n === void 0 ? void 0 : n.get(e);
  return (r = this.boundFuncs) === null || r === void 0 || r.delete(e), this.removeListener(t, s);
}
function hasListeners(t) {
  return this.events[t] && !!this.events[t].length;
}
function prependListener(t, e, n) {
  if (n === void 0 && (n = e.length), typeof e != "function")
    throw new TypeError("The listener must be a function");
  var r = this.events[t];
  return !r || !(r instanceof task_collection_1.TaskCollection) ? (r = this.events[t] = new task_collection_1.TaskCollection(n, !0, e, !1), typeof t == "symbol" && this._symbolKeys.add(t)) : (r.insert(0, e), r.growArgsNum(n), this.maxListeners !== 1 / 0 && this.maxListeners <= r.length && console.warn('Maximum event listeners for "'.concat(String(t), '" event!'))), this;
}
function prependOnceListener(t, e) {
  this.emit === emit && (this.emit = emitHasOnce);
  var n = this.onceEvents[t];
  return n ? typeof n != "object" ? (this.onceEvents[t] = [e, n], typeof t == "symbol" && this._symbolKeys.add(t)) : (n.unshift(e), this.maxListeners !== 1 / 0 && this.maxListeners <= n.length && console.warn('Maximum event listeners for "'.concat(String(t), '" once event!'))) : (this.onceEvents[t] = [e], typeof t == "symbol" && this._symbolKeys.add(t)), this;
}
function removeAllListeners(t) {
  return t === void 0 ? (this.events = (0, utils_1.nullObj)(), this.onceEvents = (0, utils_1.nullObj)(), this._symbolKeys = /* @__PURE__ */ new Set()) : (this.events[t] = void 0, this.onceEvents[t] = void 0, typeof t == "symbol" && this._symbolKeys.delete(t)), this;
}
function setMaxListeners(t) {
  return this.maxListeners = t, this;
}
function getMaxListeners() {
  return this.maxListeners;
}
function listeners(t) {
  return this.emit === emit ? this.events[t] ? this.events[t].tasksAsArray().slice() : [] : this.events[t] && this.onceEvents[t] ? __spreadArray(__spreadArray([], this.events[t].tasksAsArray(), !0), typeof this.onceEvents[t] == "function" ? [this.onceEvents[t]] : this.onceEvents[t], !0) : this.events[t] ? this.events[t].tasksAsArray() : this.onceEvents[t] ? typeof this.onceEvents[t] == "function" ? [this.onceEvents[t]] : this.onceEvents[t] : [];
}
function eventNames() {
  var t = this;
  if (this.emit === emit) {
    var e = Object.keys(this.events);
    return __spreadArray(__spreadArray([], e, !0), Array.from(this._symbolKeys), !0).filter(function(r) {
      return r in t.events && t.events[r] && t.events[r].length;
    });
  } else {
    var e = Object.keys(this.events).filter(function(s) {
      return t.events[s] && t.events[s].length;
    }), n = Object.keys(this.onceEvents).filter(function(s) {
      return t.onceEvents[s] && t.onceEvents[s].length;
    });
    return __spreadArray(__spreadArray(__spreadArray([], e, !0), n, !0), Array.from(this._symbolKeys).filter(function(s) {
      return s in t.events && t.events[s] && t.events[s].length || s in t.onceEvents && t.onceEvents[s] && t.onceEvents[s].length;
    }), !0);
  }
}
function listenerCount(t) {
  return this.emit === emit ? this.events[t] && this.events[t].length || 0 : (this.events[t] && this.events[t].length || 0) + (this.onceEvents[t] && this.onceEvents[t].length || 0);
}
EventEmitter.prototype.emit = emit;
EventEmitter.prototype.on = addListener;
EventEmitter.prototype.once = once;
EventEmitter.prototype.addListener = addListener;
EventEmitter.prototype.removeListener = removeListener;
EventEmitter.prototype.addListenerBound = addListenerBound;
EventEmitter.prototype.removeListenerBound = removeListenerBound;
EventEmitter.prototype.hasListeners = hasListeners;
EventEmitter.prototype.prependListener = prependListener;
EventEmitter.prototype.prependOnceListener = prependOnceListener;
EventEmitter.prototype.off = removeListener;
EventEmitter.prototype.removeAllListeners = removeAllListeners;
EventEmitter.prototype.setMaxListeners = setMaxListeners;
EventEmitter.prototype.getMaxListeners = getMaxListeners;
EventEmitter.prototype.listeners = listeners;
EventEmitter.prototype.eventNames = eventNames;
EventEmitter.prototype.listenerCount = listenerCount;
(function(t) {
  var e = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function(r, s, o, a) {
    a === void 0 && (a = o);
    var c = Object.getOwnPropertyDescriptor(s, o);
    (!c || ("get" in c ? !s.__esModule : c.writable || c.configurable)) && (c = { enumerable: !0, get: function() {
      return s[o];
    } }), Object.defineProperty(r, a, c);
  } : function(r, s, o, a) {
    a === void 0 && (a = o), r[a] = s[o];
  }), n = commonjsGlobal && commonjsGlobal.__exportStar || function(r, s) {
    for (var o in r)
      o !== "default" && !Object.prototype.hasOwnProperty.call(s, o) && e(s, r, o);
  };
  Object.defineProperty(t, "__esModule", { value: !0 }), n(types, t), n(ee, t);
})(lib$1);
var browser = { exports: {} }, ms, hasRequiredMs;
function requireMs() {
  if (hasRequiredMs)
    return ms;
  hasRequiredMs = 1;
  var t = 1e3, e = t * 60, n = e * 60, r = n * 24, s = r * 7, o = r * 365.25;
  ms = function(g, y) {
    y = y || {};
    var $ = typeof g;
    if ($ === "string" && g.length > 0)
      return a(g);
    if ($ === "number" && isFinite(g))
      return y.long ? h(g) : c(g);
    throw new Error(
      "val is not a non-empty string or a valid number. val=" + JSON.stringify(g)
    );
  };
  function a(g) {
    if (g = String(g), !(g.length > 100)) {
      var y = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
        g
      );
      if (y) {
        var $ = parseFloat(y[1]), k = (y[2] || "ms").toLowerCase();
        switch (k) {
          case "years":
          case "year":
          case "yrs":
          case "yr":
          case "y":
            return $ * o;
          case "weeks":
          case "week":
          case "w":
            return $ * s;
          case "days":
          case "day":
          case "d":
            return $ * r;
          case "hours":
          case "hour":
          case "hrs":
          case "hr":
          case "h":
            return $ * n;
          case "minutes":
          case "minute":
          case "mins":
          case "min":
          case "m":
            return $ * e;
          case "seconds":
          case "second":
          case "secs":
          case "sec":
          case "s":
            return $ * t;
          case "milliseconds":
          case "millisecond":
          case "msecs":
          case "msec":
          case "ms":
            return $;
          default:
            return;
        }
      }
    }
  }
  function c(g) {
    var y = Math.abs(g);
    return y >= r ? Math.round(g / r) + "d" : y >= n ? Math.round(g / n) + "h" : y >= e ? Math.round(g / e) + "m" : y >= t ? Math.round(g / t) + "s" : g + "ms";
  }
  function h(g) {
    var y = Math.abs(g);
    return y >= r ? p(g, y, r, "day") : y >= n ? p(g, y, n, "hour") : y >= e ? p(g, y, e, "minute") : y >= t ? p(g, y, t, "second") : g + " ms";
  }
  function p(g, y, $, k) {
    var S = y >= $ * 1.5;
    return Math.round(g / $) + " " + k + (S ? "s" : "");
  }
  return ms;
}
function setup(t) {
  n.debug = n, n.default = n, n.coerce = h, n.disable = o, n.enable = s, n.enabled = a, n.humanize = requireMs(), n.destroy = p, Object.keys(t).forEach((g) => {
    n[g] = t[g];
  }), n.names = [], n.skips = [], n.formatters = {};
  function e(g) {
    let y = 0;
    for (let $ = 0; $ < g.length; $++)
      y = (y << 5) - y + g.charCodeAt($), y |= 0;
    return n.colors[Math.abs(y) % n.colors.length];
  }
  n.selectColor = e;
  function n(g) {
    let y, $ = null, k, S;
    function w(...x) {
      if (!w.enabled)
        return;
      const A = w, N = Number(/* @__PURE__ */ new Date()), C = N - (y || N);
      A.diff = C, A.prev = y, A.curr = N, y = N, x[0] = n.coerce(x[0]), typeof x[0] != "string" && x.unshift("%O");
      let W = 0;
      x[0] = x[0].replace(/%([a-zA-Z%])/g, (I, L) => {
        if (I === "%%")
          return "%";
        W++;
        const P = n.formatters[L];
        if (typeof P == "function") {
          const ie = x[W];
          I = P.call(A, ie), x.splice(W, 1), W--;
        }
        return I;
      }), n.formatArgs.call(A, x), (A.log || n.log).apply(A, x);
    }
    return w.namespace = g, w.useColors = n.useColors(), w.color = n.selectColor(g), w.extend = r, w.destroy = n.destroy, Object.defineProperty(w, "enabled", {
      enumerable: !0,
      configurable: !1,
      get: () => $ !== null ? $ : (k !== n.namespaces && (k = n.namespaces, S = n.enabled(g)), S),
      set: (x) => {
        $ = x;
      }
    }), typeof n.init == "function" && n.init(w), w;
  }
  function r(g, y) {
    const $ = n(this.namespace + (typeof y > "u" ? ":" : y) + g);
    return $.log = this.log, $;
  }
  function s(g) {
    n.save(g), n.namespaces = g, n.names = [], n.skips = [];
    let y;
    const $ = (typeof g == "string" ? g : "").split(/[\s,]+/), k = $.length;
    for (y = 0; y < k; y++)
      $[y] && (g = $[y].replace(/\*/g, ".*?"), g[0] === "-" ? n.skips.push(new RegExp("^" + g.slice(1) + "$")) : n.names.push(new RegExp("^" + g + "$")));
  }
  function o() {
    const g = [
      ...n.names.map(c),
      ...n.skips.map(c).map((y) => "-" + y)
    ].join(",");
    return n.enable(""), g;
  }
  function a(g) {
    if (g[g.length - 1] === "*")
      return !0;
    let y, $;
    for (y = 0, $ = n.skips.length; y < $; y++)
      if (n.skips[y].test(g))
        return !1;
    for (y = 0, $ = n.names.length; y < $; y++)
      if (n.names[y].test(g))
        return !0;
    return !1;
  }
  function c(g) {
    return g.toString().substring(2, g.toString().length - 2).replace(/\.\*\?$/, "*");
  }
  function h(g) {
    return g instanceof Error ? g.stack || g.message : g;
  }
  function p() {
    console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
  }
  return n.enable(n.load()), n;
}
var common = setup;
(function(t, e) {
  e.formatArgs = r, e.save = s, e.load = o, e.useColors = n, e.storage = a(), e.destroy = /* @__PURE__ */ (() => {
    let h = !1;
    return () => {
      h || (h = !0, console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."));
    };
  })(), e.colors = [
    "#0000CC",
    "#0000FF",
    "#0033CC",
    "#0033FF",
    "#0066CC",
    "#0066FF",
    "#0099CC",
    "#0099FF",
    "#00CC00",
    "#00CC33",
    "#00CC66",
    "#00CC99",
    "#00CCCC",
    "#00CCFF",
    "#3300CC",
    "#3300FF",
    "#3333CC",
    "#3333FF",
    "#3366CC",
    "#3366FF",
    "#3399CC",
    "#3399FF",
    "#33CC00",
    "#33CC33",
    "#33CC66",
    "#33CC99",
    "#33CCCC",
    "#33CCFF",
    "#6600CC",
    "#6600FF",
    "#6633CC",
    "#6633FF",
    "#66CC00",
    "#66CC33",
    "#9900CC",
    "#9900FF",
    "#9933CC",
    "#9933FF",
    "#99CC00",
    "#99CC33",
    "#CC0000",
    "#CC0033",
    "#CC0066",
    "#CC0099",
    "#CC00CC",
    "#CC00FF",
    "#CC3300",
    "#CC3333",
    "#CC3366",
    "#CC3399",
    "#CC33CC",
    "#CC33FF",
    "#CC6600",
    "#CC6633",
    "#CC9900",
    "#CC9933",
    "#CCCC00",
    "#CCCC33",
    "#FF0000",
    "#FF0033",
    "#FF0066",
    "#FF0099",
    "#FF00CC",
    "#FF00FF",
    "#FF3300",
    "#FF3333",
    "#FF3366",
    "#FF3399",
    "#FF33CC",
    "#FF33FF",
    "#FF6600",
    "#FF6633",
    "#FF9900",
    "#FF9933",
    "#FFCC00",
    "#FFCC33"
  ];
  function n() {
    return typeof window < "u" && window.process && (window.process.type === "renderer" || window.process.__nwjs) ? !0 : typeof navigator < "u" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/) ? !1 : typeof document < "u" && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || // Is firebug? http://stackoverflow.com/a/398120/376773
    typeof window < "u" && window.console && (window.console.firebug || window.console.exception && window.console.table) || // Is firefox >= v31?
    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
    typeof navigator < "u" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || // Double check webkit in userAgent just in case we are in a worker
    typeof navigator < "u" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
  }
  function r(h) {
    if (h[0] = (this.useColors ? "%c" : "") + this.namespace + (this.useColors ? " %c" : " ") + h[0] + (this.useColors ? "%c " : " ") + "+" + t.exports.humanize(this.diff), !this.useColors)
      return;
    const p = "color: " + this.color;
    h.splice(1, 0, p, "color: inherit");
    let g = 0, y = 0;
    h[0].replace(/%[a-zA-Z%]/g, ($) => {
      $ !== "%%" && (g++, $ === "%c" && (y = g));
    }), h.splice(y, 0, p);
  }
  e.log = console.debug || console.log || (() => {
  });
  function s(h) {
    try {
      h ? e.storage.setItem("debug", h) : e.storage.removeItem("debug");
    } catch {
    }
  }
  function o() {
    let h;
    try {
      h = e.storage.getItem("debug");
    } catch {
    }
    return !h && typeof process < "u" && "env" in process && (h = process.env.DEBUG), h;
  }
  function a() {
    try {
      return localStorage;
    } catch {
    }
  }
  t.exports = common(e);
  const { formatters: c } = t.exports;
  c.j = function(h) {
    try {
      return JSON.stringify(h);
    } catch (p) {
      return "[UnexpectedJSONParseError]: " + p.message;
    }
  };
})(browser, browser.exports);
var browserExports = browser.exports;
const debug = /* @__PURE__ */ getDefaultExportFromCjs(browserExports);
function setBigUint64(t, e, n, r) {
  if (typeof t.setBigUint64 == "function")
    return t.setBigUint64(e, n, r);
  const s = BigInt(32), o = BigInt(4294967295), a = Number(n >> s & o), c = Number(n & o), h = r ? 4 : 0, p = r ? 0 : 4;
  t.setUint32(e + h, a, r), t.setUint32(e + p, c, r);
}
const Chi = (t, e, n) => t & e ^ ~t & n, Maj = (t, e, n) => t & e ^ t & n ^ e & n;
class HashMD extends Hash$6 {
  constructor(e, n, r, s) {
    super(), this.blockLen = e, this.outputLen = n, this.padOffset = r, this.isLE = s, this.finished = !1, this.length = 0, this.pos = 0, this.destroyed = !1, this.buffer = new Uint8Array(e), this.view = createView$6(this.buffer);
  }
  update(e) {
    exists$7(this);
    const { view: n, buffer: r, blockLen: s } = this;
    e = toBytes$7(e);
    const o = e.length;
    for (let a = 0; a < o; ) {
      const c = Math.min(s - this.pos, o - a);
      if (c === s) {
        const h = createView$6(e);
        for (; s <= o - a; a += s)
          this.process(h, a);
        continue;
      }
      r.set(e.subarray(a, a + c), this.pos), this.pos += c, a += c, this.pos === s && (this.process(n, 0), this.pos = 0);
    }
    return this.length += e.length, this.roundClean(), this;
  }
  digestInto(e) {
    exists$7(this), output$7(e, this), this.finished = !0;
    const { buffer: n, view: r, blockLen: s, isLE: o } = this;
    let { pos: a } = this;
    n[a++] = 128, this.buffer.subarray(a).fill(0), this.padOffset > s - a && (this.process(r, 0), a = 0);
    for (let y = a; y < s; y++)
      n[y] = 0;
    setBigUint64(r, s - 8, BigInt(this.length * 8), o), this.process(r, 0);
    const c = createView$6(e), h = this.outputLen;
    if (h % 4)
      throw new Error("_sha2: outputLen should be aligned to 32bit");
    const p = h / 4, g = this.get();
    if (p > g.length)
      throw new Error("_sha2: outputLen bigger than state");
    for (let y = 0; y < p; y++)
      c.setUint32(4 * y, g[y], o);
  }
  digest() {
    const { buffer: e, outputLen: n } = this;
    this.digestInto(e);
    const r = e.slice(0, n);
    return this.destroy(), r;
  }
  _cloneInto(e) {
    e || (e = new this.constructor()), e.set(...this.get());
    const { blockLen: n, buffer: r, length: s, finished: o, destroyed: a, pos: c } = this;
    return e.length = s, e.pos = c, e.finished = o, e.destroyed = a, s % n && e.buffer.set(r), e;
  }
}
const SHA256_K = /* @__PURE__ */ new Uint32Array([
  1116352408,
  1899447441,
  3049323471,
  3921009573,
  961987163,
  1508970993,
  2453635748,
  2870763221,
  3624381080,
  310598401,
  607225278,
  1426881987,
  1925078388,
  2162078206,
  2614888103,
  3248222580,
  3835390401,
  4022224774,
  264347078,
  604807628,
  770255983,
  1249150122,
  1555081692,
  1996064986,
  2554220882,
  2821834349,
  2952996808,
  3210313671,
  3336571891,
  3584528711,
  113926993,
  338241895,
  666307205,
  773529912,
  1294757372,
  1396182291,
  1695183700,
  1986661051,
  2177026350,
  2456956037,
  2730485921,
  2820302411,
  3259730800,
  3345764771,
  3516065817,
  3600352804,
  4094571909,
  275423344,
  430227734,
  506948616,
  659060556,
  883997877,
  958139571,
  1322822218,
  1537002063,
  1747873779,
  1955562222,
  2024104815,
  2227730452,
  2361852424,
  2428436474,
  2756734187,
  3204031479,
  3329325298
]), SHA256_IV = /* @__PURE__ */ new Uint32Array([
  1779033703,
  3144134277,
  1013904242,
  2773480762,
  1359893119,
  2600822924,
  528734635,
  1541459225
]), SHA256_W = /* @__PURE__ */ new Uint32Array(64);
class SHA256 extends HashMD {
  constructor() {
    super(64, 32, 8, !1), this.A = SHA256_IV[0] | 0, this.B = SHA256_IV[1] | 0, this.C = SHA256_IV[2] | 0, this.D = SHA256_IV[3] | 0, this.E = SHA256_IV[4] | 0, this.F = SHA256_IV[5] | 0, this.G = SHA256_IV[6] | 0, this.H = SHA256_IV[7] | 0;
  }
  get() {
    const { A: e, B: n, C: r, D: s, E: o, F: a, G: c, H: h } = this;
    return [e, n, r, s, o, a, c, h];
  }
  // prettier-ignore
  set(e, n, r, s, o, a, c, h) {
    this.A = e | 0, this.B = n | 0, this.C = r | 0, this.D = s | 0, this.E = o | 0, this.F = a | 0, this.G = c | 0, this.H = h | 0;
  }
  process(e, n) {
    for (let y = 0; y < 16; y++, n += 4)
      SHA256_W[y] = e.getUint32(n, !1);
    for (let y = 16; y < 64; y++) {
      const $ = SHA256_W[y - 15], k = SHA256_W[y - 2], S = rotr$6($, 7) ^ rotr$6($, 18) ^ $ >>> 3, w = rotr$6(k, 17) ^ rotr$6(k, 19) ^ k >>> 10;
      SHA256_W[y] = w + SHA256_W[y - 7] + S + SHA256_W[y - 16] | 0;
    }
    let { A: r, B: s, C: o, D: a, E: c, F: h, G: p, H: g } = this;
    for (let y = 0; y < 64; y++) {
      const $ = rotr$6(c, 6) ^ rotr$6(c, 11) ^ rotr$6(c, 25), k = g + $ + Chi(c, h, p) + SHA256_K[y] + SHA256_W[y] | 0, w = (rotr$6(r, 2) ^ rotr$6(r, 13) ^ rotr$6(r, 22)) + Maj(r, s, o) | 0;
      g = p, p = h, h = c, c = a + k | 0, a = o, o = s, s = r, r = k + w | 0;
    }
    r = r + this.A | 0, s = s + this.B | 0, o = o + this.C | 0, a = a + this.D | 0, c = c + this.E | 0, h = h + this.F | 0, p = p + this.G | 0, g = g + this.H | 0, this.set(r, s, o, a, c, h, p, g);
  }
  roundClean() {
    SHA256_W.fill(0);
  }
  destroy() {
    this.set(0, 0, 0, 0, 0, 0, 0, 0), this.buffer.fill(0);
  }
}
const sha256 = /* @__PURE__ */ wrapConstructor$6(() => new SHA256());
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
const _0n$4 = BigInt(0), _1n$4 = BigInt(1), _2n$2 = BigInt(2);
function isBytes(t) {
  return t instanceof Uint8Array || t != null && typeof t == "object" && t.constructor.name === "Uint8Array";
}
function abytes(t) {
  if (!isBytes(t))
    throw new Error("Uint8Array expected");
}
const hexes = /* @__PURE__ */ Array.from({ length: 256 }, (t, e) => e.toString(16).padStart(2, "0"));
function bytesToHex(t) {
  abytes(t);
  let e = "";
  for (let n = 0; n < t.length; n++)
    e += hexes[t[n]];
  return e;
}
function numberToHexUnpadded(t) {
  const e = t.toString(16);
  return e.length & 1 ? `0${e}` : e;
}
function hexToNumber(t) {
  if (typeof t != "string")
    throw new Error("hex string expected, got " + typeof t);
  return BigInt(t === "" ? "0" : `0x${t}`);
}
const asciis = { _0: 48, _9: 57, _A: 65, _F: 70, _a: 97, _f: 102 };
function asciiToBase16(t) {
  if (t >= asciis._0 && t <= asciis._9)
    return t - asciis._0;
  if (t >= asciis._A && t <= asciis._F)
    return t - (asciis._A - 10);
  if (t >= asciis._a && t <= asciis._f)
    return t - (asciis._a - 10);
}
function hexToBytes(t) {
  if (typeof t != "string")
    throw new Error("hex string expected, got " + typeof t);
  const e = t.length, n = e / 2;
  if (e % 2)
    throw new Error("padded hex string expected, got unpadded hex of length " + e);
  const r = new Uint8Array(n);
  for (let s = 0, o = 0; s < n; s++, o += 2) {
    const a = asciiToBase16(t.charCodeAt(o)), c = asciiToBase16(t.charCodeAt(o + 1));
    if (a === void 0 || c === void 0) {
      const h = t[o] + t[o + 1];
      throw new Error('hex string expected, got non-hex character "' + h + '" at index ' + o);
    }
    r[s] = a * 16 + c;
  }
  return r;
}
function bytesToNumberBE(t) {
  return hexToNumber(bytesToHex(t));
}
function bytesToNumberLE(t) {
  return abytes(t), hexToNumber(bytesToHex(Uint8Array.from(t).reverse()));
}
function numberToBytesBE(t, e) {
  return hexToBytes(t.toString(16).padStart(e * 2, "0"));
}
function numberToBytesLE(t, e) {
  return numberToBytesBE(t, e).reverse();
}
function numberToVarBytesBE(t) {
  return hexToBytes(numberToHexUnpadded(t));
}
function ensureBytes(t, e, n) {
  let r;
  if (typeof e == "string")
    try {
      r = hexToBytes(e);
    } catch (o) {
      throw new Error(`${t} must be valid hex string, got "${e}". Cause: ${o}`);
    }
  else if (isBytes(e))
    r = Uint8Array.from(e);
  else
    throw new Error(`${t} must be hex string or Uint8Array`);
  const s = r.length;
  if (typeof n == "number" && s !== n)
    throw new Error(`${t} expected ${n} bytes, got ${s}`);
  return r;
}
function concatBytes(...t) {
  let e = 0;
  for (let r = 0; r < t.length; r++) {
    const s = t[r];
    abytes(s), e += s.length;
  }
  const n = new Uint8Array(e);
  for (let r = 0, s = 0; r < t.length; r++) {
    const o = t[r];
    n.set(o, s), s += o.length;
  }
  return n;
}
function equalBytes(t, e) {
  if (t.length !== e.length)
    return !1;
  let n = 0;
  for (let r = 0; r < t.length; r++)
    n |= t[r] ^ e[r];
  return n === 0;
}
function utf8ToBytes(t) {
  if (typeof t != "string")
    throw new Error(`utf8ToBytes expected string, got ${typeof t}`);
  return new Uint8Array(new TextEncoder().encode(t));
}
function bitLen(t) {
  let e;
  for (e = 0; t > _0n$4; t >>= _1n$4, e += 1)
    ;
  return e;
}
function bitGet(t, e) {
  return t >> BigInt(e) & _1n$4;
}
function bitSet(t, e, n) {
  return t | (n ? _1n$4 : _0n$4) << BigInt(e);
}
const bitMask = (t) => (_2n$2 << BigInt(t - 1)) - _1n$4, u8n = (t) => new Uint8Array(t), u8fr = (t) => Uint8Array.from(t);
function createHmacDrbg(t, e, n) {
  if (typeof t != "number" || t < 2)
    throw new Error("hashLen must be a number");
  if (typeof e != "number" || e < 2)
    throw new Error("qByteLen must be a number");
  if (typeof n != "function")
    throw new Error("hmacFn must be a function");
  let r = u8n(t), s = u8n(t), o = 0;
  const a = () => {
    r.fill(1), s.fill(0), o = 0;
  }, c = (...y) => n(s, r, ...y), h = (y = u8n()) => {
    s = c(u8fr([0]), y), r = c(), y.length !== 0 && (s = c(u8fr([1]), y), r = c());
  }, p = () => {
    if (o++ >= 1e3)
      throw new Error("drbg: tried 1000 values");
    let y = 0;
    const $ = [];
    for (; y < e; ) {
      r = c();
      const k = r.slice();
      $.push(k), y += r.length;
    }
    return concatBytes(...$);
  };
  return (y, $) => {
    a(), h(y);
    let k;
    for (; !(k = $(p())); )
      h();
    return a(), k;
  };
}
const validatorFns = {
  bigint: (t) => typeof t == "bigint",
  function: (t) => typeof t == "function",
  boolean: (t) => typeof t == "boolean",
  string: (t) => typeof t == "string",
  stringOrUint8Array: (t) => typeof t == "string" || isBytes(t),
  isSafeInteger: (t) => Number.isSafeInteger(t),
  array: (t) => Array.isArray(t),
  field: (t, e) => e.Fp.isValid(t),
  hash: (t) => typeof t == "function" && Number.isSafeInteger(t.outputLen)
};
function validateObject(t, e, n = {}) {
  const r = (s, o, a) => {
    const c = validatorFns[o];
    if (typeof c != "function")
      throw new Error(`Invalid validator "${o}", expected function`);
    const h = t[s];
    if (!(a && h === void 0) && !c(h, t))
      throw new Error(`Invalid param ${String(s)}=${h} (${typeof h}), expected ${o}`);
  };
  for (const [s, o] of Object.entries(e))
    r(s, o, !1);
  for (const [s, o] of Object.entries(n))
    r(s, o, !0);
  return t;
}
const ut = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  abytes,
  bitGet,
  bitLen,
  bitMask,
  bitSet,
  bytesToHex,
  bytesToNumberBE,
  bytesToNumberLE,
  concatBytes,
  createHmacDrbg,
  ensureBytes,
  equalBytes,
  hexToBytes,
  hexToNumber,
  isBytes,
  numberToBytesBE,
  numberToBytesLE,
  numberToHexUnpadded,
  numberToVarBytesBE,
  utf8ToBytes,
  validateObject
}, Symbol.toStringTag, { value: "Module" }));
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
const _0n$3 = BigInt(0), _1n$3 = BigInt(1), _2n$1 = BigInt(2), _3n$1 = BigInt(3), _4n = BigInt(4), _5n = BigInt(5), _8n = BigInt(8);
BigInt(9);
BigInt(16);
function mod(t, e) {
  const n = t % e;
  return n >= _0n$3 ? n : e + n;
}
function pow(t, e, n) {
  if (n <= _0n$3 || e < _0n$3)
    throw new Error("Expected power/modulo > 0");
  if (n === _1n$3)
    return _0n$3;
  let r = _1n$3;
  for (; e > _0n$3; )
    e & _1n$3 && (r = r * t % n), t = t * t % n, e >>= _1n$3;
  return r;
}
function pow2(t, e, n) {
  let r = t;
  for (; e-- > _0n$3; )
    r *= r, r %= n;
  return r;
}
function invert(t, e) {
  if (t === _0n$3 || e <= _0n$3)
    throw new Error(`invert: expected positive integers, got n=${t} mod=${e}`);
  let n = mod(t, e), r = e, s = _0n$3, o = _1n$3;
  for (; n !== _0n$3; ) {
    const c = r / n, h = r % n, p = s - o * c;
    r = n, n = h, s = o, o = p;
  }
  if (r !== _1n$3)
    throw new Error("invert: does not exist");
  return mod(s, e);
}
function tonelliShanks(t) {
  const e = (t - _1n$3) / _2n$1;
  let n, r, s;
  for (n = t - _1n$3, r = 0; n % _2n$1 === _0n$3; n /= _2n$1, r++)
    ;
  for (s = _2n$1; s < t && pow(s, e, t) !== t - _1n$3; s++)
    ;
  if (r === 1) {
    const a = (t + _1n$3) / _4n;
    return function(h, p) {
      const g = h.pow(p, a);
      if (!h.eql(h.sqr(g), p))
        throw new Error("Cannot find square root");
      return g;
    };
  }
  const o = (n + _1n$3) / _2n$1;
  return function(c, h) {
    if (c.pow(h, e) === c.neg(c.ONE))
      throw new Error("Cannot find square root");
    let p = r, g = c.pow(c.mul(c.ONE, s), n), y = c.pow(h, o), $ = c.pow(h, n);
    for (; !c.eql($, c.ONE); ) {
      if (c.eql($, c.ZERO))
        return c.ZERO;
      let k = 1;
      for (let w = c.sqr($); k < p && !c.eql(w, c.ONE); k++)
        w = c.sqr(w);
      const S = c.pow(g, _1n$3 << BigInt(p - k - 1));
      g = c.sqr(S), y = c.mul(y, S), $ = c.mul($, g), p = k;
    }
    return y;
  };
}
function FpSqrt(t) {
  if (t % _4n === _3n$1) {
    const e = (t + _1n$3) / _4n;
    return function(r, s) {
      const o = r.pow(s, e);
      if (!r.eql(r.sqr(o), s))
        throw new Error("Cannot find square root");
      return o;
    };
  }
  if (t % _8n === _5n) {
    const e = (t - _5n) / _8n;
    return function(r, s) {
      const o = r.mul(s, _2n$1), a = r.pow(o, e), c = r.mul(s, a), h = r.mul(r.mul(c, _2n$1), a), p = r.mul(c, r.sub(h, r.ONE));
      if (!r.eql(r.sqr(p), s))
        throw new Error("Cannot find square root");
      return p;
    };
  }
  return tonelliShanks(t);
}
const FIELD_FIELDS = [
  "create",
  "isValid",
  "is0",
  "neg",
  "inv",
  "sqrt",
  "sqr",
  "eql",
  "add",
  "sub",
  "mul",
  "pow",
  "div",
  "addN",
  "subN",
  "mulN",
  "sqrN"
];
function validateField(t) {
  const e = {
    ORDER: "bigint",
    MASK: "bigint",
    BYTES: "isSafeInteger",
    BITS: "isSafeInteger"
  }, n = FIELD_FIELDS.reduce((r, s) => (r[s] = "function", r), e);
  return validateObject(t, n);
}
function FpPow(t, e, n) {
  if (n < _0n$3)
    throw new Error("Expected power > 0");
  if (n === _0n$3)
    return t.ONE;
  if (n === _1n$3)
    return e;
  let r = t.ONE, s = e;
  for (; n > _0n$3; )
    n & _1n$3 && (r = t.mul(r, s)), s = t.sqr(s), n >>= _1n$3;
  return r;
}
function FpInvertBatch(t, e) {
  const n = new Array(e.length), r = e.reduce((o, a, c) => t.is0(a) ? o : (n[c] = o, t.mul(o, a)), t.ONE), s = t.inv(r);
  return e.reduceRight((o, a, c) => t.is0(a) ? o : (n[c] = t.mul(o, n[c]), t.mul(o, a)), s), n;
}
function nLength(t, e) {
  const n = e !== void 0 ? e : t.toString(2).length, r = Math.ceil(n / 8);
  return { nBitLength: n, nByteLength: r };
}
function Field(t, e, n = !1, r = {}) {
  if (t <= _0n$3)
    throw new Error(`Expected Field ORDER > 0, got ${t}`);
  const { nBitLength: s, nByteLength: o } = nLength(t, e);
  if (o > 2048)
    throw new Error("Field lengths over 2048 bytes are not supported");
  const a = FpSqrt(t), c = Object.freeze({
    ORDER: t,
    BITS: s,
    BYTES: o,
    MASK: bitMask(s),
    ZERO: _0n$3,
    ONE: _1n$3,
    create: (h) => mod(h, t),
    isValid: (h) => {
      if (typeof h != "bigint")
        throw new Error(`Invalid field element: expected bigint, got ${typeof h}`);
      return _0n$3 <= h && h < t;
    },
    is0: (h) => h === _0n$3,
    isOdd: (h) => (h & _1n$3) === _1n$3,
    neg: (h) => mod(-h, t),
    eql: (h, p) => h === p,
    sqr: (h) => mod(h * h, t),
    add: (h, p) => mod(h + p, t),
    sub: (h, p) => mod(h - p, t),
    mul: (h, p) => mod(h * p, t),
    pow: (h, p) => FpPow(c, h, p),
    div: (h, p) => mod(h * invert(p, t), t),
    // Same as above, but doesn't normalize
    sqrN: (h) => h * h,
    addN: (h, p) => h + p,
    subN: (h, p) => h - p,
    mulN: (h, p) => h * p,
    inv: (h) => invert(h, t),
    sqrt: r.sqrt || ((h) => a(c, h)),
    invertBatch: (h) => FpInvertBatch(c, h),
    // TODO: do we really need constant cmov?
    // We don't have const-time bigints anyway, so probably will be not very useful
    cmov: (h, p, g) => g ? p : h,
    toBytes: (h) => n ? numberToBytesLE(h, o) : numberToBytesBE(h, o),
    fromBytes: (h) => {
      if (h.length !== o)
        throw new Error(`Fp.fromBytes: expected ${o}, got ${h.length}`);
      return n ? bytesToNumberLE(h) : bytesToNumberBE(h);
    }
  });
  return Object.freeze(c);
}
function getFieldBytesLength(t) {
  if (typeof t != "bigint")
    throw new Error("field order must be bigint");
  const e = t.toString(2).length;
  return Math.ceil(e / 8);
}
function getMinHashLength(t) {
  const e = getFieldBytesLength(t);
  return e + Math.ceil(e / 2);
}
function mapHashToField(t, e, n = !1) {
  const r = t.length, s = getFieldBytesLength(e), o = getMinHashLength(e);
  if (r < 16 || r < o || r > 1024)
    throw new Error(`expected ${o}-1024 bytes of input, got ${r}`);
  const a = n ? bytesToNumberBE(t) : bytesToNumberLE(t), c = mod(a, e - _1n$3) + _1n$3;
  return n ? numberToBytesLE(c, s) : numberToBytesBE(c, s);
}
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
const _0n$2 = BigInt(0), _1n$2 = BigInt(1);
function wNAF(t, e) {
  const n = (s, o) => {
    const a = o.negate();
    return s ? a : o;
  }, r = (s) => {
    const o = Math.ceil(e / s) + 1, a = 2 ** (s - 1);
    return { windows: o, windowSize: a };
  };
  return {
    constTimeNegate: n,
    // non-const time multiplication ladder
    unsafeLadder(s, o) {
      let a = t.ZERO, c = s;
      for (; o > _0n$2; )
        o & _1n$2 && (a = a.add(c)), c = c.double(), o >>= _1n$2;
      return a;
    },
    /**
     * Creates a wNAF precomputation window. Used for caching.
     * Default window size is set by `utils.precompute()` and is equal to 8.
     * Number of precomputed points depends on the curve size:
     * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:
     * - 𝑊 is the window size
     * - 𝑛 is the bitlength of the curve order.
     * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.
     * @returns precomputed point tables flattened to a single array
     */
    precomputeWindow(s, o) {
      const { windows: a, windowSize: c } = r(o), h = [];
      let p = s, g = p;
      for (let y = 0; y < a; y++) {
        g = p, h.push(g);
        for (let $ = 1; $ < c; $++)
          g = g.add(p), h.push(g);
        p = g.double();
      }
      return h;
    },
    /**
     * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.
     * @param W window size
     * @param precomputes precomputed tables
     * @param n scalar (we don't check here, but should be less than curve order)
     * @returns real and fake (for const-time) points
     */
    wNAF(s, o, a) {
      const { windows: c, windowSize: h } = r(s);
      let p = t.ZERO, g = t.BASE;
      const y = BigInt(2 ** s - 1), $ = 2 ** s, k = BigInt(s);
      for (let S = 0; S < c; S++) {
        const w = S * h;
        let x = Number(a & y);
        a >>= k, x > h && (x -= $, a += _1n$2);
        const A = w, N = w + Math.abs(x) - 1, C = S % 2 !== 0, W = x < 0;
        x === 0 ? g = g.add(n(C, o[A])) : p = p.add(n(W, o[N]));
      }
      return { p, f: g };
    },
    wNAFCached(s, o, a, c) {
      const h = s._WINDOW_SIZE || 1;
      let p = o.get(s);
      return p || (p = this.precomputeWindow(s, h), h !== 1 && o.set(s, c(p))), this.wNAF(h, p, a);
    }
  };
}
function validateBasic(t) {
  return validateField(t.Fp), validateObject(t, {
    n: "bigint",
    h: "bigint",
    Gx: "field",
    Gy: "field"
  }, {
    nBitLength: "isSafeInteger",
    nByteLength: "isSafeInteger"
  }), Object.freeze({
    ...nLength(t.n, t.nBitLength),
    ...t,
    p: t.Fp.ORDER
  });
}
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
function validatePointOpts(t) {
  const e = validateBasic(t);
  validateObject(e, {
    a: "field",
    b: "field"
  }, {
    allowedPrivateKeyLengths: "array",
    wrapPrivateKey: "boolean",
    isTorsionFree: "function",
    clearCofactor: "function",
    allowInfinityPoint: "boolean",
    fromBytes: "function",
    toBytes: "function"
  });
  const { endo: n, Fp: r, a: s } = e;
  if (n) {
    if (!r.eql(s, r.ZERO))
      throw new Error("Endomorphism can only be defined for Koblitz curves that have a=0");
    if (typeof n != "object" || typeof n.beta != "bigint" || typeof n.splitScalar != "function")
      throw new Error("Expected endomorphism with beta: bigint and splitScalar: function");
  }
  return Object.freeze({ ...e });
}
const { bytesToNumberBE: b2n, hexToBytes: h2b } = ut, DER = {
  // asn.1 DER encoding utils
  Err: class extends Error {
    constructor(e = "") {
      super(e);
    }
  },
  _parseInt(t) {
    const { Err: e } = DER;
    if (t.length < 2 || t[0] !== 2)
      throw new e("Invalid signature integer tag");
    const n = t[1], r = t.subarray(2, n + 2);
    if (!n || r.length !== n)
      throw new e("Invalid signature integer: wrong length");
    if (r[0] & 128)
      throw new e("Invalid signature integer: negative");
    if (r[0] === 0 && !(r[1] & 128))
      throw new e("Invalid signature integer: unnecessary leading zero");
    return { d: b2n(r), l: t.subarray(n + 2) };
  },
  toSig(t) {
    const { Err: e } = DER, n = typeof t == "string" ? h2b(t) : t;
    abytes(n);
    let r = n.length;
    if (r < 2 || n[0] != 48)
      throw new e("Invalid signature tag");
    if (n[1] !== r - 2)
      throw new e("Invalid signature: incorrect length");
    const { d: s, l: o } = DER._parseInt(n.subarray(2)), { d: a, l: c } = DER._parseInt(o);
    if (c.length)
      throw new e("Invalid signature: left bytes after parsing");
    return { r: s, s: a };
  },
  hexFromSig(t) {
    const e = (p) => Number.parseInt(p[0], 16) & 8 ? "00" + p : p, n = (p) => {
      const g = p.toString(16);
      return g.length & 1 ? `0${g}` : g;
    }, r = e(n(t.s)), s = e(n(t.r)), o = r.length / 2, a = s.length / 2, c = n(o), h = n(a);
    return `30${n(a + o + 4)}02${h}${s}02${c}${r}`;
  }
}, _0n$1 = BigInt(0), _1n$1 = BigInt(1);
BigInt(2);
const _3n = BigInt(3);
BigInt(4);
function weierstrassPoints(t) {
  const e = validatePointOpts(t), { Fp: n } = e, r = e.toBytes || ((S, w, x) => {
    const A = w.toAffine();
    return concatBytes(Uint8Array.from([4]), n.toBytes(A.x), n.toBytes(A.y));
  }), s = e.fromBytes || ((S) => {
    const w = S.subarray(1), x = n.fromBytes(w.subarray(0, n.BYTES)), A = n.fromBytes(w.subarray(n.BYTES, 2 * n.BYTES));
    return { x, y: A };
  });
  function o(S) {
    const { a: w, b: x } = e, A = n.sqr(S), N = n.mul(A, S);
    return n.add(n.add(N, n.mul(S, w)), x);
  }
  if (!n.eql(n.sqr(e.Gy), o(e.Gx)))
    throw new Error("bad generator point: equation left != right");
  function a(S) {
    return typeof S == "bigint" && _0n$1 < S && S < e.n;
  }
  function c(S) {
    if (!a(S))
      throw new Error("Expected valid bigint: 0 < bigint < curve.n");
  }
  function h(S) {
    const { allowedPrivateKeyLengths: w, nByteLength: x, wrapPrivateKey: A, n: N } = e;
    if (w && typeof S != "bigint") {
      if (isBytes(S) && (S = bytesToHex(S)), typeof S != "string" || !w.includes(S.length))
        throw new Error("Invalid key");
      S = S.padStart(x * 2, "0");
    }
    let C;
    try {
      C = typeof S == "bigint" ? S : bytesToNumberBE(ensureBytes("private key", S, x));
    } catch {
      throw new Error(`private key must be ${x} bytes, hex or bigint, not ${typeof S}`);
    }
    return A && (C = mod(C, N)), c(C), C;
  }
  const p = /* @__PURE__ */ new Map();
  function g(S) {
    if (!(S instanceof y))
      throw new Error("ProjectivePoint expected");
  }
  class y {
    constructor(w, x, A) {
      if (this.px = w, this.py = x, this.pz = A, w == null || !n.isValid(w))
        throw new Error("x required");
      if (x == null || !n.isValid(x))
        throw new Error("y required");
      if (A == null || !n.isValid(A))
        throw new Error("z required");
    }
    // Does not validate if the point is on-curve.
    // Use fromHex instead, or call assertValidity() later.
    static fromAffine(w) {
      const { x, y: A } = w || {};
      if (!w || !n.isValid(x) || !n.isValid(A))
        throw new Error("invalid affine point");
      if (w instanceof y)
        throw new Error("projective point not allowed");
      const N = (C) => n.eql(C, n.ZERO);
      return N(x) && N(A) ? y.ZERO : new y(x, A, n.ONE);
    }
    get x() {
      return this.toAffine().x;
    }
    get y() {
      return this.toAffine().y;
    }
    /**
     * Takes a bunch of Projective Points but executes only one
     * inversion on all of them. Inversion is very slow operation,
     * so this improves performance massively.
     * Optimization: converts a list of projective points to a list of identical points with Z=1.
     */
    static normalizeZ(w) {
      const x = n.invertBatch(w.map((A) => A.pz));
      return w.map((A, N) => A.toAffine(x[N])).map(y.fromAffine);
    }
    /**
     * Converts hash string or Uint8Array to Point.
     * @param hex short/long ECDSA hex
     */
    static fromHex(w) {
      const x = y.fromAffine(s(ensureBytes("pointHex", w)));
      return x.assertValidity(), x;
    }
    // Multiplies generator point by privateKey.
    static fromPrivateKey(w) {
      return y.BASE.multiply(h(w));
    }
    // "Private method", don't use it directly
    _setWindowSize(w) {
      this._WINDOW_SIZE = w, p.delete(this);
    }
    // A point on curve is valid if it conforms to equation.
    assertValidity() {
      if (this.is0()) {
        if (e.allowInfinityPoint && !n.is0(this.py))
          return;
        throw new Error("bad point: ZERO");
      }
      const { x: w, y: x } = this.toAffine();
      if (!n.isValid(w) || !n.isValid(x))
        throw new Error("bad point: x or y not FE");
      const A = n.sqr(x), N = o(w);
      if (!n.eql(A, N))
        throw new Error("bad point: equation left != right");
      if (!this.isTorsionFree())
        throw new Error("bad point: not in prime-order subgroup");
    }
    hasEvenY() {
      const { y: w } = this.toAffine();
      if (n.isOdd)
        return !n.isOdd(w);
      throw new Error("Field doesn't support isOdd");
    }
    /**
     * Compare one point to another.
     */
    equals(w) {
      g(w);
      const { px: x, py: A, pz: N } = this, { px: C, py: W, pz: q } = w, I = n.eql(n.mul(x, q), n.mul(C, N)), L = n.eql(n.mul(A, q), n.mul(W, N));
      return I && L;
    }
    /**
     * Flips point to one corresponding to (x, -y) in Affine coordinates.
     */
    negate() {
      return new y(this.px, n.neg(this.py), this.pz);
    }
    // Renes-Costello-Batina exception-free doubling formula.
    // There is 30% faster Jacobian formula, but it is not complete.
    // https://eprint.iacr.org/2015/1060, algorithm 3
    // Cost: 8M + 3S + 3*a + 2*b3 + 15add.
    double() {
      const { a: w, b: x } = e, A = n.mul(x, _3n), { px: N, py: C, pz: W } = this;
      let q = n.ZERO, I = n.ZERO, L = n.ZERO, P = n.mul(N, N), ie = n.mul(C, C), te = n.mul(W, W), T = n.mul(N, C);
      return T = n.add(T, T), L = n.mul(N, W), L = n.add(L, L), q = n.mul(w, L), I = n.mul(A, te), I = n.add(q, I), q = n.sub(ie, I), I = n.add(ie, I), I = n.mul(q, I), q = n.mul(T, q), L = n.mul(A, L), te = n.mul(w, te), T = n.sub(P, te), T = n.mul(w, T), T = n.add(T, L), L = n.add(P, P), P = n.add(L, P), P = n.add(P, te), P = n.mul(P, T), I = n.add(I, P), te = n.mul(C, W), te = n.add(te, te), P = n.mul(te, T), q = n.sub(q, P), L = n.mul(te, ie), L = n.add(L, L), L = n.add(L, L), new y(q, I, L);
    }
    // Renes-Costello-Batina exception-free addition formula.
    // There is 30% faster Jacobian formula, but it is not complete.
    // https://eprint.iacr.org/2015/1060, algorithm 1
    // Cost: 12M + 0S + 3*a + 3*b3 + 23add.
    add(w) {
      g(w);
      const { px: x, py: A, pz: N } = this, { px: C, py: W, pz: q } = w;
      let I = n.ZERO, L = n.ZERO, P = n.ZERO;
      const ie = e.a, te = n.mul(e.b, _3n);
      let T = n.mul(x, C), O = n.mul(A, W), K = n.mul(N, q), ae = n.add(x, A), E = n.add(C, W);
      ae = n.mul(ae, E), E = n.add(T, O), ae = n.sub(ae, E), E = n.add(x, N);
      let B = n.add(C, q);
      return E = n.mul(E, B), B = n.add(T, K), E = n.sub(E, B), B = n.add(A, N), I = n.add(W, q), B = n.mul(B, I), I = n.add(O, K), B = n.sub(B, I), P = n.mul(ie, E), I = n.mul(te, K), P = n.add(I, P), I = n.sub(O, P), P = n.add(O, P), L = n.mul(I, P), O = n.add(T, T), O = n.add(O, T), K = n.mul(ie, K), E = n.mul(te, E), O = n.add(O, K), K = n.sub(T, K), K = n.mul(ie, K), E = n.add(E, K), T = n.mul(O, E), L = n.add(L, T), T = n.mul(B, E), I = n.mul(ae, I), I = n.sub(I, T), T = n.mul(ae, O), P = n.mul(B, P), P = n.add(P, T), new y(I, L, P);
    }
    subtract(w) {
      return this.add(w.negate());
    }
    is0() {
      return this.equals(y.ZERO);
    }
    wNAF(w) {
      return k.wNAFCached(this, p, w, (x) => {
        const A = n.invertBatch(x.map((N) => N.pz));
        return x.map((N, C) => N.toAffine(A[C])).map(y.fromAffine);
      });
    }
    /**
     * Non-constant-time multiplication. Uses double-and-add algorithm.
     * It's faster, but should only be used when you don't care about
     * an exposed private key e.g. sig verification, which works over *public* keys.
     */
    multiplyUnsafe(w) {
      const x = y.ZERO;
      if (w === _0n$1)
        return x;
      if (c(w), w === _1n$1)
        return this;
      const { endo: A } = e;
      if (!A)
        return k.unsafeLadder(this, w);
      let { k1neg: N, k1: C, k2neg: W, k2: q } = A.splitScalar(w), I = x, L = x, P = this;
      for (; C > _0n$1 || q > _0n$1; )
        C & _1n$1 && (I = I.add(P)), q & _1n$1 && (L = L.add(P)), P = P.double(), C >>= _1n$1, q >>= _1n$1;
      return N && (I = I.negate()), W && (L = L.negate()), L = new y(n.mul(L.px, A.beta), L.py, L.pz), I.add(L);
    }
    /**
     * Constant time multiplication.
     * Uses wNAF method. Windowed method may be 10% faster,
     * but takes 2x longer to generate and consumes 2x memory.
     * Uses precomputes when available.
     * Uses endomorphism for Koblitz curves.
     * @param scalar by which the point would be multiplied
     * @returns New point
     */
    multiply(w) {
      c(w);
      let x = w, A, N;
      const { endo: C } = e;
      if (C) {
        const { k1neg: W, k1: q, k2neg: I, k2: L } = C.splitScalar(x);
        let { p: P, f: ie } = this.wNAF(q), { p: te, f: T } = this.wNAF(L);
        P = k.constTimeNegate(W, P), te = k.constTimeNegate(I, te), te = new y(n.mul(te.px, C.beta), te.py, te.pz), A = P.add(te), N = ie.add(T);
      } else {
        const { p: W, f: q } = this.wNAF(x);
        A = W, N = q;
      }
      return y.normalizeZ([A, N])[0];
    }
    /**
     * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.
     * Not using Strauss-Shamir trick: precomputation tables are faster.
     * The trick could be useful if both P and Q are not G (not in our case).
     * @returns non-zero affine point
     */
    multiplyAndAddUnsafe(w, x, A) {
      const N = y.BASE, C = (q, I) => I === _0n$1 || I === _1n$1 || !q.equals(N) ? q.multiplyUnsafe(I) : q.multiply(I), W = C(this, x).add(C(w, A));
      return W.is0() ? void 0 : W;
    }
    // Converts Projective point to affine (x, y) coordinates.
    // Can accept precomputed Z^-1 - for example, from invertBatch.
    // (x, y, z) ∋ (x=x/z, y=y/z)
    toAffine(w) {
      const { px: x, py: A, pz: N } = this, C = this.is0();
      w == null && (w = C ? n.ONE : n.inv(N));
      const W = n.mul(x, w), q = n.mul(A, w), I = n.mul(N, w);
      if (C)
        return { x: n.ZERO, y: n.ZERO };
      if (!n.eql(I, n.ONE))
        throw new Error("invZ was invalid");
      return { x: W, y: q };
    }
    isTorsionFree() {
      const { h: w, isTorsionFree: x } = e;
      if (w === _1n$1)
        return !0;
      if (x)
        return x(y, this);
      throw new Error("isTorsionFree() has not been declared for the elliptic curve");
    }
    clearCofactor() {
      const { h: w, clearCofactor: x } = e;
      return w === _1n$1 ? this : x ? x(y, this) : this.multiplyUnsafe(e.h);
    }
    toRawBytes(w = !0) {
      return this.assertValidity(), r(y, this, w);
    }
    toHex(w = !0) {
      return bytesToHex(this.toRawBytes(w));
    }
  }
  y.BASE = new y(e.Gx, e.Gy, n.ONE), y.ZERO = new y(n.ZERO, n.ONE, n.ZERO);
  const $ = e.nBitLength, k = wNAF(y, e.endo ? Math.ceil($ / 2) : $);
  return {
    CURVE: e,
    ProjectivePoint: y,
    normPrivateKeyToScalar: h,
    weierstrassEquation: o,
    isWithinCurveOrder: a
  };
}
function validateOpts(t) {
  const e = validateBasic(t);
  return validateObject(e, {
    hash: "hash",
    hmac: "function",
    randomBytes: "function"
  }, {
    bits2int: "function",
    bits2int_modN: "function",
    lowS: "boolean"
  }), Object.freeze({ lowS: !0, ...e });
}
function weierstrass(t) {
  const e = validateOpts(t), { Fp: n, n: r } = e, s = n.BYTES + 1, o = 2 * n.BYTES + 1;
  function a(E) {
    return _0n$1 < E && E < n.ORDER;
  }
  function c(E) {
    return mod(E, r);
  }
  function h(E) {
    return invert(E, r);
  }
  const { ProjectivePoint: p, normPrivateKeyToScalar: g, weierstrassEquation: y, isWithinCurveOrder: $ } = weierstrassPoints({
    ...e,
    toBytes(E, B, H) {
      const Q = B.toAffine(), F = n.toBytes(Q.x), ce = concatBytes;
      return H ? ce(Uint8Array.from([B.hasEvenY() ? 2 : 3]), F) : ce(Uint8Array.from([4]), F, n.toBytes(Q.y));
    },
    fromBytes(E) {
      const B = E.length, H = E[0], Q = E.subarray(1);
      if (B === s && (H === 2 || H === 3)) {
        const F = bytesToNumberBE(Q);
        if (!a(F))
          throw new Error("Point is not on curve");
        const ce = y(F);
        let oe;
        try {
          oe = n.sqrt(ce);
        } catch (xe) {
          const Se = xe instanceof Error ? ": " + xe.message : "";
          throw new Error("Point is not on curve" + Se);
        }
        const le = (oe & _1n$1) === _1n$1;
        return (H & 1) === 1 !== le && (oe = n.neg(oe)), { x: F, y: oe };
      } else if (B === o && H === 4) {
        const F = n.fromBytes(Q.subarray(0, n.BYTES)), ce = n.fromBytes(Q.subarray(n.BYTES, 2 * n.BYTES));
        return { x: F, y: ce };
      } else
        throw new Error(`Point of length ${B} was invalid. Expected ${s} compressed bytes or ${o} uncompressed bytes`);
    }
  }), k = (E) => bytesToHex(numberToBytesBE(E, e.nByteLength));
  function S(E) {
    const B = r >> _1n$1;
    return E > B;
  }
  function w(E) {
    return S(E) ? c(-E) : E;
  }
  const x = (E, B, H) => bytesToNumberBE(E.slice(B, H));
  class A {
    constructor(B, H, Q) {
      this.r = B, this.s = H, this.recovery = Q, this.assertValidity();
    }
    // pair (bytes of r, bytes of s)
    static fromCompact(B) {
      const H = e.nByteLength;
      return B = ensureBytes("compactSignature", B, H * 2), new A(x(B, 0, H), x(B, H, 2 * H));
    }
    // DER encoded ECDSA signature
    // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script
    static fromDER(B) {
      const { r: H, s: Q } = DER.toSig(ensureBytes("DER", B));
      return new A(H, Q);
    }
    assertValidity() {
      if (!$(this.r))
        throw new Error("r must be 0 < r < CURVE.n");
      if (!$(this.s))
        throw new Error("s must be 0 < s < CURVE.n");
    }
    addRecoveryBit(B) {
      return new A(this.r, this.s, B);
    }
    recoverPublicKey(B) {
      const { r: H, s: Q, recovery: F } = this, ce = L(ensureBytes("msgHash", B));
      if (F == null || ![0, 1, 2, 3].includes(F))
        throw new Error("recovery id invalid");
      const oe = F === 2 || F === 3 ? H + e.n : H;
      if (oe >= n.ORDER)
        throw new Error("recovery id 2 or 3 invalid");
      const le = F & 1 ? "03" : "02", ve = p.fromHex(le + k(oe)), xe = h(oe), Se = c(-ce * xe), Te = c(Q * xe), Ae = p.BASE.multiplyAndAddUnsafe(ve, Se, Te);
      if (!Ae)
        throw new Error("point at infinify");
      return Ae.assertValidity(), Ae;
    }
    // Signatures should be low-s, to prevent malleability.
    hasHighS() {
      return S(this.s);
    }
    normalizeS() {
      return this.hasHighS() ? new A(this.r, c(-this.s), this.recovery) : this;
    }
    // DER-encoded
    toDERRawBytes() {
      return hexToBytes(this.toDERHex());
    }
    toDERHex() {
      return DER.hexFromSig({ r: this.r, s: this.s });
    }
    // padded bytes of r, then padded bytes of s
    toCompactRawBytes() {
      return hexToBytes(this.toCompactHex());
    }
    toCompactHex() {
      return k(this.r) + k(this.s);
    }
  }
  const N = {
    isValidPrivateKey(E) {
      try {
        return g(E), !0;
      } catch {
        return !1;
      }
    },
    normPrivateKeyToScalar: g,
    /**
     * Produces cryptographically secure private key from random of size
     * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.
     */
    randomPrivateKey: () => {
      const E = getMinHashLength(e.n);
      return mapHashToField(e.randomBytes(E), e.n);
    },
    /**
     * Creates precompute table for an arbitrary EC point. Makes point "cached".
     * Allows to massively speed-up `point.multiply(scalar)`.
     * @returns cached point
     * @example
     * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));
     * fast.multiply(privKey); // much faster ECDH now
     */
    precompute(E = 8, B = p.BASE) {
      return B._setWindowSize(E), B.multiply(BigInt(3)), B;
    }
  };
  function C(E, B = !0) {
    return p.fromPrivateKey(E).toRawBytes(B);
  }
  function W(E) {
    const B = isBytes(E), H = typeof E == "string", Q = (B || H) && E.length;
    return B ? Q === s || Q === o : H ? Q === 2 * s || Q === 2 * o : E instanceof p;
  }
  function q(E, B, H = !0) {
    if (W(E))
      throw new Error("first arg must be private key");
    if (!W(B))
      throw new Error("second arg must be public key");
    return p.fromHex(B).multiply(g(E)).toRawBytes(H);
  }
  const I = e.bits2int || function(E) {
    const B = bytesToNumberBE(E), H = E.length * 8 - e.nBitLength;
    return H > 0 ? B >> BigInt(H) : B;
  }, L = e.bits2int_modN || function(E) {
    return c(I(E));
  }, P = bitMask(e.nBitLength);
  function ie(E) {
    if (typeof E != "bigint")
      throw new Error("bigint expected");
    if (!(_0n$1 <= E && E < P))
      throw new Error(`bigint expected < 2^${e.nBitLength}`);
    return numberToBytesBE(E, e.nByteLength);
  }
  function te(E, B, H = T) {
    if (["recovered", "canonical"].some((de) => de in H))
      throw new Error("sign() legacy options not supported");
    const { hash: Q, randomBytes: F } = e;
    let { lowS: ce, prehash: oe, extraEntropy: le } = H;
    ce == null && (ce = !0), E = ensureBytes("msgHash", E), oe && (E = ensureBytes("prehashed msgHash", Q(E)));
    const ve = L(E), xe = g(B), Se = [ie(xe), ie(ve)];
    if (le != null && le !== !1) {
      const de = le === !0 ? F(n.BYTES) : le;
      Se.push(ensureBytes("extraEntropy", de));
    }
    const Te = concatBytes(...Se), Ae = ve;
    function Oe(de) {
      const Ue = I(de);
      if (!$(Ue))
        return;
      const Ve = h(Ue), _e = p.BASE.multiply(Ue).toAffine(), Be = c(_e.x);
      if (Be === _0n$1)
        return;
      const Pe = c(Ve * c(Ae + Be * xe));
      if (Pe === _0n$1)
        return;
      let qe = (_e.x === Be ? 0 : 2) | Number(_e.y & _1n$1), Xe = Pe;
      return ce && S(Pe) && (Xe = w(Pe), qe ^= 1), new A(Be, Xe, qe);
    }
    return { seed: Te, k2sig: Oe };
  }
  const T = { lowS: e.lowS, prehash: !1 }, O = { lowS: e.lowS, prehash: !1 };
  function K(E, B, H = T) {
    const { seed: Q, k2sig: F } = te(E, B, H), ce = e;
    return createHmacDrbg(ce.hash.outputLen, ce.nByteLength, ce.hmac)(Q, F);
  }
  p.BASE._setWindowSize(8);
  function ae(E, B, H, Q = O) {
    var _e;
    const F = E;
    if (B = ensureBytes("msgHash", B), H = ensureBytes("publicKey", H), "strict" in Q)
      throw new Error("options.strict was renamed to lowS");
    const { lowS: ce, prehash: oe } = Q;
    let le, ve;
    try {
      if (typeof F == "string" || isBytes(F))
        try {
          le = A.fromDER(F);
        } catch (Be) {
          if (!(Be instanceof DER.Err))
            throw Be;
          le = A.fromCompact(F);
        }
      else if (typeof F == "object" && typeof F.r == "bigint" && typeof F.s == "bigint") {
        const { r: Be, s: Pe } = F;
        le = new A(Be, Pe);
      } else
        throw new Error("PARSE");
      ve = p.fromHex(H);
    } catch (Be) {
      if (Be.message === "PARSE")
        throw new Error("signature must be Signature instance, Uint8Array or hex string");
      return !1;
    }
    if (ce && le.hasHighS())
      return !1;
    oe && (B = e.hash(B));
    const { r: xe, s: Se } = le, Te = L(B), Ae = h(Se), Oe = c(Te * Ae), de = c(xe * Ae), Ue = (_e = p.BASE.multiplyAndAddUnsafe(ve, Oe, de)) == null ? void 0 : _e.toAffine();
    return Ue ? c(Ue.x) === xe : !1;
  }
  return {
    CURVE: e,
    getPublicKey: C,
    getSharedSecret: q,
    sign: K,
    verify: ae,
    ProjectivePoint: p,
    Signature: A,
    utils: N
  };
}
class HMAC extends Hash$6 {
  constructor(e, n) {
    super(), this.finished = !1, this.destroyed = !1, hash$7(e);
    const r = toBytes$7(n);
    if (this.iHash = e.create(), typeof this.iHash.update != "function")
      throw new Error("Expected instance of class which extends utils.Hash");
    this.blockLen = this.iHash.blockLen, this.outputLen = this.iHash.outputLen;
    const s = this.blockLen, o = new Uint8Array(s);
    o.set(r.length > s ? e.create().update(r).digest() : r);
    for (let a = 0; a < o.length; a++)
      o[a] ^= 54;
    this.iHash.update(o), this.oHash = e.create();
    for (let a = 0; a < o.length; a++)
      o[a] ^= 106;
    this.oHash.update(o), o.fill(0);
  }
  update(e) {
    return exists$7(this), this.iHash.update(e), this;
  }
  digestInto(e) {
    exists$7(this), bytes$8(e, this.outputLen), this.finished = !0, this.iHash.digestInto(e), this.oHash.update(e), this.oHash.digestInto(e), this.destroy();
  }
  digest() {
    const e = new Uint8Array(this.oHash.outputLen);
    return this.digestInto(e), e;
  }
  _cloneInto(e) {
    e || (e = Object.create(Object.getPrototypeOf(this), {}));
    const { oHash: n, iHash: r, finished: s, destroyed: o, blockLen: a, outputLen: c } = this;
    return e = e, e.finished = s, e.destroyed = o, e.blockLen = a, e.outputLen = c, e.oHash = n._cloneInto(e.oHash), e.iHash = r._cloneInto(e.iHash), e;
  }
  destroy() {
    this.destroyed = !0, this.oHash.destroy(), this.iHash.destroy();
  }
}
const hmac = (t, e, n) => new HMAC(t, e).update(n).digest();
hmac.create = (t, e) => new HMAC(t, e);
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
function getHash(t) {
  return {
    hash: t,
    hmac: (e, ...n) => hmac(t, e, concatBytes$9(...n)),
    randomBytes: randomBytes$5
  };
}
function createCurve(t, e) {
  const n = (r) => weierstrass({ ...t, ...getHash(r) });
  return Object.freeze({ ...n(e), create: n });
}
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
const secp256k1P = BigInt("0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f"), secp256k1N = BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141"), _1n = BigInt(1), _2n = BigInt(2), divNearest = (t, e) => (t + e / _2n) / e;
function sqrtMod(t) {
  const e = secp256k1P, n = BigInt(3), r = BigInt(6), s = BigInt(11), o = BigInt(22), a = BigInt(23), c = BigInt(44), h = BigInt(88), p = t * t * t % e, g = p * p * t % e, y = pow2(g, n, e) * g % e, $ = pow2(y, n, e) * g % e, k = pow2($, _2n, e) * p % e, S = pow2(k, s, e) * k % e, w = pow2(S, o, e) * S % e, x = pow2(w, c, e) * w % e, A = pow2(x, h, e) * x % e, N = pow2(A, c, e) * w % e, C = pow2(N, n, e) * g % e, W = pow2(C, a, e) * S % e, q = pow2(W, r, e) * p % e, I = pow2(q, _2n, e);
  if (!Fp.eql(Fp.sqr(I), t))
    throw new Error("Cannot find square root");
  return I;
}
const Fp = Field(secp256k1P, void 0, void 0, { sqrt: sqrtMod }), secp256k1 = createCurve({
  a: BigInt(0),
  // equation params: a, b
  b: BigInt(7),
  // Seem to be rigid: bitcointalk.org/index.php?topic=289795.msg3183975#msg3183975
  Fp,
  // Field's prime: 2n**256n - 2n**32n - 2n**9n - 2n**8n - 2n**7n - 2n**6n - 2n**4n - 1n
  n: secp256k1N,
  // Curve order, total count of valid points in the field
  // Base point (x, y) aka generator point
  Gx: BigInt("55066263022277343669578718895168534326250603453777594175500187360389116729240"),
  Gy: BigInt("32670510020758816978083085130507043184471273380659243275938904335757337482424"),
  h: BigInt(1),
  // Cofactor
  lowS: !0,
  // Allow only low-S signatures by default in sign() and verify()
  /**
   * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.
   * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.
   * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.
   * Explanation: https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066
   */
  endo: {
    beta: BigInt("0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee"),
    splitScalar: (t) => {
      const e = secp256k1N, n = BigInt("0x3086d221a7d46bcde86c90e49284eb15"), r = -_1n * BigInt("0xe4437ed6010e88286f547fa90abfe4c3"), s = BigInt("0x114ca50f7a8e2f3f657c1108d9d44cfd8"), o = n, a = BigInt("0x100000000000000000000000000000000"), c = divNearest(o * t, e), h = divNearest(-r * t, e);
      let p = mod(t - c * n - h * s, e), g = mod(-c * r - h * o, e);
      const y = p > a, $ = g > a;
      if (y && (p = e - p), $ && (g = e - g), p > a || g > a)
        throw new Error("splitScalar: Endomorphism failed, k=" + t);
      return { k1neg: y, k1: p, k2neg: $, k2: g };
    }
  }
}, sha256), _0n = BigInt(0), fe = (t) => typeof t == "bigint" && _0n < t && t < secp256k1P, ge = (t) => typeof t == "bigint" && _0n < t && t < secp256k1N, TAGGED_HASH_PREFIXES = {};
function taggedHash(t, ...e) {
  let n = TAGGED_HASH_PREFIXES[t];
  if (n === void 0) {
    const r = sha256(Uint8Array.from(t, (s) => s.charCodeAt(0)));
    n = concatBytes(r, r), TAGGED_HASH_PREFIXES[t] = n;
  }
  return sha256(concatBytes(n, ...e));
}
const pointToBytes = (t) => t.toRawBytes(!0).slice(1), numTo32b = (t) => numberToBytesBE(t, 32), modP = (t) => mod(t, secp256k1P), modN = (t) => mod(t, secp256k1N), Point = secp256k1.ProjectivePoint, GmulAdd = (t, e, n) => Point.BASE.multiplyAndAddUnsafe(t, e, n);
function schnorrGetExtPubKey(t) {
  let e = secp256k1.utils.normPrivateKeyToScalar(t), n = Point.fromPrivateKey(e);
  return { scalar: n.hasEvenY() ? e : modN(-e), bytes: pointToBytes(n) };
}
function lift_x(t) {
  if (!fe(t))
    throw new Error("bad x: need 0 < x < p");
  const e = modP(t * t), n = modP(e * t + BigInt(7));
  let r = sqrtMod(n);
  r % _2n !== _0n && (r = modP(-r));
  const s = new Point(t, r, _1n);
  return s.assertValidity(), s;
}
function challenge(...t) {
  return modN(bytesToNumberBE(taggedHash("BIP0340/challenge", ...t)));
}
function schnorrGetPublicKey(t) {
  return schnorrGetExtPubKey(t).bytes;
}
function schnorrSign(t, e, n = randomBytes$5(32)) {
  const r = ensureBytes("message", t), { bytes: s, scalar: o } = schnorrGetExtPubKey(e), a = ensureBytes("auxRand", n, 32), c = numTo32b(o ^ bytesToNumberBE(taggedHash("BIP0340/aux", a))), h = taggedHash("BIP0340/nonce", c, s, r), p = modN(bytesToNumberBE(h));
  if (p === _0n)
    throw new Error("sign failed: k is zero");
  const { bytes: g, scalar: y } = schnorrGetExtPubKey(p), $ = challenge(g, s, r), k = new Uint8Array(64);
  if (k.set(g, 0), k.set(numTo32b(modN(y + $ * o)), 32), !schnorrVerify(k, r, s))
    throw new Error("sign: Invalid signature produced");
  return k;
}
function schnorrVerify(t, e, n) {
  const r = ensureBytes("signature", t, 64), s = ensureBytes("message", e), o = ensureBytes("publicKey", n, 32);
  try {
    const a = lift_x(bytesToNumberBE(o)), c = bytesToNumberBE(r.subarray(0, 32));
    if (!fe(c))
      return !1;
    const h = bytesToNumberBE(r.subarray(32, 64));
    if (!ge(h))
      return !1;
    const p = challenge(numTo32b(c), pointToBytes(a), s), g = GmulAdd(a, h, modN(-p));
    return !(!g || !g.hasEvenY() || g.toAffine().x !== c);
  } catch {
    return !1;
  }
}
const schnorr = {
  getPublicKey: schnorrGetPublicKey,
  sign: schnorrSign,
  verify: schnorrVerify,
  utils: {
    randomPrivateKey: secp256k1.utils.randomPrivateKey,
    lift_x,
    pointToBytes,
    numberToBytesBE,
    bytesToNumberBE,
    taggedHash,
    mod
  }
};
var dist = {}, LRUCache$1 = {}, LRUCacheNode$1 = {};
Object.defineProperty(LRUCacheNode$1, "__esModule", { value: !0 });
LRUCacheNode$1.LRUCacheNode = void 0;
class LRUCacheNode {
  constructor(e, n, r) {
    const { entryExpirationTimeInMS: s = null, next: o = null, prev: a = null, onEntryEvicted: c, onEntryMarkedAsMostRecentlyUsed: h, clone: p, cloneFn: g } = r ?? {};
    if (typeof s == "number" && (s <= 0 || Number.isNaN(s)))
      throw new Error("entryExpirationTimeInMS must either be null (no expiry) or greater than 0");
    this.clone = p ?? !1, this.cloneFn = g ?? this.defaultClone, this.key = e, this.internalValue = this.clone ? this.cloneFn(n) : n, this.created = Date.now(), this.entryExpirationTimeInMS = s, this.next = o, this.prev = a, this.onEntryEvicted = c, this.onEntryMarkedAsMostRecentlyUsed = h;
  }
  get value() {
    return this.clone ? this.cloneFn(this.internalValue) : this.internalValue;
  }
  get isExpired() {
    return typeof this.entryExpirationTimeInMS == "number" && Date.now() - this.created > this.entryExpirationTimeInMS;
  }
  invokeOnEvicted() {
    if (this.onEntryEvicted) {
      const { key: e, value: n, isExpired: r } = this;
      this.onEntryEvicted({ key: e, value: n, isExpired: r });
    }
  }
  invokeOnEntryMarkedAsMostRecentlyUsed() {
    if (this.onEntryMarkedAsMostRecentlyUsed) {
      const { key: e, value: n } = this;
      this.onEntryMarkedAsMostRecentlyUsed({ key: e, value: n });
    }
  }
  defaultClone(e) {
    return typeof e == "boolean" || typeof e == "string" || typeof e == "number" ? e : JSON.parse(JSON.stringify(e));
  }
}
LRUCacheNode$1.LRUCacheNode = LRUCacheNode;
Object.defineProperty(LRUCache$1, "__esModule", { value: !0 });
LRUCache$1.LRUCache = void 0;
const LRUCacheNode_1 = LRUCacheNode$1;
class LRUCache {
  /**
   * Creates a new instance of the LRUCache.
   *
   * @param options Additional configuration options for the LRUCache.
   *
   * @example
   * ```typescript
   * // No options.
   * const cache = new LRUCache();
   *
   * // With options.
   * const cache = new LRUCache({
   *  entryExpirationTimeInMS: 10000
   * });
   * ```
   */
  constructor(e) {
    this.lookupTable = /* @__PURE__ */ new Map(), this.head = null, this.tail = null;
    const { maxSize: n = 25, entryExpirationTimeInMS: r = null, onEntryEvicted: s, onEntryMarkedAsMostRecentlyUsed: o, cloneFn: a, clone: c } = e ?? {};
    if (Number.isNaN(n) || n <= 0)
      throw new Error("maxSize must be greater than 0.");
    if (typeof r == "number" && (r <= 0 || Number.isNaN(r)))
      throw new Error("entryExpirationTimeInMS must either be null (no expiry) or greater than 0");
    this.maxSizeInternal = n, this.entryExpirationTimeInMS = r, this.onEntryEvicted = s, this.onEntryMarkedAsMostRecentlyUsed = o, this.clone = c, this.cloneFn = a;
  }
  /**
   * Returns the number of entries in the LRUCache object.
   * If the cache has entryExpirationTimeInMS set, expired entries will be removed before the size is returned.
   *
   * @returns The number of entries in the cache.
   *
   * @example
   * ```typescript
   * const cache = new LRUCache();
   *
   * cache.set('testKey', 'testValue');
   *
   * const size = cache.size;
   *
   * // Will log 1
   * console.log(size);
   * ```
   */
  get size() {
    return this.cleanCache(), this.lookupTable.size;
  }
  /**
   * Returns the number of entries that can still be added to the LRUCache without evicting existing entries.
   *
   * @returns The number of entries that can still be added without evicting existing entries.
   *
   * @example
   * ```typescript
   * const cache = new LRUCache({ maxSize: 10 });
   *
   * cache.set('testKey', 'testValue');
   *
   * const remainingSize = cache.remainingSize;
   *
   * // Will log 9 due to 9 spots remaining before reaching maxSize of 10.
   * console.log(remainingSize);
   * ```
   */
  get remainingSize() {
    return this.maxSizeInternal - this.size;
  }
  /**
   * Returns the most recently used (newest) entry in the cache.
   * This will not mark the entry as recently used.
   * If the newest node is expired, it will be removed.
   *
   * @returns The most recently used (newest) entry in the cache.
   *
   * @example
   * ```typescript
   * const cache = new LRUCache({ maxSize: 10 });
   *
   * cache.set('testKey', 'testValue');
   *
   * const newest = cache.newest;
   *
   * // Will log testValue
   * console.log(newest.value);
   *
   * // Will log testKey
   * console.log(newest.key);
   * ```
   */
  get newest() {
    return this.head ? this.head.isExpired ? (this.removeNodeFromListAndLookupTable(this.head), this.newest) : this.mapNodeToEntry(this.head) : null;
  }
  /**
   * Returns the least recently used (oldest) entry in the cache.
   * This will not mark the entry as recently used.
   * If the oldest node is expired, it will be removed.
   *
   * @returns The least recently used (oldest) entry in the cache.
   *
   * @example
   * ```typescript
   * const cache = new LRUCache({ maxSize: 10 });
   *
   * cache.set('testKey', 'testValue');
   *
   * const oldest = cache.oldest;
   *
   * // Will log testValue
   * console.log(oldest.value);
   *
   * // Will log testKey
   * console.log(oldest.key);
   * ```
   */
  get oldest() {
    return this.tail ? this.tail.isExpired ? (this.removeNodeFromListAndLookupTable(this.tail), this.oldest) : this.mapNodeToEntry(this.tail) : null;
  }
  /**
   * Gets or sets the maxSize of the cache.
   * This will evict the least recently used entries if needed to reach new maxSize.
   *
   * @param value The new value for maxSize. Must be greater than 0.
   *
   * @example
   * ```typescript
   * const cache = new LRUCache({ maxSize: 10 });
   *
   * cache.set('testKey', 'testValue');
   *
   * // Will be 10
   * const maxSize = cache.maxSize;
   *
   * // Set new maxSize to 5. If there are more than 5 items in the cache, the least recently used entries will be removed until cache size is 5.
   * cache.maxSize = 5;
   * ```
   */
  get maxSize() {
    return this.maxSizeInternal;
  }
  set maxSize(e) {
    if (Number.isNaN(e) || e <= 0)
      throw new Error("maxSize must be greater than 0.");
    this.maxSizeInternal = e, this.enforceSizeLimit();
  }
  /**
   * Sets the value for the key in the LRUCache object. Returns the LRUCache object.
   * This marks the newly added entry as the most recently used entry.
   * If adding the new entry makes the cache size go above maxSize,
   * this will evict the least recently used entries until size is equal to maxSize.
   *
   * @param key The key of the entry.
   * @param value The value to set for the key.
   * @param entryOptions Additional configuration options for the cache entry.
   *
   * @returns The LRUCache instance.
   *
   * @example
   * ```typescript
   * const cache = new LRUCache();
   *
   * // Set the key testKey to value testValue
   * cache.set('testKey', 'testValue');
   *
   * // Set the key key2 to value value2. Pass in optional options.
   * cache.set('key2', 'value2', { entryExpirationTimeInMS: 10 });
   * ```
   */
  set(e, n, r) {
    const s = this.lookupTable.get(e);
    s && this.removeNodeFromListAndLookupTable(s);
    const o = new LRUCacheNode_1.LRUCacheNode(e, n, {
      entryExpirationTimeInMS: this.entryExpirationTimeInMS,
      onEntryEvicted: this.onEntryEvicted,
      onEntryMarkedAsMostRecentlyUsed: this.onEntryMarkedAsMostRecentlyUsed,
      clone: this.clone,
      cloneFn: this.cloneFn,
      ...r
    });
    return this.setNodeAsHead(o), this.lookupTable.set(e, o), this.enforceSizeLimit(), this;
  }
  /**
   * Returns the value associated to the key, or null if there is none or if the entry is expired.
   * If an entry is returned, this marks the returned entry as the most recently used entry.
   *
   * @param key The key of the entry to get.
   *
   * @returns The cached value or null.
   *
   * @example
   * ```typescript
   * const cache = new LRUCache();
   *
   * // Set the key testKey to value testValue
   * cache.set('testKey', 'testValue');
   *
   * // Will be 'testValue'. Entry will now be most recently used.
   * const item1 = cache.get('testKey');
   *
   * // Will be null
   * const item2 = cache.get('keyNotInCache');
   * ```
   */
  get(e) {
    const n = this.lookupTable.get(e);
    return n ? n.isExpired ? (this.removeNodeFromListAndLookupTable(n), null) : (this.setNodeAsHead(n), n.value) : null;
  }
  /**
   * Returns the value associated to the key, or null if there is none or if the entry is expired.
   * If an entry is returned, this will not mark the entry as most recently accessed.
   * Useful if a value is needed but the order of the cache should not be changed.
   *
   * @param key The key of the entry to get.
   *
   * @returns The cached value or null.
   *
   * @example
   * ```typescript
   * const cache = new LRUCache();
   *
   * // Set the key testKey to value testValue
   * cache.set('testKey', 'testValue');
   *
   * // Will be 'testValue'
   * const item1 = cache.peek('testKey');
   *
   * // Will be null
   * const item2 = cache.peek('keyNotInCache');
   * ```
   */
  peek(e) {
    const n = this.lookupTable.get(e);
    return n ? n.isExpired ? (this.removeNodeFromListAndLookupTable(n), null) : n.value : null;
  }
  /**
   * Deletes the entry for the passed in key.
   *
   * @param key The key of the entry to delete
   *
   * @returns True if an element in the LRUCache object existed and has been removed,
   * or false if the element does not exist.
   *
   * @example
   * ```typescript
   * const cache = new LRUCache();
   *
   * // Set the key testKey to value testValue
   * cache.set('testKey', 'testValue');
   *
   * // Will be true
   * const wasDeleted = cache.delete('testKey');
   *
   * // Will be false
   * const wasDeleted2 = cache.delete('keyNotInCache');
   * ```
   */
  delete(e) {
    const n = this.lookupTable.get(e);
    return n ? this.removeNodeFromListAndLookupTable(n) : !1;
  }
  /**
   * Returns a boolean asserting whether a value has been associated to the key in the LRUCache object or not.
   * This does not mark the entry as recently used.
   * If the cache has a key but the entry is expired, it will be removed and false will be returned.
   *
   * @param key The key of the entry to check if exists
   *
   * @returns true if the cache contains the supplied key. False if not.
   *
   * @example
   * ```typescript
   * const cache = new LRUCache();
   *
   * // Set the key testKey to value testValue
   * cache.set('testKey', 'testValue');
   *
   * // Will be true
   * const wasDeleted = cache.has('testKey');
   *
   * // Will be false
   * const wasDeleted2 = cache.has('keyNotInCache');
   * ```
   */
  has(e) {
    const n = this.lookupTable.get(e);
    return n ? n.isExpired ? (this.removeNodeFromListAndLookupTable(n), !1) : !0 : !1;
  }
  /**
   * Removes all entries in the cache.
   *
   * @example
   * ```typescript
   * const cache = new LRUCache();
   *
   * // Set the key testKey to value testValue
   * cache.set('testKey', 'testValue');
   *
   * // Clear cache.
   * cache.clear();
   * ```
   */
  clear() {
    this.head = null, this.tail = null, this.lookupTable.clear();
  }
  /**
   * Searches the cache for an entry matching the passed in condition.
   * Expired entries will be skipped (and removed).
   * If multiply entries in the cache match the condition, the most recently used entry will be returned.
   * If an entry is returned, this marks the returned entry as the most recently used entry.
   *
   * @param condition The condition to apply to each entry in the
   *
   * @returns The first cache entry to match the condition. Null if none match.
   *
   * @example
   * ```typescript
   * const cache = new LRUCache();
   *
   * // Set the key testKey to value testValue
   * cache.set('testKey', 'testValue');
   *
   * // item will be { key: 'testKey', value: 'testValue }
   * const item = cache.find(entry => {
   *   const { key, value } = entry;
   *
   *   if (key === 'testKey' || value === 'something') {
   *     return true;
   *   }
   *
   *   return false;
   * });
   *
   * // item2 will be null
   * const item2 = cache.find(entry => entry.key === 'notInCache');
   * ```
   */
  find(e) {
    let n = this.head;
    for (; n; ) {
      if (n.isExpired) {
        const s = n.next;
        this.removeNodeFromListAndLookupTable(n), n = s;
        continue;
      }
      const r = this.mapNodeToEntry(n);
      if (e(r))
        return this.setNodeAsHead(n), r;
      n = n.next;
    }
    return null;
  }
  /**
   * Iterates over and applies the callback function to each entry in the cache.
   * Iterates in order from most recently accessed entry to least recently.
   * Expired entries will be skipped (and removed).
   * No entry will be marked as recently used.
   *
   * @param callback the callback function to apply to the entry
   *
   * @example
   * ```typescript
   * const cache = new LRUCache();
   *
   * // Set the key testKey to value testValue
   * cache.set('testKey', 'testValue');
   *
   * cache.forEach((key, value, index) => {
   *   // do something with key, value, and/or index
   * });
   * ```
   */
  forEach(e) {
    let n = this.head, r = 0;
    for (; n; ) {
      if (n.isExpired) {
        const s = n.next;
        this.removeNodeFromListAndLookupTable(n), n = s;
        continue;
      }
      e(n.value, n.key, r), n = n.next, r++;
    }
  }
  /**
   * Creates a Generator which can be used with for ... of ... to iterate over the cache values.
   * Iterates in order from most recently accessed entry to least recently.
   * Expired entries will be skipped (and removed).
   * No entry will be marked as accessed.
   *
   * @returns A Generator for the cache values.
   *
   * @example
   * ```typescript
   * const cache = new LRUCache();
   *
   * // Set the key testKey to value testValue
   * cache.set('testKey', 'testValue');
   *
   * for (const value of cache.values()) {
   *   // do something with the value
   * }
   * ```
   */
  *values() {
    let e = this.head;
    for (; e; ) {
      if (e.isExpired) {
        const n = e.next;
        this.removeNodeFromListAndLookupTable(e), e = n;
        continue;
      }
      yield e.value, e = e.next;
    }
  }
  /**
   * Creates a Generator which can be used with for ... of ... to iterate over the cache keys.
   * Iterates in order from most recently accessed entry to least recently.
   * Expired entries will be skipped (and removed).
   * No entry will be marked as accessed.
   *
   * @returns A Generator for the cache keys.
   *
   * @example
   * ```typescript
   * const cache = new LRUCache();
   *
   * // Set the key testKey to value testValue
   * cache.set('testKey', 'testValue');
   *
   * for (const key of cache.keys()) {
   *   // do something with the key
   * }
   * ```
   */
  *keys() {
    let e = this.head;
    for (; e; ) {
      if (e.isExpired) {
        const n = e.next;
        this.removeNodeFromListAndLookupTable(e), e = n;
        continue;
      }
      yield e.key, e = e.next;
    }
  }
  /**
   * Creates a Generator which can be used with for ... of ... to iterate over the cache entries.
   * Iterates in order from most recently accessed entry to least recently.
   * Expired entries will be skipped (and removed).
   * No entry will be marked as accessed.
   *
   * @returns A Generator for the cache entries.
   *
   * @example
   * ```typescript
   * const cache = new LRUCache();
   *
   * // Set the key testKey to value testValue
   * cache.set('testKey', 'testValue');
   *
   * for (const entry of cache.entries()) {
   *   const { key, value } = entry;
   *   // do something with the entry
   * }
   * ```
   */
  *entries() {
    let e = this.head;
    for (; e; ) {
      if (e.isExpired) {
        const n = e.next;
        this.removeNodeFromListAndLookupTable(e), e = n;
        continue;
      }
      yield this.mapNodeToEntry(e), e = e.next;
    }
  }
  /**
   * Creates a Generator which can be used with for ... of ... to iterate over the cache entries.
   * Iterates in order from most recently accessed entry to least recently.
   * Expired entries will be skipped (and removed).
   * No entry will be marked as accessed.
   *
   * @returns A Generator for the cache entries.
   *
   * @example
   * ```typescript
   * const cache = new LRUCache();
   *
   * // Set the key testKey to value testValue
   * cache.set('testKey', 'testValue');
   *
   * for (const entry of cache) {
   *   const { key, value } = entry;
   *   // do something with the entry
   * }
   * ```
   */
  *[Symbol.iterator]() {
    let e = this.head;
    for (; e; ) {
      if (e.isExpired) {
        const n = e.next;
        this.removeNodeFromListAndLookupTable(e), e = n;
        continue;
      }
      yield this.mapNodeToEntry(e), e = e.next;
    }
  }
  enforceSizeLimit() {
    let e = this.tail;
    for (; e !== null && this.size > this.maxSizeInternal; ) {
      const n = e.prev;
      this.removeNodeFromListAndLookupTable(e), e = n;
    }
  }
  mapNodeToEntry({ key: e, value: n }) {
    return {
      key: e,
      value: n
    };
  }
  setNodeAsHead(e) {
    this.removeNodeFromList(e), this.head ? (e.next = this.head, this.head.prev = e, this.head = e) : (this.head = e, this.tail = e), e.invokeOnEntryMarkedAsMostRecentlyUsed();
  }
  removeNodeFromList(e) {
    e.prev !== null && (e.prev.next = e.next), e.next !== null && (e.next.prev = e.prev), this.head === e && (this.head = e.next), this.tail === e && (this.tail = e.prev), e.next = null, e.prev = null;
  }
  removeNodeFromListAndLookupTable(e) {
    return e.invokeOnEvicted(), this.removeNodeFromList(e), this.lookupTable.delete(e.key);
  }
  cleanCache() {
    if (!this.entryExpirationTimeInMS)
      return;
    const e = [];
    for (const n of this.lookupTable.values())
      n.isExpired && e.push(n);
    e.forEach((n) => this.removeNodeFromListAndLookupTable(n));
  }
}
LRUCache$1.LRUCache = LRUCache;
(function(t) {
  var e = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function(r, s, o, a) {
    a === void 0 && (a = o);
    var c = Object.getOwnPropertyDescriptor(s, o);
    (!c || ("get" in c ? !s.__esModule : c.writable || c.configurable)) && (c = { enumerable: !0, get: function() {
      return s[o];
    } }), Object.defineProperty(r, a, c);
  } : function(r, s, o, a) {
    a === void 0 && (a = o), r[a] = s[o];
  }), n = commonjsGlobal && commonjsGlobal.__exportStar || function(r, s) {
    for (var o in r)
      o !== "default" && !Object.prototype.hasOwnProperty.call(s, o) && e(s, r, o);
  };
  Object.defineProperty(t, "__esModule", { value: !0 }), n(LRUCache$1, t);
})(dist);
var lib = {};
(function(t) {
  /*! scure-base - MIT License (c) 2022 Paul Miller (paulmillr.com) */
  Object.defineProperty(t, "__esModule", { value: !0 }), t.bytes = t.stringToBytes = t.str = t.bytesToString = t.hex = t.utf8 = t.bech32m = t.bech32 = t.base58check = t.base58xmr = t.base58xrp = t.base58flickr = t.base58 = t.base64url = t.base64 = t.base32crockford = t.base32hex = t.base32 = t.base16 = t.utils = t.assertNumber = void 0;
  function e(T) {
    if (!Number.isSafeInteger(T))
      throw new Error(`Wrong integer: ${T}`);
  }
  t.assertNumber = e;
  function n(...T) {
    const O = (E, B) => (H) => E(B(H)), K = Array.from(T).reverse().reduce((E, B) => E ? O(E, B.encode) : B.encode, void 0), ae = T.reduce((E, B) => E ? O(E, B.decode) : B.decode, void 0);
    return { encode: K, decode: ae };
  }
  function r(T) {
    return {
      encode: (O) => {
        if (!Array.isArray(O) || O.length && typeof O[0] != "number")
          throw new Error("alphabet.encode input should be an array of numbers");
        return O.map((K) => {
          if (e(K), K < 0 || K >= T.length)
            throw new Error(`Digit index outside alphabet: ${K} (alphabet: ${T.length})`);
          return T[K];
        });
      },
      decode: (O) => {
        if (!Array.isArray(O) || O.length && typeof O[0] != "string")
          throw new Error("alphabet.decode input should be array of strings");
        return O.map((K) => {
          if (typeof K != "string")
            throw new Error(`alphabet.decode: not string element=${K}`);
          const ae = T.indexOf(K);
          if (ae === -1)
            throw new Error(`Unknown letter: "${K}". Allowed: ${T}`);
          return ae;
        });
      }
    };
  }
  function s(T = "") {
    if (typeof T != "string")
      throw new Error("join separator should be string");
    return {
      encode: (O) => {
        if (!Array.isArray(O) || O.length && typeof O[0] != "string")
          throw new Error("join.encode input should be array of strings");
        for (let K of O)
          if (typeof K != "string")
            throw new Error(`join.encode: non-string input=${K}`);
        return O.join(T);
      },
      decode: (O) => {
        if (typeof O != "string")
          throw new Error("join.decode input should be string");
        return O.split(T);
      }
    };
  }
  function o(T, O = "=") {
    if (e(T), typeof O != "string")
      throw new Error("padding chr should be string");
    return {
      encode(K) {
        if (!Array.isArray(K) || K.length && typeof K[0] != "string")
          throw new Error("padding.encode input should be array of strings");
        for (let ae of K)
          if (typeof ae != "string")
            throw new Error(`padding.encode: non-string input=${ae}`);
        for (; K.length * T % 8; )
          K.push(O);
        return K;
      },
      decode(K) {
        if (!Array.isArray(K) || K.length && typeof K[0] != "string")
          throw new Error("padding.encode input should be array of strings");
        for (let E of K)
          if (typeof E != "string")
            throw new Error(`padding.decode: non-string input=${E}`);
        let ae = K.length;
        if (ae * T % 8)
          throw new Error("Invalid padding: string should have whole number of bytes");
        for (; ae > 0 && K[ae - 1] === O; ae--)
          if (!((ae - 1) * T % 8))
            throw new Error("Invalid padding: string has too much padding");
        return K.slice(0, ae);
      }
    };
  }
  function a(T) {
    if (typeof T != "function")
      throw new Error("normalize fn should be function");
    return { encode: (O) => O, decode: (O) => T(O) };
  }
  function c(T, O, K) {
    if (O < 2)
      throw new Error(`convertRadix: wrong from=${O}, base cannot be less than 2`);
    if (K < 2)
      throw new Error(`convertRadix: wrong to=${K}, base cannot be less than 2`);
    if (!Array.isArray(T))
      throw new Error("convertRadix: data should be array");
    if (!T.length)
      return [];
    let ae = 0;
    const E = [], B = Array.from(T);
    for (B.forEach((H) => {
      if (e(H), H < 0 || H >= O)
        throw new Error(`Wrong integer: ${H}`);
    }); ; ) {
      let H = 0, Q = !0;
      for (let F = ae; F < B.length; F++) {
        const ce = B[F], oe = O * H + ce;
        if (!Number.isSafeInteger(oe) || O * H / O !== H || oe - ce !== O * H)
          throw new Error("convertRadix: carry overflow");
        if (H = oe % K, B[F] = Math.floor(oe / K), !Number.isSafeInteger(B[F]) || B[F] * K + H !== oe)
          throw new Error("convertRadix: carry overflow");
        if (Q)
          B[F] ? Q = !1 : ae = F;
        else
          continue;
      }
      if (E.push(H), Q)
        break;
    }
    for (let H = 0; H < T.length - 1 && T[H] === 0; H++)
      E.push(0);
    return E.reverse();
  }
  const h = (T, O) => O ? h(O, T % O) : T, p = (T, O) => T + (O - h(T, O));
  function g(T, O, K, ae) {
    if (!Array.isArray(T))
      throw new Error("convertRadix2: data should be array");
    if (O <= 0 || O > 32)
      throw new Error(`convertRadix2: wrong from=${O}`);
    if (K <= 0 || K > 32)
      throw new Error(`convertRadix2: wrong to=${K}`);
    if (p(O, K) > 32)
      throw new Error(`convertRadix2: carry overflow from=${O} to=${K} carryBits=${p(O, K)}`);
    let E = 0, B = 0;
    const H = 2 ** K - 1, Q = [];
    for (const F of T) {
      if (e(F), F >= 2 ** O)
        throw new Error(`convertRadix2: invalid data word=${F} from=${O}`);
      if (E = E << O | F, B + O > 32)
        throw new Error(`convertRadix2: carry overflow pos=${B} from=${O}`);
      for (B += O; B >= K; B -= K)
        Q.push((E >> B - K & H) >>> 0);
      E &= 2 ** B - 1;
    }
    if (E = E << K - B & H, !ae && B >= O)
      throw new Error("Excess padding");
    if (!ae && E)
      throw new Error(`Non-zero padding: ${E}`);
    return ae && B > 0 && Q.push(E >>> 0), Q;
  }
  function y(T) {
    return e(T), {
      encode: (O) => {
        if (!(O instanceof Uint8Array))
          throw new Error("radix.encode input should be Uint8Array");
        return c(Array.from(O), 2 ** 8, T);
      },
      decode: (O) => {
        if (!Array.isArray(O) || O.length && typeof O[0] != "number")
          throw new Error("radix.decode input should be array of strings");
        return Uint8Array.from(c(O, T, 2 ** 8));
      }
    };
  }
  function $(T, O = !1) {
    if (e(T), T <= 0 || T > 32)
      throw new Error("radix2: bits should be in (0..32]");
    if (p(8, T) > 32 || p(T, 8) > 32)
      throw new Error("radix2: carry overflow");
    return {
      encode: (K) => {
        if (!(K instanceof Uint8Array))
          throw new Error("radix2.encode input should be Uint8Array");
        return g(Array.from(K), 8, T, !O);
      },
      decode: (K) => {
        if (!Array.isArray(K) || K.length && typeof K[0] != "number")
          throw new Error("radix2.decode input should be array of strings");
        return Uint8Array.from(g(K, T, 8, O));
      }
    };
  }
  function k(T) {
    if (typeof T != "function")
      throw new Error("unsafeWrapper fn should be function");
    return function(...O) {
      try {
        return T.apply(null, O);
      } catch {
      }
    };
  }
  function S(T, O) {
    if (e(T), typeof O != "function")
      throw new Error("checksum fn should be function");
    return {
      encode(K) {
        if (!(K instanceof Uint8Array))
          throw new Error("checksum.encode: input should be Uint8Array");
        const ae = O(K).slice(0, T), E = new Uint8Array(K.length + T);
        return E.set(K), E.set(ae, K.length), E;
      },
      decode(K) {
        if (!(K instanceof Uint8Array))
          throw new Error("checksum.decode: input should be Uint8Array");
        const ae = K.slice(0, -T), E = O(ae).slice(0, T), B = K.slice(-T);
        for (let H = 0; H < T; H++)
          if (E[H] !== B[H])
            throw new Error("Invalid checksum");
        return ae;
      }
    };
  }
  t.utils = { alphabet: r, chain: n, checksum: S, radix: y, radix2: $, join: s, padding: o }, t.base16 = n($(4), r("0123456789ABCDEF"), s("")), t.base32 = n($(5), r("ABCDEFGHIJKLMNOPQRSTUVWXYZ234567"), o(5), s("")), t.base32hex = n($(5), r("0123456789ABCDEFGHIJKLMNOPQRSTUV"), o(5), s("")), t.base32crockford = n($(5), r("0123456789ABCDEFGHJKMNPQRSTVWXYZ"), s(""), a((T) => T.toUpperCase().replace(/O/g, "0").replace(/[IL]/g, "1"))), t.base64 = n($(6), r("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"), o(6), s("")), t.base64url = n($(6), r("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"), o(6), s(""));
  const w = (T) => n(y(58), r(T), s(""));
  t.base58 = w("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"), t.base58flickr = w("123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ"), t.base58xrp = w("rpshnaf39wBUDNEGHJKLM4PQRST7VWXYZ2bcdeCg65jkm8oFqi1tuvAxyz");
  const x = [0, 2, 3, 5, 6, 7, 9, 10, 11];
  t.base58xmr = {
    encode(T) {
      let O = "";
      for (let K = 0; K < T.length; K += 8) {
        const ae = T.subarray(K, K + 8);
        O += t.base58.encode(ae).padStart(x[ae.length], "1");
      }
      return O;
    },
    decode(T) {
      let O = [];
      for (let K = 0; K < T.length; K += 11) {
        const ae = T.slice(K, K + 11), E = x.indexOf(ae.length), B = t.base58.decode(ae);
        for (let H = 0; H < B.length - E; H++)
          if (B[H] !== 0)
            throw new Error("base58xmr: wrong padding");
        O = O.concat(Array.from(B.slice(B.length - E)));
      }
      return Uint8Array.from(O);
    }
  };
  const A = (T) => n(S(4, (O) => T(T(O))), t.base58);
  t.base58check = A;
  const N = n(r("qpzry9x8gf2tvdw0s3jn54khce6mua7l"), s("")), C = [996825010, 642813549, 513874426, 1027748829, 705979059];
  function W(T) {
    const O = T >> 25;
    let K = (T & 33554431) << 5;
    for (let ae = 0; ae < C.length; ae++)
      (O >> ae & 1) === 1 && (K ^= C[ae]);
    return K;
  }
  function q(T, O, K = 1) {
    const ae = T.length;
    let E = 1;
    for (let B = 0; B < ae; B++) {
      const H = T.charCodeAt(B);
      if (H < 33 || H > 126)
        throw new Error(`Invalid prefix (${T})`);
      E = W(E) ^ H >> 5;
    }
    E = W(E);
    for (let B = 0; B < ae; B++)
      E = W(E) ^ T.charCodeAt(B) & 31;
    for (let B of O)
      E = W(E) ^ B;
    for (let B = 0; B < 6; B++)
      E = W(E);
    return E ^= K, N.encode(g([E % 2 ** 30], 30, 5, !1));
  }
  function I(T) {
    const O = T === "bech32" ? 1 : 734539939, K = $(5), ae = K.decode, E = K.encode, B = k(ae);
    function H(oe, le, ve = 90) {
      if (typeof oe != "string")
        throw new Error(`bech32.encode prefix should be string, not ${typeof oe}`);
      if (!Array.isArray(le) || le.length && typeof le[0] != "number")
        throw new Error(`bech32.encode words should be array of numbers, not ${typeof le}`);
      const xe = oe.length + 7 + le.length;
      if (ve !== !1 && xe > ve)
        throw new TypeError(`Length ${xe} exceeds limit ${ve}`);
      return oe = oe.toLowerCase(), `${oe}1${N.encode(le)}${q(oe, le, O)}`;
    }
    function Q(oe, le = 90) {
      if (typeof oe != "string")
        throw new Error(`bech32.decode input should be string, not ${typeof oe}`);
      if (oe.length < 8 || le !== !1 && oe.length > le)
        throw new TypeError(`Wrong string length: ${oe.length} (${oe}). Expected (8..${le})`);
      const ve = oe.toLowerCase();
      if (oe !== ve && oe !== oe.toUpperCase())
        throw new Error("String must be lowercase or uppercase");
      oe = ve;
      const xe = oe.lastIndexOf("1");
      if (xe === 0 || xe === -1)
        throw new Error('Letter "1" must be present between prefix and data only');
      const Se = oe.slice(0, xe), Te = oe.slice(xe + 1);
      if (Te.length < 6)
        throw new Error("Data must be at least 6 characters long");
      const Ae = N.decode(Te).slice(0, -6), Oe = q(Se, Ae, O);
      if (!Te.endsWith(Oe))
        throw new Error(`Invalid checksum in ${oe}: expected "${Oe}"`);
      return { prefix: Se, words: Ae };
    }
    const F = k(Q);
    function ce(oe) {
      const { prefix: le, words: ve } = Q(oe, !1);
      return { prefix: le, words: ve, bytes: ae(ve) };
    }
    return { encode: H, decode: Q, decodeToBytes: ce, decodeUnsafe: F, fromWords: ae, fromWordsUnsafe: B, toWords: E };
  }
  t.bech32 = I("bech32"), t.bech32m = I("bech32m"), t.utf8 = {
    encode: (T) => new TextDecoder().decode(T),
    decode: (T) => new TextEncoder().encode(T)
  }, t.hex = n($(4), r("0123456789abcdef"), s(""), a((T) => {
    if (typeof T != "string" || T.length % 2)
      throw new TypeError(`hex.decode: expected string, got ${typeof T} with length ${T.length}`);
    return T.toLowerCase();
  }));
  const L = {
    utf8: t.utf8,
    hex: t.hex,
    base16: t.base16,
    base32: t.base32,
    base64: t.base64,
    base64url: t.base64url,
    base58: t.base58,
    base58xmr: t.base58xmr
  }, P = `Invalid encoding type. Available types: ${Object.keys(L).join(", ")}`, ie = (T, O) => {
    if (typeof T != "string" || !L.hasOwnProperty(T))
      throw new TypeError(P);
    if (!(O instanceof Uint8Array))
      throw new TypeError("bytesToString() expects Uint8Array");
    return L[T].encode(O);
  };
  t.bytesToString = ie, t.str = t.bytesToString;
  const te = (T, O) => {
    if (!L.hasOwnProperty(T))
      throw new TypeError(P);
    if (typeof O != "string")
      throw new TypeError("stringToBytes() expects string");
    return L[T].decode(O);
  };
  t.stringToBytes = te, t.bytes = t.stringToBytes;
})(lib);
BigInt(1e3), BigInt(1e6), BigInt(1e9), BigInt(1e12);
BigInt("2100000000000000000");
BigInt(1e11);
const TAGCODES = {
  payment_hash: 1,
  payment_secret: 16,
  description: 13,
  payee: 19,
  description_hash: 23,
  // commit to longer descriptions (used by lnurl-pay)
  expiry: 6,
  // default: 3600 (1 hour)
  min_final_cltv_expiry: 24,
  // default: 9
  fallback_address: 9,
  route_hint: 3,
  // for extra routing info (private etc.)
  feature_bits: 5,
  metadata: 27
};
for (let t = 0, e = Object.keys(TAGCODES); t < e.length; t++)
  e[t], TAGCODES[e[t]].toString();
function getTopRelaysForAuthors(t, e) {
  const n = /* @__PURE__ */ new Map();
  return e.forEach((s) => {
    const o = getWriteRelaysFor(t, s);
    o && o.forEach((a) => {
      const c = n.get(a) || 0;
      n.set(a, c + 1);
    });
  }), Array.from(n.entries()).sort((s, o) => o[1] - s[1]).map((s) => s[0]);
}
function getWriteRelaysFor(t, e) {
  var n;
  if (t.outboxTracker)
    return (n = t.outboxTracker.data.get(e)) == null ? void 0 : n.writeRelays;
}
function getAllRelaysForAllPubkeys(t, e) {
  const n = /* @__PURE__ */ new Map(), r = /* @__PURE__ */ new Set();
  return e.forEach((s) => {
    const o = getWriteRelaysFor(t, s);
    o && o.size > 0 ? (o.forEach((a) => {
      const c = n.get(a) || /* @__PURE__ */ new Set();
      c.add(s), n.set(a, c);
    }), n.set(s, o)) : r.add(s);
  }), { pubkeysToRelays: n, authorsMissingRelays: r };
}
function getRelaysForFilterWithAuthors(t, e, n, r = 2) {
  const s = /* @__PURE__ */ new Map(), { pubkeysToRelays: o, authorsMissingRelays: a } = getAllRelaysForAllPubkeys(t, e), c = getTopRelaysForAuthors(t, e), h = (p, g) => {
    const y = s.get(g) || [];
    y.push(p), s.set(g, y);
  };
  for (const [p, g] of o.entries()) {
    let y = r;
    const $ = n.connectedRelays();
    for (const k of $)
      g.has(k.url) && (h(p, k.url), y--);
    for (const k of g)
      s.has(k) && (h(p, k), y--);
    if (!(y <= 0))
      for (const k of c) {
        if (y <= 0)
          break;
        g.has(k) && (h(p, k), y--);
      }
  }
  for (const p of a)
    n.permanentAndConnectedRelays().forEach((g) => {
      const y = s.get(g.url) || [];
      y.push(p), s.set(g.url, y);
    });
  return s;
}
async function runWithTimeout(t, e, n) {
  return e ? new Promise((r, s) => {
    const o = setTimeout(() => {
      s(new Error(n));
    }, e);
    t().then(r, s).finally(() => clearTimeout(o));
  }) : t();
}
var NDKRelayConnectivity = class {
  constructor(t) {
    M(this, "ndkRelay");
    M(this, "_status");
    M(this, "relay");
    M(this, "timeoutMs");
    M(this, "connectedAt");
    M(this, "_connectionStats", {
      attempts: 0,
      success: 0,
      durations: []
    });
    M(this, "debug");
    M(this, "reconnectTimeout");
    /**
     * Utility functions to update the connection stats.
     */
    M(this, "updateConnectionStats", {
      connected: () => {
        this._connectionStats.success++, this._connectionStats.connectedAt = Date.now();
      },
      disconnected: () => {
        this._connectionStats.connectedAt && (this._connectionStats.durations.push(
          Date.now() - this._connectionStats.connectedAt
        ), this._connectionStats.durations.length > 100 && this._connectionStats.durations.shift()), this._connectionStats.connectedAt = void 0;
      },
      attempt: () => {
        this._connectionStats.attempts++;
      }
    });
    this.ndkRelay = t, this._status = 3, this.relay = relayInit(this.ndkRelay.url), this.debug = this.ndkRelay.debug.extend("connectivity"), this.relay.on("notice", (e) => this.handleNotice(e));
  }
  async connect(t) {
    this.reconnectTimeout && (clearTimeout(this.reconnectTimeout), this.reconnectTimeout = void 0), t ?? (t = this.timeoutMs), !this.timeoutMs && t && (this.timeoutMs = t);
    const e = () => {
      this.updateConnectionStats.connected(), this._status = 1, this.ndkRelay.emit("connect"), this.ndkRelay.emit("ready");
    }, n = () => {
      this.updateConnectionStats.disconnected(), this._status === 1 && (this._status = 3, this.handleReconnection()), this.ndkRelay.emit("disconnect");
    }, r = async (s) => {
      this.debug("Relay requested authentication", {
        havePolicy: !!this.ndkRelay.authPolicy
      }), this.ndkRelay.authPolicy ? this._status !== 7 && (this._status = 7, await this.ndkRelay.authPolicy(this.ndkRelay, s), this._status === 7 && (this.debug("Authentication policy finished"), this._status = 1, this.ndkRelay.emit("authed"))) : await this.ndkRelay.emit("auth", s);
    };
    try {
      this.updateConnectionStats.attempt(), this._status === 3 ? this._status = 0 : this._status = 4, this.relay.off("connect", e), this.relay.off("disconnect", n), this.relay.on("connect", e), this.relay.on("disconnect", n), this.relay.on("auth", r), await runWithTimeout(this.relay.connect, t, "Timed out while connecting");
    } catch (s) {
      throw this._status = 3, this.handleReconnection(), s;
    }
  }
  disconnect() {
    this._status = 2, this.relay.close();
  }
  get status() {
    return this._status;
  }
  isAvailable() {
    return this._status === 1;
  }
  /**
   * Evaluates the connection stats to determine if the relay is flapping.
   */
  isFlapping() {
    const t = this._connectionStats.durations;
    if (t.length % 3 !== 0)
      return !1;
    const n = t.reduce((a, c) => a + c, 0) / t.length, r = t.map((a) => Math.pow(a - n, 2)).reduce((a, c) => a + c, 0) / t.length;
    return Math.sqrt(r) < 1e3;
  }
  async handleNotice(t) {
    (t.includes("oo many") || t.includes("aximum")) && (this.disconnect(), setTimeout(() => this.connect(), 2e3), this.debug(this.relay.url, "Relay complaining?", t)), this.ndkRelay.emit("notice", this.relay, t);
  }
  /**
   * Called when the relay is unexpectedly disconnected.
   */
  handleReconnection(t = 0) {
    if (this.reconnectTimeout)
      return;
    if (this.debug("Attempting to reconnect", { attempt: t }), this.isFlapping()) {
      this.ndkRelay.emit("flapping", this, this._connectionStats), this._status = 5;
      return;
    }
    const e = this.connectedAt ? Math.max(0, 6e4 - (Date.now() - this.connectedAt)) : 5e3 * (this._connectionStats.attempts + 1);
    this.reconnectTimeout = setTimeout(() => {
      this.reconnectTimeout = void 0, this._status = 4, this.connect().then(() => {
        this.debug("Reconnected");
      }).catch((n) => {
        t < 5 ? setTimeout(() => {
          this.handleReconnection(t + 1);
        }, 1e3 * (t + 1) ^ 2.5) : this.debug("Reconnect failed after 5 attempts");
      });
    }, e), this.debug("Reconnecting in", e), this._connectionStats.nextReconnectAt = Date.now() + e;
  }
  /**
   * Returns the connection stats.
   */
  get connectionStats() {
    return this._connectionStats;
  }
}, NDKRelayPublisher = class {
  constructor(t) {
    M(this, "ndkRelay");
    this.ndkRelay = t;
  }
  /**
   * Published an event to the relay; if the relay is not connected, it will
   * wait for the relay to connect before publishing the event.
   *
   * If the relay does not connect within the timeout, the publish operation
   * will fail.
   * @param event  The event to publish
   * @param timeoutMs  The timeout for the publish operation in milliseconds
   * @returns A promise that resolves when the event has been published or rejects if the operation times out
   */
  async publish(t, e = 2500) {
    const n = () => new Promise((c, h) => {
      try {
        this.publishEvent(t, e).then((p) => c(p)).catch((p) => h(p));
      } catch (p) {
        h(p);
      }
    }), r = new Promise((c, h) => {
      setTimeout(() => h(new Error("Timeout")), e);
    }), s = () => {
      n().then((c) => o(c)).catch((c) => a(c));
    };
    let o, a;
    return this.ndkRelay.status === 1 ? Promise.race([n(), r]) : Promise.race([
      new Promise((c, h) => {
        o = c, a = h, this.ndkRelay.once("connect", s);
      }),
      r
    ]).finally(() => {
      this.ndkRelay.removeListener("connect", s);
    });
  }
  async publishEvent(t, e) {
    const n = await t.toNostrEvent(), r = this.ndkRelay.connectivity.relay.publish(n);
    let s;
    const o = new Promise((c, h) => {
      r.then(() => {
        clearTimeout(s), this.ndkRelay.emit("published", t), c(!0);
      }).catch((p) => {
        clearTimeout(s), this.ndkRelay.debug("Publish failed", p, t.id), this.ndkRelay.emit("publish:failed", t, p), h(p);
      });
    });
    if (!e || t.isEphemeral())
      return o;
    const a = new Promise((c, h) => {
      s = setTimeout(() => {
        this.ndkRelay.debug("Publish timed out", t.rawEvent()), this.ndkRelay.emit("publish:failed", t, "Timeout"), h(new Error("Publish operation timed out"));
      }, e);
    });
    return Promise.race([o, a]);
  }
  async auth(t) {
    return this.ndkRelay.connectivity.relay.auth(t.rawEvent());
  }
};
function calculateGroupableId(t, e) {
  const n = [];
  for (const s of t) {
    if (s.since || s.until)
      return null;
    const a = Object.keys(s || {}).sort().join("-");
    n.push(a);
  }
  let r = e ? "+" : "";
  return r += n.join("|"), r;
}
function mergeFilters(t) {
  const e = {};
  return t.forEach((n) => {
    Object.entries(n).forEach(([r, s]) => {
      Array.isArray(s) ? e[r] === void 0 ? e[r] = [...s] : e[r] = Array.from(/* @__PURE__ */ new Set([...e[r], ...s])) : e[r] = s;
    });
  }), e;
}
var MAX_SUBID_LENGTH = 20;
function queryFullyFilled(t) {
  return !!(filterIncludesIds(t.filter) && resultHasAllRequestedIds(t));
}
function compareFilter(t, e) {
  if (Object.keys(t).length !== Object.keys(e).length)
    return !1;
  for (const [n, r] of Object.entries(t)) {
    const s = e[n];
    if (!s)
      return !1;
    if (Array.isArray(r) && Array.isArray(s)) {
      const o = r;
      for (const a of s) {
        const c = a;
        if (!o.includes(c))
          return !1;
      }
    } else if (s !== r)
      return !1;
  }
  return !0;
}
function filterIncludesIds(t) {
  return !!t.ids;
}
function resultHasAllRequestedIds(t) {
  const e = t.filter.ids;
  return !!e && e.length === t.eventFirstSeen.size;
}
function generateSubId(t, e) {
  var c;
  const n = t.map((h) => h.subId).filter(Boolean), r = [], s = /* @__PURE__ */ new Set(), o = /* @__PURE__ */ new Set();
  if (n.length > 0)
    r.push(Array.from(new Set(n)).join(","));
  else {
    for (const h of e)
      for (const p of Object.keys(h))
        p === "kinds" ? (c = h.kinds) == null || c.forEach((g) => o.add(g)) : s.add(p);
    o.size > 0 && r.push("kinds:" + Array.from(o).join(",")), s.size > 0 && r.push(Array.from(s).join(","));
  }
  let a = r.join("-");
  return a.length > MAX_SUBID_LENGTH && (a = a.substring(0, MAX_SUBID_LENGTH)), a += "-" + Math.floor(Math.random() * 999).toString(), a;
}
function filterFromId(t) {
  let e;
  if (t.match(NIP33_A_REGEX)) {
    const [n, r, s] = t.split(":"), o = {
      authors: [r],
      kinds: [parseInt(n)]
    };
    return s && (o["#d"] = [s]), o;
  }
  if (t.match(BECH32_REGEX))
    try {
      switch (e = nip19_exports.decode(t), e.type) {
        case "nevent":
          return { ids: [e.data.id] };
        case "note":
          return { ids: [e.data] };
        case "naddr":
          return {
            authors: [e.data.pubkey],
            "#d": [e.data.identifier],
            kinds: [e.data.kind]
          };
      }
    } catch (n) {
      console.error("Error decoding", t, n);
    }
  return { ids: [t] };
}
function isNip33AValue(t) {
  return t.match(NIP33_A_REGEX) !== null;
}
var NIP33_A_REGEX = /^(\d+):([0-9A-Fa-f]+)(?::(.*))?$/, BECH32_REGEX = /^n(event|ote|profile|pub|addr)1[\d\w]+$/;
function relaysFromBech32(t) {
  try {
    const e = nip19_exports.decode(t);
    if (["naddr", "nevent"].includes(e == null ? void 0 : e.type)) {
      const n = e.data;
      if (n != null && n.relays)
        return n.relays.map((r) => new NDKRelay(r));
    }
  } catch {
  }
  return [];
}
var NDKGroupedSubscriptions = class extends lib$1.EventEmitter {
  constructor(e, n) {
    super();
    M(this, "subscriptions");
    M(this, "req");
    M(this, "debug");
    this.subscriptions = e, this.debug = n || this.subscriptions[0].subscription.debug.extend("grouped");
    for (const r of e)
      this.handleSubscriptionClosure(r);
  }
  /**
   * Adds a subscription to this group.
   * @param subscription
   */
  addSubscription(e) {
    this.subscriptions.push(e), this.handleSubscriptionClosure(e);
  }
  eventReceived(e) {
    for (const n of this.subscriptions)
      n.eventReceived(e);
  }
  eoseReceived(e) {
    Array.from(this.subscriptions).forEach(async (r) => {
      r.subscription.eoseReceived(e);
    });
  }
  handleSubscriptionClosure(e) {
    e.subscription.on("close", () => {
      const n = this.subscriptions.findIndex(
        (r) => r.subscription === e.subscription
      );
      this.subscriptions.splice(n, 1), this.subscriptions.length <= 0 && this.emit("close");
    });
  }
  /**
   * Maps each subscription through a transformation function.
   * @param fn - The transformation function.
   * @returns A new array with each subscription transformed by fn.
   */
  map(e) {
    return this.subscriptions.map(e);
  }
  [Symbol.iterator]() {
    let e = 0;
    const n = this.subscriptions;
    return {
      next() {
        return e < n.length ? { value: n[e++], done: !1 } : { value: null, done: !0 };
      }
    };
  }
}, NDKSubscriptionFilters = class {
  constructor(t, e, n) {
    M(this, "subscription");
    M(this, "filters", []);
    M(this, "ndkRelay");
    this.subscription = t, this.filters = e, this.ndkRelay = n;
  }
  eventReceived(t) {
    if (!this.eventMatchesLocalFilter(t))
      return;
    const e = new NDKEvent(void 0, t);
    e.relay = this.ndkRelay, this.subscription.eventReceived(e, this.ndkRelay, !1);
  }
  eventMatchesLocalFilter(t) {
    return this.filters.some((e) => matchFilter(e, t));
  }
};
function findMatchingActiveSubscriptions(t, e) {
  if (t.length !== e.length)
    return !1;
  for (let n = 0; n < t.length && compareFilter(t[n], e[n]); n++)
    return t[n];
}
var NDKRelaySubscriptions = class {
  constructor(t) {
    M(this, "ndkRelay");
    M(this, "delayedItems", /* @__PURE__ */ new Map());
    M(this, "delayedTimers", /* @__PURE__ */ new Map());
    /**
     * Active subscriptions this relay is connected to
     */
    M(this, "activeSubscriptions", /* @__PURE__ */ new Map());
    M(this, "activeSubscriptionsByGroupId", /* @__PURE__ */ new Map());
    M(this, "executionTimeoutsByGroupId", /* @__PURE__ */ new Map());
    M(this, "debug");
    M(this, "groupingDebug");
    M(this, "conn");
    this.ndkRelay = t, this.conn = t.connectivity, this.debug = t.debug.extend("subscriptions"), this.groupingDebug = t.debug.extend("grouping");
  }
  /**
   * Creates or queues a subscription to the relay.
   */
  subscribe(t, e) {
    const n = calculateGroupableId(e, t.closeOnEose), r = new NDKSubscriptionFilters(
      t,
      e,
      this.ndkRelay
    );
    if (!n || !t.isGroupable()) {
      this.executeSubscriptions(
        n,
        // hacky
        new NDKGroupedSubscriptions([r]),
        e
      );
      return;
    }
    const o = this.activeSubscriptionsByGroupId.get(n);
    if (o && findMatchingActiveSubscriptions(
      o.filters,
      e
    )) {
      const p = this.activeSubscriptions.get(o.sub);
      p == null || p.addSubscription(
        new NDKSubscriptionFilters(t, e, this.ndkRelay)
      );
      return;
    }
    let a = this.delayedItems.get(n);
    a ? a.addSubscription(r) : (a = new NDKGroupedSubscriptions([r]), this.delayedItems.set(n, a), a.once("close", () => {
      this.delayedItems.get(n) && this.delayedItems.delete(n);
    }));
    let c = this.executionTimeoutsByGroupId.get(n);
    (!c || t.opts.groupableDelayType === "at-most") && (c = setTimeout(() => {
      this.executeGroup(n, t);
    }, t.opts.groupableDelay), this.executionTimeoutsByGroupId.set(n, c)), this.delayedTimers.has(n) ? this.delayedTimers.get(n).push(c) : this.delayedTimers.set(n, [c]);
  }
  /**
   * Executes a delayed subscription via its groupable ID.
   * @param groupableId
   */
  executeGroup(t, e) {
    const n = this.delayedItems.get(t);
    this.delayedItems.delete(t);
    const r = this.delayedTimers.get(t);
    if (this.delayedTimers.delete(t), r)
      for (const s of r)
        clearTimeout(s);
    if (n) {
      const s = n.subscriptions[0].filters.length, o = [];
      for (let a = 0; a < s; a++) {
        const c = n.map((h) => h.filters[a]);
        o.push(mergeFilters(c));
      }
      this.executeSubscriptions(t, n, o);
    }
  }
  executeSubscriptionsWhenConnected(t, e, n) {
    const r = () => {
      this.executeSubscriptionsConnected(t, e, n);
    };
    this.ndkRelay.once("ready", r), e.once("close", () => {
      this.ndkRelay.removeListener("ready", r);
    });
  }
  /**
   * Executes one or more subscriptions.
   *
   * If the relay is not connected, subscriptions will be queued
   * until the relay connects.
   *
   * @param groupableId
   * @param subscriptionFilters
   * @param mergedFilters
   */
  executeSubscriptions(t, e, n) {
    this.conn.isAvailable() ? this.executeSubscriptionsConnected(t, e, n) : this.executeSubscriptionsWhenConnected(
      t,
      e,
      n
    );
  }
  /**
   * Executes one or more subscriptions.
   *
   * When there are more than one subscription, results
   * will be sent to the right subscription
   *
   * @param subscriptions
   * @param filters The filters as they should be sent to the relay
   */
  executeSubscriptionsConnected(t, e, n) {
    const r = [];
    for (const { subscription: c } of e)
      r.push(c);
    const s = generateSubId(r, n);
    e.req = n;
    const o = { id: s };
    o.skipVerification = !0;
    const a = this.conn.relay.sub(n, o);
    return this.activeSubscriptions.set(a, e), t && this.activeSubscriptionsByGroupId.set(t, { filters: n, sub: a }), a.on("event", (c) => {
      const h = this.activeSubscriptions.get(a);
      h == null || h.eventReceived(c);
    }), a.on("eose", () => {
      const c = this.activeSubscriptions.get(a);
      c == null || c.eoseReceived(this.ndkRelay);
    }), e.once("close", () => {
      a.unsub(), this.activeSubscriptions.delete(a), t && this.activeSubscriptionsByGroupId.delete(t);
    }), this.executeSubscriptionsWhenConnected(t, e, n), a;
  }
  executedFilters() {
    const t = /* @__PURE__ */ new Map();
    for (const [, e] of this.activeSubscriptions)
      t.set(
        e.req,
        e.map((n) => n.subscription)
      );
    return t;
  }
}, NDKRelay = class extends lib$1.EventEmitter {
  constructor(e, n) {
    super();
    M(this, "url");
    M(this, "scores");
    M(this, "connectivity");
    M(this, "subs");
    M(this, "publisher");
    M(this, "authPolicy");
    M(this, "validationRatio");
    M(this, "validatedEventCount", 0);
    M(this, "skippedEventCount", 0);
    /**
     * Whether this relay is trusted.
     *
     * Trusted relay's events do not get their signature verified.
     */
    M(this, "trusted", !1);
    M(this, "complaining", !1);
    M(this, "debug");
    this.url = e, this.scores = /* @__PURE__ */ new Map(), this.debug = debug(`ndk:relay:${e}`), this.connectivity = new NDKRelayConnectivity(this), this.subs = new NDKRelaySubscriptions(this), this.publisher = new NDKRelayPublisher(this), this.authPolicy = n, this.validationRatio = void 0;
  }
  get status() {
    return this.connectivity.status;
  }
  get connectionStats() {
    return this.connectivity.connectionStats;
  }
  /**
   * Connects to the relay.
   */
  async connect(e) {
    return this.connectivity.connect(e);
  }
  /**
   * Disconnects from the relay.
   */
  disconnect() {
    this.status !== 3 && this.connectivity.disconnect();
  }
  /**
   * Queues or executes the subscription of a specific set of filters
   * within this relay.
   *
   * @param subscription NDKSubscription this filters belong to.
   * @param filters Filters to execute
   */
  subscribe(e, n) {
    this.subs.subscribe(e, n);
  }
  /**
   * Publishes an event to the relay with an optional timeout.
   *
   * If the relay is not connected, the event will be published when the relay connects,
   * unless the timeout is reached before the relay connects.
   *
   * @param event The event to publish
   * @param timeoutMs The timeout for the publish operation in milliseconds
   * @returns A promise that resolves when the event has been published or rejects if the operation times out
   */
  async publish(e, n = 2500) {
    return this.publisher.publish(e, n);
  }
  async auth(e) {
    return this.publisher.auth(e);
  }
  /**
   * Called when this relay has responded with an event but
   * wasn't the fastest one.
   * @param timeDiffInMs The time difference in ms between the fastest and this relay in milliseconds
   */
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  scoreSlowerEvent(e) {
  }
  /** @deprecated Use referenceTags instead. */
  tagReference(e) {
    const n = ["r", this.url];
    return e && n.push(e), n;
  }
  referenceTags() {
    return [["r", this.url]];
  }
  activeSubscriptions() {
    return this.subs.executedFilters();
  }
  addValidatedEvent() {
    this.validatedEventCount++;
  }
  addSkippedEvent() {
    this.skippedEventCount++;
  }
  getValidationRatio() {
    return this.skippedEventCount === 0 ? 1 : this.validatedEventCount / (this.validatedEventCount + this.skippedEventCount);
  }
  shouldValidateEvent() {
    return this.trusted ? !1 : this.validationRatio === void 0 ? !0 : this.getValidationRatio() < this.validationRatio;
  }
}, PublishError = class extends Error {
  constructor(e, n) {
    super(e);
    M(this, "errors");
    this.errors = n;
  }
  get relayErrors() {
    const e = [];
    for (const [n, r] of this.errors)
      e.push(`${n.url}: ${r}`);
    return e.join(`
`);
  }
}, NDKRelaySet = class Hr {
  constructor(e, n) {
    M(this, "relays");
    M(this, "debug");
    M(this, "ndk");
    this.relays = e, this.ndk = n, this.debug = n.debug.extend("relayset");
  }
  /**
   * Adds a relay to this set.
   */
  addRelay(e) {
    this.relays.add(e);
  }
  /**
   * Creates a relay set from a list of relay URLs.
   *
   * If no connection to the relay is found in the pool it will temporarily
   * connect to it.
   *
   * @param relayUrls - list of relay URLs to include in this set
   * @param ndk
   * @returns NDKRelaySet
   */
  static fromRelayUrls(e, n) {
    const r = /* @__PURE__ */ new Set();
    for (const s of e) {
      const o = n.pool.relays.get(s);
      if (o)
        r.add(o);
      else {
        const a = new NDKRelay(s);
        n.pool.useTemporaryRelay(a), r.add(a);
      }
    }
    return new Hr(new Set(r), n);
  }
  /**
   * Publish an event to all relays in this set. Returns the number of relays that have received the event.
   * @param event
   * @param timeoutMs - timeout in milliseconds for each publish operation and connection operation
   * @returns A set where the event was successfully published to
   * @throws PublishError if no relay was able to receive the event
   * @example
   * ```typescript
   * const event = new NDKEvent(ndk, {kinds: [NDKKind.Message], "#d": ["123"]});
   * try {
   *    const publishedToRelays = await relaySet.publish(event);
   *    console.log(`published to ${publishedToRelays.size} relays`)
   * } catch (error) {
   *   console.error("error publishing to relays", error);
   *
   *   if (error instanceof PublishError) {
   *      for (const [relay, err] of error.errors) {
   *         console.error(`error publishing to relay ${relay.url}`, err);
   *       }
   *   }
   * }
   * ```
   */
  async publish(e, n) {
    const r = /* @__PURE__ */ new Set(), s = /* @__PURE__ */ new Map(), o = e.isEphemeral(), a = Array.from(this.relays).map((c) => new Promise((h) => {
      c.publish(e, n).then((p) => {
        r.add(c), h();
      }).catch((p) => {
        o || (s.set(c, p), this.debug("error publishing to relay", {
          relay: c.url,
          err: p
        })), h();
      });
    }));
    if (await Promise.all(a), r.size === 0 && !o)
      throw new PublishError("No relay was able to receive the event", s);
    return r;
  }
  get size() {
    return this.relays.size;
  }
};
function calculateRelaySetFromEvent(t, e) {
  var r;
  const n = /* @__PURE__ */ new Set();
  return (r = t.pool) == null || r.permanentAndConnectedRelays().forEach((s) => n.add(s)), new NDKRelaySet(n, t);
}
function calculateRelaySetsFromFilter(t, e, n) {
  const r = /* @__PURE__ */ new Map(), s = /* @__PURE__ */ new Set();
  if (e.forEach((o) => {
    o.authors && o.authors.forEach((a) => s.add(a));
  }), s.size > 0) {
    const o = getRelaysForFilterWithAuthors(t, Array.from(s), n);
    for (const a of o.keys())
      r.set(a, []);
    for (const a of e)
      if (a.authors)
        for (const [c, h] of o.entries()) {
          const p = a.authors.filter(
            (g) => h.includes(g)
          );
          r.set(c, [
            ...r.get(c),
            {
              ...a,
              // Overwrite authors sent to this relay with the authors that were
              // present in the filter and are also present in the relay
              authors: p
            }
          ]);
        }
      else
        for (const c of o.keys())
          r.set(c, [...r.get(c), a]);
  } else
    n.permanentAndConnectedRelays().forEach((o) => {
      r.set(o.url, e);
    });
  return r;
}
function calculateRelaySetsFromFilters(t, e, n) {
  return calculateRelaySetsFromFilter(t, e, n);
}
function mergeTags(t, e) {
  const n = /* @__PURE__ */ new Map(), r = (a) => a.join(","), s = (a, c) => a.every((h, p) => h === c[p]), o = (a) => {
    for (let [c, h] of n)
      if (s(h, a) || s(a, h)) {
        a.length >= h.length && n.set(c, a);
        return;
      }
    n.set(r(a), a);
  };
  return t.concat(e).forEach(o), Array.from(n.values());
}
async function generateContentTags(t, e = []) {
  const n = /(@|nostr:)(npub|nprofile|note|nevent|naddr)[a-zA-Z0-9]+/g, r = new RegExp(`(?<=\\s|^)(#[^\\s!@#$%^&*()=+.\\/,\\[{\\]};:'"?><]+)`, "g");
  let s = [];
  const o = (a) => {
    e.find((c) => ["q", a[0]].includes(c[0]) && c[1] === a[1]) || e.push(a);
  };
  return t = t.replace(n, (a) => {
    try {
      const c = a.split(/(@|nostr:)/)[2], { type: h, data: p } = nip19_exports.decode(c);
      let g;
      switch (h) {
        case "npub":
          g = ["p", p];
          break;
        case "nprofile":
          g = ["p", p.pubkey];
          break;
        case "note":
          s.push(
            new Promise(async (y) => {
              o([
                "e",
                p,
                await maybeGetEventRelayUrl(c),
                "mention"
              ]), y();
            })
          );
          break;
        case "nevent":
          s.push(
            new Promise(async (y) => {
              let { id: $, relays: k, author: S } = p;
              (!k || k.length === 0) && (k = [await maybeGetEventRelayUrl(c)]), o(["e", $, k[0], "mention"]), S && o(["p", S]), y();
            })
          );
          break;
        case "naddr":
          s.push(
            new Promise(async (y) => {
              const $ = [p.kind, p.pubkey, p.identifier].join(":");
              let k = p.relays ?? [];
              k.length === 0 && (k = [await maybeGetEventRelayUrl(c)]), o(["a", $, k[0], "mention"]), o(["p", p.pubkey]), y();
            })
          );
          break;
        default:
          return a;
      }
      return g && o(g), `nostr:${c}`;
    } catch {
      return a;
    }
  }), await Promise.all(s), t = t.replace(r, (a, c) => {
    const h = ["t", c];
    return e.find((p) => p[0] === h[0] && p[1] === h[1]) || e.push(h), a;
  }), { content: t, tags: e };
}
async function maybeGetEventRelayUrl(t) {
  return "";
}
function isReplaceable() {
  if (this.kind === void 0)
    throw new Error("Kind not set");
  return [0, 3].includes(this.kind) || this.kind >= 1e4 && this.kind < 2e4 || this.kind >= 3e4 && this.kind < 4e4;
}
function isEphemeral() {
  if (this.kind === void 0)
    throw new Error("Kind not set");
  return this.kind >= 2e4 && this.kind < 3e4;
}
function isParamReplaceable() {
  if (this.kind === void 0)
    throw new Error("Kind not set");
  return this.kind >= 3e4 && this.kind < 4e4;
}
async function encrypt(t, e) {
  if (!this.ndk)
    throw new Error("No NDK instance found!");
  if (e || (await this.ndk.assertSigner(), e = this.ndk.signer), !t) {
    const n = this.getMatchingTags("p");
    if (n.length !== 1)
      throw new Error(
        "No recipient could be determined and no explicit recipient was provided"
      );
    t = this.ndk.getUser({ pubkey: n[0][1] });
  }
  this.content = await (e == null ? void 0 : e.encrypt(t, this.content));
}
async function decrypt(t, e) {
  if (!this.ndk)
    throw new Error("No NDK instance found!");
  e || (await this.ndk.assertSigner(), e = this.ndk.signer), t || (t = this.author), this.content = await (e == null ? void 0 : e.decrypt(t, this.content));
}
function encode() {
  let t = [];
  return this.onRelays.length > 0 ? t = this.onRelays.map((e) => e.url) : this.relay && (t = [this.relay.url]), this.isParamReplaceable() ? nip19_exports.naddrEncode({
    kind: this.kind,
    pubkey: this.pubkey,
    identifier: this.replaceableDTag(),
    relays: t
  }) : t.length > 0 ? nip19_exports.neventEncode({
    id: this.tagId(),
    relays: t,
    author: this.pubkey
  }) : nip19_exports.noteEncode(this.tagId());
}
async function repost(t = !0, e) {
  if (!e && t) {
    if (!this.ndk)
      throw new Error("No NDK instance found");
    this.ndk.assertSigner(), e = this.ndk.signer;
  }
  const n = new NDKEvent(this.ndk, {
    kind: getKind(this),
    content: ""
  });
  return n.tag(this), n.kind === 16 ? n.tags.push(["k", `${this.kind}`]) : n.content = JSON.stringify(this.rawEvent()), e && await n.sign(e), t && await n.publish(), n;
}
function getKind(t) {
  return t.kind === 1 ? 6 : 16;
}
function eventHasETagMarkers(t) {
  return t.getMatchingTags("e").some((e) => e[3]);
}
function getRootTag(t, e) {
  e ?? (e = t.tagType());
  let n = t.tags.find((r) => r[3] === "root");
  if (!n) {
    if (eventHasETagMarkers(t))
      return;
    const r = t.getMatchingTags(e);
    if (r.length < 3)
      return r[0];
  }
  return n;
}
function getReplyTag(t, e) {
  e ?? (e = t.tagType());
  let n = t.tags.find((r) => r[3] === "reply");
  if (n || (n = t.tags.find((r) => r[3] === "root")), !n) {
    if (eventHasETagMarkers(t))
      return;
    const r = t.getMatchingTags(e);
    if (r.length === 1)
      return r[0];
    if (r.length === 2)
      return r[1];
  }
}
async function fetchTaggedEvent(t, e) {
  if (!this.ndk)
    throw new Error("NDK instance not found");
  const n = this.getMatchingTags(t, e);
  if (n.length === 0)
    return;
  const [r, s, o] = n[0];
  return await this.ndk.fetchEvent(s, {}, void 0);
}
async function fetchRootEvent() {
  if (!this.ndk)
    throw new Error("NDK instance not found");
  const t = getRootTag(this);
  if (t)
    return this.ndk.fetchEventFromTag(t);
}
async function fetchReplyEvent() {
  if (!this.ndk)
    throw new Error("NDK instance not found");
  const t = getReplyTag(this);
  if (t)
    return this.ndk.fetchEventFromTag(t);
}
function serialize(t = !1, e = !1) {
  const n = [0, this.pubkey, this.created_at, this.kind, this.tags, this.content];
  return t && n.push(this.sig), e && n.push(this.id), JSON.stringify(n);
}
function deserialize(t) {
  const e = JSON.parse(t), n = {
    pubkey: e[1],
    created_at: e[2],
    kind: e[3],
    tags: e[4],
    content: e[5]
  };
  return e.length === 7 && (n.sig = e[6]), e.length === 8 && (n.id = e[7]), n;
}
var worker, processingQueue = {};
function signatureVerificationInit(t) {
  worker = t, worker.onmessage = (e) => {
    const [n, r] = e.data, s = processingQueue[n];
    if (!s) {
      console.error("No record found for event", n);
      return;
    }
    delete processingQueue[n];
    for (const o of s.resolves)
      o(r);
  };
}
async function verifySignatureAsync(t, e) {
  return new Promise((r) => {
    const s = t.serialize();
    let o = !1;
    processingQueue[t.id] || (processingQueue[t.id] = { event: t, resolves: [] }, o = !0), processingQueue[t.id].resolves.push(r), o && worker.postMessage({
      serialized: s,
      id: t.id,
      sig: t.sig,
      pubkey: t.pubkey
    });
  });
}
var PUBKEY_REGEX = /^[a-f0-9]{64}$/;
function validate() {
  if (typeof this.kind != "number" || typeof this.content != "string" || typeof this.created_at != "number" || typeof this.pubkey != "string" || !this.pubkey.match(PUBKEY_REGEX) || !Array.isArray(this.tags))
    return !1;
  for (let t = 0; t < this.tags.length; t++) {
    const e = this.tags[t];
    if (!Array.isArray(e))
      return !1;
    for (let n = 0; n < e.length; n++)
      if (typeof e[n] == "object")
        return !1;
  }
  return !0;
}
var verifiedEvents = new dist.LRUCache({ maxSize: 1e3, entryExpirationTimeInMS: 6e4 });
function verifySignature(t) {
  var n;
  if (typeof this.signatureVerified == "boolean")
    return this.signatureVerified;
  const e = verifiedEvents.get(this.id);
  if (e !== null)
    return this.signatureVerified = e;
  try {
    if ((n = this.ndk) != null && n.asyncSigVerification)
      verifySignatureAsync(this, t).then((r) => {
        t && (this.signatureVerified = r, verifiedEvents.set(this.id, r)), r || this.ndk.emit("event:invalid-sig", this);
      });
    else {
      const r = sha256$4(new TextEncoder().encode(this.serialize())), s = schnorr.verify(this.sig, r, this.pubkey);
      return verifiedEvents.set(this.id, s), this.signatureVerified = s;
    }
  } catch (r) {
    return console.error("Error verifying signature", this.rawEvent(), r), this.signatureVerified = !1;
  }
}
function getEventHash() {
  const t = sha256$4(new TextEncoder().encode(this.serialize()));
  return bytesToHex$4(t);
}
var debug2 = debug("ndk:zap"), DEFAULT_RELAYS$1 = [
  "wss://nos.lol",
  "wss://relay.nostr.band",
  "wss://relay.f7z.io",
  "wss://relay.damus.io",
  "wss://nostr.mom",
  "wss://no.str.cr"
], NDKZap = class Ur extends lib$1.EventEmitter {
  constructor(n) {
    var r;
    super();
    M(this, "ndk");
    M(this, "zappedEvent");
    M(this, "zappedUser");
    M(this, "fetch", fetch);
    this.ndk = n.ndk, this.zappedEvent = n.zappedEvent, this.fetch = n._fetch || fetch, this.zappedUser = n.zappedUser || this.ndk.getUser({ pubkey: (r = this.zappedEvent) == null ? void 0 : r.pubkey });
  }
  /**
   * Fetches the zapper's pubkey for the zapped user
   */
  static async getZapperPubkey(n, r) {
    const s = n.getUser({ pubkey: r }), a = await new Ur({ ndk: n, zappedUser: s }).getZapSpec();
    return a == null ? void 0 : a.nostrPubkey;
  }
  async getZapSpec() {
    if (!this.zappedUser)
      throw new Error("No user to zap was provided");
    return this.zappedUser.getZapConfiguration(this.ndk);
  }
  async getZapSpecWithoutCache() {
    let n, r, s, o;
    if (this.zappedUser && (this.zappedUser.profile || await this.zappedUser.fetchProfile({ groupable: !1 }), o = this.zappedUser.profile, n = (this.zappedUser.profile || {}).lud06, r = (this.zappedUser.profile || {}).lud16), r && !r.startsWith("LNURL")) {
      const [a, c] = r.split("@");
      s = `https://${c}/.well-known/lnurlp/${a}`;
    } else if (n) {
      const { words: a } = bech32.decode(n, 1e3), c = bech32.fromWords(a);
      s = new TextDecoder("utf-8").decode(c);
    }
    if (!s)
      throw debug2("No zap endpoint found", o, { lud06: n, lud16: r }), new Error("No zap endpoint found");
    try {
      const c = await (this.fetch || this.ndk.httpFetch)(s);
      if (c.status !== 200) {
        const h = await c.text();
        throw new Error(`Unable to fetch zap endpoint ${s}: ${h}`);
      }
      return await c.json();
    } catch (a) {
      throw new Error(`Unable to fetch zap endpoint ${s}: ${a}`);
    }
  }
  async getZapEndpoint() {
    const n = await this.getZapSpec();
    if (!n)
      return;
    let r;
    return n != null && n.allowsNostr && (n != null && n.nostrPubkey || n != null && n.nostrPubkey) && (r = n.callback), r;
  }
  /**
   * Generates a kind:9734 zap request and returns the payment request
   * @param amount amount to zap in millisatoshis
   * @param comment optional comment to include in the zap request
   * @param extraTags optional extra tags to include in the zap request
   * @param relays optional relays to ask zapper to publish the zap to
   * @returns the payment request
   */
  async createZapRequest(n, r, s, o, a) {
    const c = await this.generateZapRequest(n, r, s, o);
    if (!c)
      return null;
    const { event: h, zapEndpoint: p } = c;
    if (!h)
      throw new Error("No zap request event found");
    await h.sign(a);
    let g;
    try {
      debug2(`Getting invoice for zap request: ${p}`), g = await this.getInvoice(h, n, p);
    } catch (y) {
      throw new Error("Failed to get invoice: " + y);
    }
    return g;
  }
  async getInvoice(n, r, s) {
    debug2(
      `Fetching invoice from ${s}?` + new URLSearchParams({
        amount: r.toString(),
        nostr: encodeURIComponent(JSON.stringify(n.rawEvent()))
      })
    );
    const o = new URL(s);
    o.searchParams.append("amount", r.toString()), o.searchParams.append("nostr", JSON.stringify(n.rawEvent())), debug2(`Fetching invoice from ${o.toString()}`);
    const a = await fetch(o.toString());
    if (debug2(`Got response from zap endpoint: ${s}`, { status: a.status }), a.status !== 200) {
      debug2(`Received non-200 status from zap endpoint: ${s}`, {
        status: a.status,
        amount: r,
        nostr: JSON.stringify(n.rawEvent())
      });
      const h = await a.text();
      throw new Error(`Unable to fetch zap endpoint ${s}: ${h}`);
    }
    return (await a.json()).pr;
  }
  async generateZapRequest(n, r, s, o, a) {
    const c = await this.getZapEndpoint();
    if (!c)
      throw new Error("No zap endpoint found");
    if (!this.zappedEvent && !this.zappedUser)
      throw new Error("No zapped event or user found");
    const h = nip57_exports.makeZapRequest({
      profile: this.zappedUser.pubkey,
      // set the event to null since nostr-tools doesn't support nip-33 zaps
      event: null,
      amount: n,
      comment: r || "",
      relays: o ?? this.relays()
    });
    if (this.zappedEvent) {
      const y = this.zappedEvent.referenceTags().filter(($) => $[0] !== "p");
      h.tags.push(...y);
    }
    h.tags.push(["lnurl", c]);
    const p = new NDKEvent(this.ndk, h);
    return s && (p.tags = p.tags.concat(s)), { event: p, zapEndpoint: c };
  }
  /**
   * @returns the relays to use for the zap request
   */
  relays() {
    var r, s;
    let n = [];
    return (s = (r = this.ndk) == null ? void 0 : r.pool) != null && s.relays && (n = this.ndk.pool.urls()), n.length || (n = DEFAULT_RELAYS$1), n;
  }
}, NDKEvent = class jt extends lib$1.EventEmitter {
  constructor(n, r) {
    super();
    M(this, "ndk");
    M(this, "created_at");
    M(this, "content", "");
    M(this, "tags", []);
    M(this, "kind");
    M(this, "id", "");
    M(this, "sig");
    M(this, "pubkey", "");
    M(this, "signatureVerified");
    M(this, "_author");
    /**
     * The relay that this event was first received from.
     */
    M(this, "relay");
    /**
     * The relays that this event was received from and/or successfully published to.
     */
    M(this, "onRelays", []);
    M(this, "serialize", serialize.bind(this));
    M(this, "getEventHash", getEventHash.bind(this));
    M(this, "validate", validate.bind(this));
    M(this, "verifySignature", verifySignature.bind(this));
    M(this, "isReplaceable", isReplaceable.bind(this));
    M(this, "isEphemeral", isEphemeral.bind(this));
    M(this, "isParamReplaceable", isParamReplaceable.bind(this));
    /**
     * Encodes a bech32 id.
     *
     * @param relays {string[]} The relays to encode in the id
     * @returns {string} - Encoded naddr, note or nevent.
     */
    M(this, "encode", encode.bind(this));
    M(this, "encrypt", encrypt.bind(this));
    M(this, "decrypt", decrypt.bind(this));
    /**
     * Fetch an event tagged with the given tag following relay hints if provided.
     * @param tag The tag to search for
     * @param marker The marker to use in the tag (e.g. "root")
     * @returns The fetched event or null if no event was found, undefined if no matching tag was found in the event
     * * @example
     * const replyEvent = await ndk.fetchEvent("nevent1qqs8x8vnycyha73grv380gmvlury4wtmx0nr9a5ds2dngqwgu87wn6gpzemhxue69uhhyetvv9ujuurjd9kkzmpwdejhgq3ql2vyh47mk2p0qlsku7hg0vn29faehy9hy34ygaclpn66ukqp3afqz4cwjd")
     * const originalEvent = await replyEvent.fetchTaggedEvent("e", "reply");
     * console.log(replyEvent.encode() + " is a reply to event " + originalEvent?.encode());
     */
    M(this, "fetchTaggedEvent", fetchTaggedEvent.bind(this));
    /**
     * Fetch the root event of the current event.
     * @returns The fetched root event or null if no event was found
     * @example
     * const replyEvent = await ndk.fetchEvent("nevent1qqs8x8vnycyha73grv380gmvlury4wtmx0nr9a5ds2dngqwgu87wn6gpzemhxue69uhhyetvv9ujuurjd9kkzmpwdejhgq3ql2vyh47mk2p0qlsku7hg0vn29faehy9hy34ygaclpn66ukqp3afqz4cwjd")
     * const rootEvent = await replyEvent.fetchRootEvent();
     * console.log(replyEvent.encode() + " is a reply in the thread " + rootEvent?.encode());
     */
    M(this, "fetchRootEvent", fetchRootEvent.bind(this));
    /**
     * Fetch the event the current event is replying to.
     * @returns The fetched reply event or null if no event was found
     */
    M(this, "fetchReplyEvent", fetchReplyEvent.bind(this));
    /**
     * NIP-18 reposting event.
     *
     * @param publish Whether to publish the reposted event automatically @default true
     * @param signer The signer to use for signing the reposted event
     * @returns The reposted event
     *
     * @function
     */
    M(this, "repost", repost.bind(this));
    this.ndk = n, this.created_at = r == null ? void 0 : r.created_at, this.content = (r == null ? void 0 : r.content) || "", this.tags = (r == null ? void 0 : r.tags) || [], this.id = (r == null ? void 0 : r.id) || "", this.sig = r == null ? void 0 : r.sig, this.pubkey = (r == null ? void 0 : r.pubkey) || "", this.kind = r == null ? void 0 : r.kind;
  }
  /**
   * Deserialize an NDKEvent from a serialized payload.
   * @param ndk
   * @param event
   * @returns
   */
  static deserialize(n, r) {
    return new jt(n, deserialize(r));
  }
  /**
   * Returns the event as is.
   */
  rawEvent() {
    return {
      created_at: this.created_at,
      content: this.content,
      tags: this.tags,
      kind: this.kind,
      pubkey: this.pubkey,
      id: this.id,
      sig: this.sig
    };
  }
  set author(n) {
    this.pubkey = n.pubkey, this._author = void 0;
  }
  /**
   * Returns an NDKUser for the author of the event.
   */
  get author() {
    if (this._author)
      return this._author;
    if (!this.ndk)
      throw new Error("No NDK instance found");
    const n = this.ndk.getUser({ pubkey: this.pubkey });
    return this._author = n, n;
  }
  tag(n, r, s, o) {
    let a = [];
    if (n.fetchProfile !== void 0) {
      o ?? (o = "p");
      const h = [o, n.pubkey];
      r && h.push("", r), a.push(h);
    } else if (n instanceof jt) {
      const h = n;
      s ?? (s = (h == null ? void 0 : h.pubkey) === this.pubkey), a = h.referenceTags(r, s, o);
      for (const p of h.getMatchingTags("p"))
        p[1] !== this.pubkey && (this.tags.find((g) => g[0] === "p" && g[1] === p[1]) || this.tags.push(["p", p[1]]));
    } else if (Array.isArray(n))
      a = [n];
    else
      throw new Error("Invalid argument", n);
    this.tags = mergeTags(this.tags, a);
  }
  /**
   * Return a NostrEvent object, trying to fill in missing fields
   * when possible, adding tags when necessary.
   * @param pubkey {string} The pubkey of the user who the event belongs to.
   * @returns {Promise<NostrEvent>} A promise that resolves to a NostrEvent.
   */
  async toNostrEvent(n) {
    var a, c;
    if (!n && this.pubkey === "") {
      const h = await ((c = (a = this.ndk) == null ? void 0 : a.signer) == null ? void 0 : c.user());
      this.pubkey = (h == null ? void 0 : h.pubkey) || "";
    }
    (!this.created_at || this.isReplaceable()) && (this.created_at = Math.floor(Date.now() / 1e3));
    const r = this.rawEvent(), { content: s, tags: o } = await this.generateTags();
    r.content = s || "", r.tags = o;
    try {
      this.id = this.getEventHash();
    } catch {
    }
    return this.id && (r.id = this.id), this.sig && (r.sig = this.sig), r;
  }
  /**
   * Get all tags with the given name
   * @param tagName {string} The name of the tag to search for
   * @returns {NDKTag[]} An array of the matching tags
   */
  getMatchingTags(n, r) {
    return this.tags.filter((s) => s[0] === n).filter((s) => !r || s[3] === r);
  }
  /**
   * Get the first tag with the given name
   * @param tagName Tag name to search for
   * @returns The value of the first tag with the given name, or undefined if no such tag exists
   */
  tagValue(n) {
    const r = this.getMatchingTags(n);
    if (r.length !== 0)
      return r[0][1];
  }
  /**
   * Gets the NIP-31 "alt" tag of the event.
   */
  get alt() {
    return this.tagValue("alt");
  }
  /**
   * Sets the NIP-31 "alt" tag of the event. Use this to set an alt tag so
   * clients that don't handle a particular event kind can display something
   * useful for users.
   */
  set alt(n) {
    this.removeTag("alt"), n && this.tags.push(["alt", n]);
  }
  /**
   * Gets the NIP-33 "d" tag of the event.
   */
  get dTag() {
    return this.tagValue("d");
  }
  /**
   * Sets the NIP-33 "d" tag of the event.
   */
  set dTag(n) {
    this.removeTag("d"), n && this.tags.push(["d", n]);
  }
  /**
   * Remove all tags with the given name (e.g. "d", "a", "p")
   * @param tagName Tag name to search for and remove
   * @returns {void}
   */
  removeTag(n) {
    this.tags = this.tags.filter((r) => r[0] !== n);
  }
  /**
   * Sign the event if a signer is present.
   *
   * It will generate tags.
   * Repleacable events will have their created_at field set to the current time.
   * @param signer {NDKSigner} The NDKSigner to use to sign the event
   * @returns {Promise<string>} A Promise that resolves to the signature of the signed event.
   */
  async sign(n) {
    var s;
    n ? this.author = await n.user() : ((s = this.ndk) == null || s.assertSigner(), n = this.ndk.signer);
    const r = await this.toNostrEvent();
    return this.sig = await n.sign(r), this.sig;
  }
  /**
   * Attempt to sign and then publish an NDKEvent to a given relaySet.
   * If no relaySet is provided, the relaySet will be calculated by NDK.
   * @param relaySet {NDKRelaySet} The relaySet to publish the even to.
   * @returns A promise that resolves to the relays the event was published to.
   */
  async publish(n, r) {
    var o;
    if (this.sig || await this.sign(), !this.ndk)
      throw new Error("NDKEvent must be associated with an NDK instance to publish");
    n || (n = this.ndk.devWriteRelaySet || calculateRelaySetFromEvent(this.ndk)), this.ndk.debug(`publish to ${n.size} relays`, this.rawEvent()), this.kind === 5 && ((o = this.ndk.cacheAdapter) != null && o.deleteEvent) && this.ndk.cacheAdapter.deleteEvent(this);
    const s = await n.publish(this, r);
    return this.onRelays = Array.from(s), s;
  }
  /**
   * Generates tags for users, notes, and other events tagged in content.
   * Will also generate random "d" tag for parameterized replaceable events where needed.
   * @returns {ContentTag} The tags and content of the event.
   */
  async generateTags() {
    var o, a;
    let n = [];
    const r = await generateContentTags(this.content, this.tags), s = r.content;
    if (n = r.tags, this.kind && this.isParamReplaceable() && !this.getMatchingTags("d")[0]) {
      const h = this.tagValue("title");
      let g = [...Array(h ? 6 : 16)].map(() => Math.random().toString(36)[2]).join("");
      h && h.length > 0 && (g = h.replace(/[^a-z0-9]+/gi, "-").replace(/^-|-$/g, "") + "-" + g), n.push(["d", g]);
    }
    if (((o = this.ndk) != null && o.clientName || (a = this.ndk) != null && a.clientNip89) && !this.tagValue("client")) {
      const c = ["client", this.ndk.clientName ?? ""];
      this.ndk.clientNip89 && c.push(this.ndk.clientNip89), n.push(c);
    }
    return { content: s || "", tags: n };
  }
  muted() {
    var o, a;
    const n = (o = this.ndk) == null ? void 0 : o.mutedIds.get(this.pubkey);
    if (n && n === "p")
      return "author";
    const r = this.tagReference(), s = (a = this.ndk) == null ? void 0 : a.mutedIds.get(r[1]);
    return s && s === r[0] ? "event" : null;
  }
  /**
   * Returns the "d" tag of a parameterized replaceable event or throws an error if the event isn't
   * a parameterized replaceable event.
   * @returns {string} the "d" tag of the event.
   */
  replaceableDTag() {
    if (this.kind && this.kind >= 3e4 && this.kind <= 4e4) {
      const n = this.getMatchingTags("d")[0];
      return n ? n[1] : "";
    }
    throw new Error("Event is not a parameterized replaceable event");
  }
  /**
   * Provides a deduplication key for the event.
   *
   * For kinds 0, 3, 10k-20k this will be the event <kind>:<pubkey>
   * For kinds 30k-40k this will be the event <kind>:<pubkey>:<d-tag>
   * For all other kinds this will be the event id
   */
  deduplicationKey() {
    return this.kind === 0 || this.kind === 3 || this.kind && this.kind >= 1e4 && this.kind < 2e4 ? `${this.kind}:${this.pubkey}` : this.tagId();
  }
  /**
   * Returns the id of the event or, if it's a parameterized event, the generated id of the event using "d" tag, pubkey, and kind.
   * @returns {string} The id
   */
  tagId() {
    return this.isParamReplaceable() ? this.tagAddress() : this.id;
  }
  /**
   * Returns the "reference" value ("<kind>:<author-pubkey>:<d-tag>") for this replaceable event.
   * @returns {string} The id
   */
  tagAddress() {
    if (!this.isParamReplaceable())
      throw new Error("This must only be called on replaceable events");
    const n = this.replaceableDTag();
    return `${this.kind}:${this.pubkey}:${n}`;
  }
  /**
   * Determines the type of tag that can be used to reference this event from another event.
   * @returns {string} The tag type
   * @example
   * event = new NDKEvent(ndk, { kind: 30000, pubkey: 'pubkey', tags: [ ["d", "d-code"] ] });
   * event.tagType(); // "a"
   */
  tagType() {
    return this.isParamReplaceable() ? "a" : "e";
  }
  /**
   * Get the tag that can be used to reference this event from another event.
   *
   * Consider using referenceTags() instead (unless you have a good reason to use this)
   *
   * @example
   *     event = new NDKEvent(ndk, { kind: 30000, pubkey: 'pubkey', tags: [ ["d", "d-code"] ] });
   *     event.tagReference(); // ["a", "30000:pubkey:d-code"]
   *
   *     event = new NDKEvent(ndk, { kind: 1, pubkey: 'pubkey', id: "eventid" });
   *     event.tagReference(); // ["e", "eventid"]
   * @returns {NDKTag} The NDKTag object referencing this event
   */
  tagReference(n) {
    let r;
    return this.isParamReplaceable() ? r = ["a", this.tagAddress()] : r = ["e", this.tagId()], this.relay ? r.push(this.relay.url) : r.push(""), n && r.push(n), r;
  }
  /**
   * Get the tags that can be used to reference this event from another event
   * @param marker The marker to use in the tag
   * @param skipAuthorTag Whether to explicitly skip adding the author tag of the event
   * @param forceTag Force a specific tag to be used instead of the default "e" or "a" tag
   * @example
   *     event = new NDKEvent(ndk, { kind: 30000, pubkey: 'pubkey', tags: [ ["d", "d-code"] ] });
   *     event.referenceTags(); // [["a", "30000:pubkey:d-code"], ["e", "parent-id"]]
   *
   *     event = new NDKEvent(ndk, { kind: 1, pubkey: 'pubkey', id: "eventid" });
   *     event.referenceTags(); // [["e", "parent-id"]]
   * @returns {NDKTag} The NDKTag object referencing this event
   */
  referenceTags(n, r, s) {
    var a;
    let o = [];
    return this.isParamReplaceable() ? o = [
      [s ?? "a", this.tagAddress()],
      [s ?? "e", this.id]
    ] : o = [[s ?? "e", this.id]], (a = this.relay) != null && a.url ? o = o.map((c) => {
      var h;
      return c.push((h = this.relay) == null ? void 0 : h.url), c;
    }) : n && (o = o.map((c) => (c.push(""), c))), n && o.forEach((c) => c.push(n)), r || o.push(...this.author.referenceTags()), o;
  }
  /**
   * Provides the filter that will return matching events for this event.
   *
   * @example
   *    event = new NDKEvent(ndk, { kind: 30000, pubkey: 'pubkey', tags: [ ["d", "d-code"] ] });
   *    event.filter(); // { "#a": ["30000:pubkey:d-code"] }
   * @example
   *    event = new NDKEvent(ndk, { kind: 1, pubkey: 'pubkey', id: "eventid" });
   *    event.filter(); // { "#e": ["eventid"] }
   *
   * @returns The filter that will return matching events for this event
   */
  filter() {
    return this.isParamReplaceable() ? { "#a": [this.tagId()] } : { "#e": [this.tagId()] };
  }
  /**
   * Create a zap request for an existing event
   *
   * @param amount The amount to zap in millisatoshis
   * @param comment A comment to add to the zap request
   * @param extraTags Extra tags to add to the zap request
   * @param recipient The zap recipient (optional for events)
   * @param signer The signer to use (will default to the NDK instance's signer)
   */
  async zap(n, r, s, o, a) {
    if (!this.ndk)
      throw new Error("No NDK instance found");
    a || this.ndk.assertSigner();
    const c = new NDKZap({
      ndk: this.ndk,
      zappedEvent: this,
      zappedUser: o
    }), h = Array.from(this.ndk.pool.relays.keys());
    return await c.createZapRequest(
      n,
      r,
      s,
      h,
      a
    );
  }
  /**
   * Generates a deletion event of the current event
   *
   * @param reason The reason for the deletion
   * @param publish Whether to publish the deletion event automatically
   * @returns The deletion event
   */
  async delete(n, r = !0) {
    if (!this.ndk)
      throw new Error("No NDK instance found");
    this.ndk.assertSigner();
    const s = new jt(this.ndk, {
      kind: 5,
      content: n || ""
    });
    return s.tag(this), r && await s.publish(), s;
  }
  /**
   * React to an existing event
   *
   * @param content The content of the reaction
   */
  async react(n, r = !0) {
    if (!this.ndk)
      throw new Error("No NDK instance found");
    this.ndk.assertSigner();
    const s = new jt(this.ndk, {
      kind: 7,
      content: n
    });
    return s.tag(this), r ? await s.publish() : await s.sign(), s;
  }
  /**
   * Checks whether the event is valid per underlying NIPs.
   *
   * This method is meant to be overridden by subclasses that implement specific NIPs
   * to allow the enforcement of NIP-specific validation rules.
   *
   * Otherwise, it will only check for basic event properties.
   *
   */
  get isValid() {
    return this.validate();
  }
}, defaultOpts = {
  closeOnEose: !1,
  cacheUsage: "CACHE_FIRST",
  groupable: !0,
  groupableDelay: 100,
  groupableDelayType: "at-most"
}, NDKSubscription = class extends lib$1.EventEmitter {
  constructor(e, n, r, s, o) {
    super();
    M(this, "subId");
    M(this, "filters");
    M(this, "opts");
    M(this, "pool");
    M(this, "skipVerification", !1);
    M(this, "skipValidation", !1);
    /**
     * Tracks the filters as they are executed on each relay
     */
    M(this, "relayFilters");
    M(this, "relaySet");
    M(this, "ndk");
    M(this, "debug");
    M(this, "eoseDebug");
    /**
     * Events that have been seen by the subscription, with the time they were first seen.
     */
    M(this, "eventFirstSeen", /* @__PURE__ */ new Map());
    /**
     * Relays that have sent an EOSE.
     */
    M(this, "eosesSeen", /* @__PURE__ */ new Set());
    /**
     * Events that have been seen by the subscription per relay.
     */
    M(this, "eventsPerRelay", /* @__PURE__ */ new Map());
    /**
     * The time the last event was received by the subscription.
     * This is used to calculate when EOSE should be emitted.
     */
    M(this, "lastEventReceivedAt");
    M(this, "internalId");
    /**
     * Whether the subscription should close when all relays have reached the end of the event stream.
     */
    M(this, "closeOnEose");
    // EOSE handling
    M(this, "eoseTimeout");
    if (this.ndk = e, this.pool = (r == null ? void 0 : r.pool) || e.pool, this.opts = { ...defaultOpts, ...r || {} }, this.filters = n instanceof Array ? n : [n], this.subId = o || (r == null ? void 0 : r.subId), this.internalId = Math.random().toString(36).substring(7), this.relaySet = s, this.debug = e.debug.extend(`subscription[${(r == null ? void 0 : r.subId) ?? this.internalId}]`), this.eoseDebug = this.debug.extend("eose"), this.skipVerification = (r == null ? void 0 : r.skipVerification) || !1, this.skipValidation = (r == null ? void 0 : r.skipValidation) || !1, this.closeOnEose = (r == null ? void 0 : r.closeOnEose) || !1, this.opts.cacheUsage === "ONLY_CACHE" && !this.opts.closeOnEose)
      throw new Error("Cannot use cache-only options with a persistent subscription");
  }
  /**
   * Provides access to the first filter of the subscription for
   * backwards compatibility.
   */
  get filter() {
    return this.filters[0];
  }
  isGroupable() {
    var e;
    return ((e = this.opts) == null ? void 0 : e.groupable) || !1;
  }
  shouldQueryCache() {
    var e;
    return ((e = this.opts) == null ? void 0 : e.cacheUsage) !== "ONLY_RELAY";
  }
  shouldQueryRelays() {
    var e;
    return ((e = this.opts) == null ? void 0 : e.cacheUsage) !== "ONLY_CACHE";
  }
  shouldWaitForCache() {
    var e;
    return (
      // Must want to close on EOSE; subscriptions
      // that want to receive further updates must
      // always hit the relay
      this.opts.closeOnEose && // Cache adapter must claim to be fast
      !!((e = this.ndk.cacheAdapter) != null && e.locking) && // If explicitly told to run in parallel, then
      // we should not wait for the cache
      this.opts.cacheUsage !== "PARALLEL"
    );
  }
  /**
   * Start the subscription. This is the main method that should be called
   * after creating a subscription.
   */
  async start() {
    let e;
    if (this.shouldQueryCache() && (e = this.startWithCache(), this.shouldWaitForCache() && (await e, queryFullyFilled(this)))) {
      this.emit("eose", this);
      return;
    }
    this.shouldQueryRelays() ? this.startWithRelays() : this.emit("eose", this);
  }
  stop() {
    this.emit("close", this), this.removeAllListeners();
  }
  /**
   * @returns Whether the subscription has an authors filter.
   */
  hasAuthorsFilter() {
    return this.filters.some((e) => {
      var n;
      return (n = e.authors) == null ? void 0 : n.length;
    });
  }
  async startWithCache() {
    var e;
    if ((e = this.ndk.cacheAdapter) != null && e.query) {
      const n = this.ndk.cacheAdapter.query(this);
      this.ndk.cacheAdapter.locking && await n;
    }
  }
  /**
   * Send REQ to relays
   */
  startWithRelays() {
    if (!this.relaySet)
      this.relayFilters = calculateRelaySetsFromFilters(this.ndk, this.filters, this.pool);
    else {
      this.relayFilters = /* @__PURE__ */ new Map();
      for (const e of this.relaySet.relays)
        this.relayFilters.set(e.url, this.filters);
    }
    if (!this.relayFilters || this.relayFilters.size === 0) {
      this.debug("No relays to subscribe to", this.pool.relays.size);
      return;
    }
    for (const [e, n] of this.relayFilters)
      this.pool.getRelay(e, !0, !0, n).subscribe(this, n);
  }
  // EVENT handling
  /**
   * Called when an event is received from a relay or the cache
   * @param event
   * @param relay
   * @param fromCache Whether the event was received from the cache
   */
  eventReceived(e, n, r = !1) {
    if (n && (e.relay ?? (e.relay = n), e.onRelays.push(n)), n || (n = e.relay), e.ndk ?? (e.ndk = this.ndk), this.eventFirstSeen.has(e.id)) {
      const o = Date.now() - (this.eventFirstSeen.get(e.id) || 0);
      n && n.scoreSlowerEvent(o), this.emit("event:dup", e, n, o, this);
      return;
    }
    if (!r) {
      if (!this.skipValidation && !e.isValid) {
        this.debug("Event failed validation", e.rawEvent());
        return;
      }
      if (!this.skipVerification && !e.verifySignature(!0) && !this.ndk.asyncSigVerification) {
        this.debug("Event failed signature validation", e);
        return;
      }
    }
    if (!r && n) {
      let o = this.eventsPerRelay.get(n);
      o || (o = /* @__PURE__ */ new Set(), this.eventsPerRelay.set(n, o)), o.add(e.id), this.ndk.cacheAdapter && this.ndk.cacheAdapter.setEvent(e, this.filters, n), this.eventFirstSeen.set(e.id, Date.now());
    } else
      this.eventFirstSeen.set(e.id, 0);
    this.emit("event", e, n, this), this.lastEventReceivedAt = Date.now();
  }
  eoseReceived(e) {
    var o, a, c;
    this.eosesSeen.add(e);
    let n = this.lastEventReceivedAt ? Date.now() - this.lastEventReceivedAt : void 0;
    const r = this.eosesSeen.size === ((o = this.relayFilters) == null ? void 0 : o.size);
    if (queryFullyFilled(this))
      this.emit("eose"), (a = this.opts) != null && a.closeOnEose && this.stop();
    else if (r)
      this.emit("eose"), this.eoseDebug("All EOSEs seen"), (c = this.opts) != null && c.closeOnEose && this.stop();
    else {
      let h = 1e3;
      const p = this.eosesSeen.size / this.relayFilters.size;
      if (this.eosesSeen.size >= 2 && p >= 0.5) {
        h = h * (1 - p), this.eoseTimeout && clearTimeout(this.eoseTimeout);
        const g = () => {
          var y;
          n = this.lastEventReceivedAt ? Date.now() - this.lastEventReceivedAt : void 0, n !== void 0 && n < 20 ? this.eoseTimeout = setTimeout(g, h) : (this.emit("eose"), (y = this.opts) != null && y.closeOnEose && this.stop());
        };
        this.eoseTimeout = setTimeout(g, h);
      }
    }
  }
};
async function follows(t, e, n = 3) {
  var s, o;
  if (!this.ndk)
    throw new Error("NDK not set");
  const r = await this.ndk.fetchEvent(
    { kinds: [n], authors: [this.pubkey] },
    t || { groupable: !1 }
  );
  if (r) {
    const a = /* @__PURE__ */ new Set();
    return r.tags.forEach((c) => {
      c[0] === "p" && a.add(c[1]);
    }), e && ((o = (s = this.ndk) == null ? void 0 : s.outboxTracker) == null || o.trackUsers(Array.from(a))), [...a].reduce((c, h) => {
      const p = new NDKUser({ pubkey: h });
      return p.ndk = this.ndk, c.add(p), c;
    }, /* @__PURE__ */ new Set());
  }
  return /* @__PURE__ */ new Set();
}
function profileFromEvent(t) {
  const e = {};
  let n;
  try {
    n = JSON.parse(t.content);
  } catch (r) {
    throw new Error(`Failed to parse profile event: ${r}`);
  }
  return Object.keys(n).forEach((r) => {
    switch (r) {
      case "name":
        e.name = n.name;
        break;
      case "display_name":
        e.displayName = n.display_name;
        break;
      case "image":
      case "picture":
        e.image = n.picture || n.image;
        break;
      case "banner":
        e.banner = n.banner;
        break;
      case "bio":
        e.bio = n.bio;
        break;
      case "nip05":
        e.nip05 = n.nip05;
        break;
      case "lud06":
        e.lud06 = n.lud06;
        break;
      case "lud16":
        e.lud16 = n.lud16;
        break;
      case "about":
        e.about = n.about;
        break;
      case "zapService":
        e.zapService = n.zapService;
        break;
      case "website":
        e.website = n.website;
        break;
      default:
        e[r] = n[r];
        break;
    }
  }), e;
}
function serializeProfile(t) {
  const e = {};
  for (const [n, r] of Object.entries(t))
    switch (n) {
      case "username":
      case "name":
        e.name = r;
        break;
      case "displayName":
        e.display_name = r;
        break;
      case "image":
      case "picture":
        e.picture = r;
        break;
      case "bio":
      case "about":
        e.about = r;
        break;
      default:
        e[n] = r;
        break;
    }
  return JSON.stringify(e);
}
var NIP05_REGEX = /^(?:([\w.+-]+)@)?([\w.-]+)$/;
async function getNip05For(t, e, n = fetch, r = {}) {
  return await t.queuesNip05.add({
    id: e,
    func: async () => {
      if (t.cacheAdapter && t.cacheAdapter.loadNip05) {
        const h = await t.cacheAdapter.loadNip05(e);
        if (h !== "missing") {
          if (h) {
            const p = new NDKUser({
              pubkey: h.pubkey,
              relayUrls: h.relays,
              nip46Urls: h.nip46
            });
            return p.ndk = t, p;
          } else if (r.cache !== "no-cache")
            return null;
        }
      }
      const s = e.match(NIP05_REGEX);
      if (!s)
        return null;
      const [o, a = "_", c] = s;
      try {
        const h = await n(
          `https://${c}/.well-known/nostr.json?name=${a}`,
          r
        ), { names: p, relays: g, nip46: y } = parseNIP05Result(await h.json()), $ = p[a.toLowerCase()];
        let k = null;
        return $ && (k = { pubkey: $, relays: g == null ? void 0 : g[$], nip46: y == null ? void 0 : y[$] }), t != null && t.cacheAdapter && t.cacheAdapter.saveNip05 && t.cacheAdapter.saveNip05(e, k), k;
      } catch (h) {
        return t != null && t.cacheAdapter && t.cacheAdapter.saveNip05 && (t == null || t.cacheAdapter.saveNip05(e, null)), console.error("Failed to fetch NIP05 for", e, h), null;
      }
    }
  });
}
function parseNIP05Result(t) {
  const e = {
    names: {}
  };
  for (const [n, r] of Object.entries(t.names))
    typeof n == "string" && typeof r == "string" && (e.names[n.toLowerCase()] = r);
  if (t.relays) {
    e.relays = {};
    for (const [n, r] of Object.entries(t.relays))
      typeof n == "string" && Array.isArray(r) && (e.relays[n] = r.filter(
        (s) => typeof s == "string"
      ));
  }
  if (t.nip46) {
    e.nip46 = {};
    for (const [n, r] of Object.entries(t.nip46))
      typeof n == "string" && Array.isArray(r) && (e.nip46[n] = r.filter((s) => typeof s == "string"));
  }
  return e;
}
var NDKUser = class Pr {
  constructor(e) {
    M(this, "ndk");
    M(this, "profile");
    M(this, "_npub");
    M(this, "_pubkey");
    M(this, "relayUrls", []);
    M(this, "nip46Urls", []);
    /**
     * Returns a set of users that this user follows.
     */
    M(this, "follows", follows.bind(this));
    e.npub && (this._npub = e.npub), e.hexpubkey && (this._pubkey = e.hexpubkey), e.pubkey && (this._pubkey = e.pubkey), e.relayUrls && (this.relayUrls = e.relayUrls), e.nip46Urls && (this.nip46Urls = e.nip46Urls);
  }
  get npub() {
    if (!this._npub) {
      if (!this._pubkey)
        throw new Error("pubkey not set");
      this._npub = nip19_exports.npubEncode(this.pubkey);
    }
    return this._npub;
  }
  set npub(e) {
    this._npub = e;
  }
  /**
   * Get the user's hexpubkey
   * @returns {Hexpubkey} The user's hexpubkey
   *
   * @deprecated Use `pubkey` instead
   */
  get hexpubkey() {
    return this.pubkey;
  }
  /**
   * Set the user's hexpubkey
   * @param pubkey {Hexpubkey} The user's hexpubkey
   * @deprecated Use `pubkey` instead
   */
  set hexpubkey(e) {
    this._pubkey = e;
  }
  /**
   * Get the user's pubkey
   * @returns {string} The user's pubkey
   */
  get pubkey() {
    if (!this._pubkey) {
      if (!this._npub)
        throw new Error("npub not set");
      this._pubkey = nip19_exports.decode(this.npub).data;
    }
    return this._pubkey;
  }
  /**
   * Set the user's pubkey
   * @param pubkey {string} The user's pubkey
   */
  set pubkey(e) {
    this._pubkey = e;
  }
  /**
   * Retrieves the zapper this pubkey has designated as an issuer of zap receipts
   */
  async getZapConfiguration(e) {
    if (e ?? (e = this.ndk), !e)
      throw new Error("No NDK instance found");
    const n = async () => {
      var o, a, c, h;
      if ((a = (o = this.ndk) == null ? void 0 : o.cacheAdapter) != null && a.loadUsersLNURLDoc) {
        const p = await this.ndk.cacheAdapter.loadUsersLNURLDoc(this.pubkey);
        if (p !== "missing") {
          if (p === null)
            return;
          if (p)
            return p;
        }
      }
      const r = new NDKZap({ ndk: e, zappedUser: this });
      let s;
      try {
        s = await r.getZapSpecWithoutCache();
      } catch {
      }
      if ((h = (c = this.ndk) == null ? void 0 : c.cacheAdapter) != null && h.saveUsersLNURLDoc && this.ndk.cacheAdapter.saveUsersLNURLDoc(this.pubkey, s || null), !!s)
        return s;
    };
    return await e.queuesZapConfig.add({
      id: this.pubkey,
      func: n
    });
  }
  /**
   * Fetches the zapper's pubkey for the zapped user
   * @returns The zapper's pubkey if one can be found
   */
  async getZapperPubkey() {
    const e = await this.getZapConfiguration();
    return e == null ? void 0 : e.nostrPubkey;
  }
  /**
   * Instantiate an NDKUser from a NIP-05 string
   * @param nip05Id {string} The user's NIP-05
   * @param ndk {NDK} An NDK instance
   * @param skipCache {boolean} Whether to skip the cache or not
   * @returns {NDKUser | undefined} An NDKUser if one is found for the given NIP-05, undefined otherwise.
   */
  static async fromNip05(e, n, r = !1) {
    if (!n)
      throw new Error("No NDK instance found");
    let s = {};
    r && (s.cache = "no-cache");
    const o = await getNip05For(n, e, n == null ? void 0 : n.httpFetch, s);
    if (o) {
      const a = new Pr({
        pubkey: o.pubkey,
        relayUrls: o.relays,
        nip46Urls: o.nip46
      });
      return a.ndk = n, a;
    }
  }
  /**
   * Fetch a user's profile
   * @param opts {NDKSubscriptionOptions} A set of NDKSubscriptionOptions
   * @returns User Profile
   */
  async fetchProfile(e) {
    if (!this.ndk)
      throw new Error("NDK not set");
    this.profile || (this.profile = {});
    let n = null;
    if (this.ndk.cacheAdapter && this.ndk.cacheAdapter.fetchProfile && (e == null ? void 0 : e.cacheUsage) !== "ONLY_RELAY") {
      const s = await this.ndk.cacheAdapter.fetchProfile(this.pubkey);
      if (s)
        return this.profile = s, s;
    }
    !e && // if no options have been set
    this.ndk.cacheAdapter && // and we have a cache
    this.ndk.cacheAdapter.locking && (n = await this.ndk.fetchEvents(
      {
        kinds: [0],
        authors: [this.pubkey]
      },
      {
        cacheUsage: "ONLY_CACHE",
        closeOnEose: !0,
        groupable: !1
      }
    ), e = {
      cacheUsage: "ONLY_RELAY",
      closeOnEose: !0,
      groupable: !0,
      groupableDelay: 250
    }), (!n || n.size === 0) && (n = await this.ndk.fetchEvents(
      {
        kinds: [0],
        authors: [this.pubkey]
      },
      e
    ));
    const r = Array.from(n).sort(
      (s, o) => s.created_at - o.created_at
    );
    return r.length === 0 ? null : (this.profile = profileFromEvent(r[0]), this.profile && this.ndk.cacheAdapter && this.ndk.cacheAdapter.saveProfile && this.ndk.cacheAdapter.saveProfile(this.pubkey, this.profile), this.profile);
  }
  /** @deprecated Use referenceTags instead. */
  /**
   * Get the tag that can be used to reference this user in an event
   * @returns {NDKTag} an NDKTag
   */
  tagReference() {
    return ["p", this.pubkey];
  }
  /**
   * Get the tags that can be used to reference this user in an event
   * @returns {NDKTag[]} an array of NDKTag
   */
  referenceTags(e) {
    const n = [["p", this.pubkey]];
    return e && n[0].push("", e), n;
  }
  /**
   * Publishes the current profile.
   */
  async publish() {
    if (!this.ndk)
      throw new Error("No NDK instance found");
    if (!this.profile)
      throw new Error("No profile available");
    this.ndk.assertSigner(), await new NDKEvent(this.ndk, {
      kind: 0,
      content: serializeProfile(this.profile)
    }).publish();
  }
  /**
   * Add a follow to this user's contact list
   *
   * @param newFollow {NDKUser} The user to follow
   * @param currentFollowList {Set<NDKUser>} The current follow list
   * @param kind {NDKKind} The kind to use for this contact list (defaults to `3`)
   * @returns {Promise<boolean>} True if the follow was added, false if the follow already exists
   */
  async follow(e, n, r = 3) {
    if (!this.ndk)
      throw new Error("No NDK instance found");
    if (this.ndk.assertSigner(), n || (n = await this.follows(void 0, void 0, r)), n.has(e))
      return !1;
    n.add(e);
    const s = new NDKEvent(this.ndk, { kind: r });
    for (const o of n)
      s.tag(o);
    return await s.publish(), !0;
  }
  /**
   * Remove a follow from this user's contact list
   *
   * @param user {NDKUser} The user to unfollow
   * @param currentFollowList {Set<Hexpubkey>} The current follow list
   * @param kind {NDKKind} The kind to use for this contact list (defaults to `3`)
   * @returns The relays were the follow list was published or false if the user wasn't found
   */
  async unfollow(e, n, r = 3) {
    if (!this.ndk)
      throw new Error("No NDK instance found");
    this.ndk.assertSigner(), n || (n = await this.follows(void 0, void 0, r));
    const s = /* @__PURE__ */ new Set();
    let o = !1;
    for (const c of n)
      c.pubkey !== e.pubkey && (s.add(c), o = !0);
    if (!o)
      return !1;
    const a = new NDKEvent(this.ndk, { kind: r });
    for (const c of n)
      a.tag(c);
    return await a.publish();
  }
  /**
   * Validate a user's NIP-05 identifier (usually fetched from their kind:0 profile data)
   *
   * @param nip05Id The NIP-05 string to validate
   * @returns {Promise<boolean | null>} True if the NIP-05 is found and matches this user's pubkey,
   * False if the NIP-05 is found but doesn't match this user's pubkey,
   * null if the NIP-05 isn't found on the domain or we're unable to verify (because of network issues, etc.)
   */
  async validateNip05(e) {
    if (!this.ndk)
      throw new Error("No NDK instance found");
    const n = await getNip05For(this.ndk, e);
    return n === null ? null : n.pubkey === this.pubkey;
  }
  /**
   * Zap a user
   *
   * @param amount The amount to zap in millisatoshis
   * @param comment A comment to add to the zap request
   * @param extraTags Extra tags to add to the zap request
   * @param signer The signer to use (will default to the NDK instance's signer)
   */
  async zap(e, n, r, s) {
    if (!this.ndk)
      throw new Error("No NDK instance found");
    s || this.ndk.assertSigner();
    const o = new NDKZap({
      ndk: this.ndk,
      zappedUser: this
    }), a = Array.from(this.ndk.pool.relays.keys());
    return await o.createZapRequest(
      e,
      n,
      r,
      a,
      s
    );
  }
}, NDKList = class Or extends NDKEvent {
  constructor(n, r) {
    super(n, r);
    M(this, "_encryptedTags");
    /**
     * Stores the number of bytes the content was before decryption
     * to expire the cache when the content changes.
     */
    M(this, "encryptedTagsLength");
    this.kind ?? (this.kind = 30001);
  }
  /**
   * Wrap a NDKEvent into a NDKList
   */
  static from(n) {
    return new Or(n.ndk, n.rawEvent());
  }
  /**
   * Returns the title of the list. Falls back on fetching the name tag value.
   */
  get title() {
    const n = this.tagValue("title") || this.tagValue("name");
    return this.kind === 3 && !n ? "Contacts" : this.kind === 1e4 && !n ? "Mute" : this.kind === 10001 && !n ? "Pinned Notes" : this.kind === 10002 && !n ? "Relay Metadata" : this.kind === 10003 && !n ? "Bookmarks" : this.kind === 10004 && !n ? "Communities" : this.kind === 10005 && !n ? "Public Chats" : this.kind === 10006 && !n ? "Blocked Relays" : this.kind === 10007 && !n ? "Search Relays" : this.kind === 10015 && !n ? "Interests" : this.kind === 10030 && !n ? "Emojis" : n ?? this.tagValue("d");
  }
  /**
   * Sets the title of the list.
   */
  set title(n) {
    if (this.removeTag("title"), this.removeTag("name"), n)
      this.tags.push(["title", n]);
    else
      throw new Error("Title cannot be empty");
  }
  /**
   * Returns the name of the list.
   * @deprecated Please use "title" instead.
   */
  get name() {
    const n = this.tagValue("name");
    return this.kind === 3 && !n ? "Contacts" : this.kind === 1e4 && !n ? "Mute" : this.kind === 10001 && !n ? "Pinned Notes" : this.kind === 10002 && !n ? "Relay Metadata" : this.kind === 10003 && !n ? "Bookmarks" : this.kind === 10004 && !n ? "Communities" : this.kind === 10005 && !n ? "Public Chats" : this.kind === 10006 && !n ? "Blocked Relays" : this.kind === 10007 && !n ? "Search Relays" : this.kind === 10015 && !n ? "Interests" : this.kind === 10030 && !n ? "Emojis" : n ?? this.tagValue("d");
  }
  /**
   * Sets the name of the list.
   * @deprecated Please use "title" instead. This method will use the `title` tag instead.
   */
  set name(n) {
    if (this.removeTag("name"), n)
      this.tags.push(["title", n]);
    else
      throw new Error("Name cannot be empty");
  }
  /**
   * Returns the description of the list.
   */
  get description() {
    return this.tagValue("description");
  }
  /**
   * Sets the description of the list.
   */
  set description(n) {
    n ? this.tags.push(["description", n]) : this.removeTag("description");
  }
  isEncryptedTagsCacheValid() {
    return !!(this._encryptedTags && this.encryptedTagsLength === this.content.length);
  }
  /**
   * Returns the decrypted content of the list.
   */
  async encryptedTags(n = !0) {
    if (n && this.isEncryptedTagsCacheValid())
      return this._encryptedTags;
    if (!this.ndk)
      throw new Error("NDK instance not set");
    if (!this.ndk.signer)
      throw new Error("NDK signer not set");
    const r = await this.ndk.signer.user();
    try {
      if (this.content.length > 0)
        try {
          const s = await this.ndk.signer.decrypt(r, this.content), o = JSON.parse(s);
          return o && o[0] ? (this.encryptedTagsLength = this.content.length, this._encryptedTags = o) : (this.encryptedTagsLength = this.content.length, this._encryptedTags = []);
        } catch {
          console.log(`error decrypting ${this.content}`);
        }
    } catch {
    }
    return [];
  }
  /**
   * This method can be overriden to validate that a tag is valid for this list.
   *
   * (i.e. the NDKPersonList can validate that items are NDKUser instances)
   */
  validateTag(n) {
    return !0;
  }
  /**
   * Returns the unecrypted items in this list.
   */
  get items() {
    return this.tags.filter((n) => ![
      "d",
      "L",
      "l",
      "title",
      "name",
      "description",
      "summary",
      "image",
      "thumb",
      "alt",
      "expiration",
      "subject",
      "client"
    ].includes(n[0]));
  }
  /**
   * Adds a new item to the list.
   * @param relay Relay to add
   * @param mark Optional mark to add to the item
   * @param encrypted Whether to encrypt the item
   */
  async addItem(n, r = void 0, s = !1) {
    if (!this.ndk)
      throw new Error("NDK instance not set");
    if (!this.ndk.signer)
      throw new Error("NDK signer not set");
    let o;
    if (n instanceof NDKEvent)
      o = n.referenceTags();
    else if (n instanceof NDKUser)
      o = n.referenceTags();
    else if (n instanceof NDKRelay)
      o = n.referenceTags();
    else if (Array.isArray(n))
      o = [n];
    else
      throw new Error("Invalid object type");
    if (r && o[0].push(r), s) {
      const a = await this.ndk.signer.user(), c = await this.encryptedTags();
      c.push(...o), this._encryptedTags = c, this.encryptedTagsLength = this.content.length, this.content = JSON.stringify(c), await this.encrypt(a);
    } else
      this.tags.push(...o);
    this.created_at = Math.floor(Date.now() / 1e3), this.emit("change");
  }
  /**
   * Removes an item from the list.
   *
   * @param index The index of the item to remove.
   * @param encrypted Whether to remove from the encrypted list or not.
   */
  async removeItem(n, r) {
    if (!this.ndk)
      throw new Error("NDK instance not set");
    if (!this.ndk.signer)
      throw new Error("NDK signer not set");
    if (r) {
      const s = await this.ndk.signer.user(), o = await this.encryptedTags();
      o.splice(n, 1), this._encryptedTags = o, this.encryptedTagsLength = this.content.length, this.content = JSON.stringify(o), await this.encrypt(s);
    } else
      this.tags.splice(n, 1);
    return this.created_at = Math.floor(Date.now() / 1e3), this.emit("change"), this;
  }
  /**
   * Creates a filter that will result in fetching
   * the items of this list
   * @example
   * const list = new NDKList(...);
   * const filters = list.filterForItems();
   * const events = await ndk.fetchEvents(filters);
   */
  filterForItems() {
    const n = /* @__PURE__ */ new Set(), r = /* @__PURE__ */ new Map(), s = [];
    for (const o of this.items)
      if (o[0] === "e" && o[1])
        n.add(o[1]);
      else if (o[0] === "a" && o[1]) {
        const [a, c, h] = o[1].split(":");
        if (!a || !c)
          continue;
        const p = `${a}:${c}`, g = r.get(p) || [];
        g.push(h || ""), r.set(p, g);
      }
    if (n.size > 0 && s.push({ ids: Array.from(n) }), r.size > 0)
      for (const [o, a] of r.entries()) {
        const [c, h] = o.split(":");
        s.push({
          kinds: [parseInt(c)],
          authors: [h],
          "#d": a
        });
      }
    return s;
  }
}, lists_default = NDKList, DATA_URL_DEFAULT_MIME_TYPE = "text/plain", DATA_URL_DEFAULT_CHARSET = "us-ascii", testParameter = (t, e) => e.some((n) => n instanceof RegExp ? n.test(t) : n === t), supportedProtocols = /* @__PURE__ */ new Set([
  "https:",
  "http:",
  "file:"
]), hasCustomProtocol = (t) => {
  try {
    const { protocol: e } = new URL(t);
    return e.endsWith(":") && !e.includes(".") && !supportedProtocols.has(e);
  } catch {
    return !1;
  }
}, normalizeDataURL = (t, { stripHash: e }) => {
  var y;
  const n = /^data:(?<type>[^,]*?),(?<data>[^#]*?)(?:#(?<hash>.*))?$/.exec(t);
  if (!n)
    throw new Error(`Invalid URL: ${t}`);
  let { type: r, data: s, hash: o } = n.groups;
  const a = r.split(";");
  o = e ? "" : o;
  let c = !1;
  a[a.length - 1] === "base64" && (a.pop(), c = !0);
  const h = ((y = a.shift()) == null ? void 0 : y.toLowerCase()) ?? "", g = [
    ...a.map(($) => {
      let [k, S = ""] = $.split("=").map((w) => w.trim());
      return k === "charset" && (S = S.toLowerCase(), S === DATA_URL_DEFAULT_CHARSET) ? "" : `${k}${S ? `=${S}` : ""}`;
    }).filter(Boolean)
  ];
  return c && g.push("base64"), (g.length > 0 || h && h !== DATA_URL_DEFAULT_MIME_TYPE) && g.unshift(h), `data:${g.join(";")},${c ? s.trim() : s}${o ? `#${o}` : ""}`;
};
function normalizeUrl(t, e) {
  if (e = {
    defaultProtocol: "http",
    normalizeProtocol: !0,
    forceHttp: !1,
    forceHttps: !1,
    stripAuthentication: !0,
    stripHash: !1,
    stripTextFragment: !0,
    stripWWW: !0,
    removeQueryParameters: [/^utm_\w+/i],
    removeTrailingSlash: !0,
    removeSingleSlash: !0,
    removeDirectoryIndex: !1,
    removeExplicitPort: !1,
    sortQueryParameters: !0,
    ...e
  }, typeof e.defaultProtocol == "string" && !e.defaultProtocol.endsWith(":") && (e.defaultProtocol = `${e.defaultProtocol}:`), t = t.trim(), /^data:/i.test(t))
    return normalizeDataURL(t, e);
  if (hasCustomProtocol(t))
    return t;
  const n = t.startsWith("//");
  !n && /^\.*\//.test(t) || (t = t.replace(/^(?!(?:\w+:)?\/\/)|^\/\//, e.defaultProtocol));
  const s = new URL(t);
  if (e.forceHttp && e.forceHttps)
    throw new Error("The `forceHttp` and `forceHttps` options cannot be used together");
  if (e.forceHttp && s.protocol === "https:" && (s.protocol = "http:"), e.forceHttps && s.protocol === "http:" && (s.protocol = "https:"), e.stripAuthentication && (s.username = "", s.password = ""), e.stripHash ? s.hash = "" : e.stripTextFragment && (s.hash = s.hash.replace(/#?:~:text.*?$/i, "")), s.pathname) {
    const a = /\b[a-z][a-z\d+\-.]{1,50}:\/\//g;
    let c = 0, h = "";
    for (; ; ) {
      const g = a.exec(s.pathname);
      if (!g)
        break;
      const y = g[0], $ = g.index, k = s.pathname.slice(c, $);
      h += k.replace(/\/{2,}/g, "/"), h += y, c = $ + y.length;
    }
    const p = s.pathname.slice(c, s.pathname.length);
    h += p.replace(/\/{2,}/g, "/"), s.pathname = h;
  }
  if (s.pathname)
    try {
      s.pathname = decodeURI(s.pathname);
    } catch {
    }
  if (e.removeDirectoryIndex === !0 && (e.removeDirectoryIndex = [/^index\.[a-z]+$/]), Array.isArray(e.removeDirectoryIndex) && e.removeDirectoryIndex.length > 0) {
    let a = s.pathname.split("/");
    const c = a[a.length - 1];
    testParameter(c, e.removeDirectoryIndex) && (a = a.slice(0, -1), s.pathname = a.slice(1).join("/") + "/");
  }
  if (s.hostname && (s.hostname = s.hostname.replace(/\.$/, ""), e.stripWWW && /^www\.(?!www\.)[a-z\-\d]{1,63}\.[a-z.\-\d]{2,63}$/.test(s.hostname) && (s.hostname = s.hostname.replace(/^www\./, ""))), Array.isArray(e.removeQueryParameters))
    for (const a of [...s.searchParams.keys()])
      testParameter(a, e.removeQueryParameters) && s.searchParams.delete(a);
  if (!Array.isArray(e.keepQueryParameters) && e.removeQueryParameters === !0 && (s.search = ""), Array.isArray(e.keepQueryParameters) && e.keepQueryParameters.length > 0)
    for (const a of [...s.searchParams.keys()])
      testParameter(a, e.keepQueryParameters) || s.searchParams.delete(a);
  if (e.sortQueryParameters) {
    s.searchParams.sort();
    try {
      s.search = decodeURIComponent(s.search);
    } catch {
    }
  }
  e.removeTrailingSlash && (s.pathname = s.pathname.replace(/\/$/, "")), e.removeExplicitPort && s.port && (s.port = "");
  const o = t;
  return t = s.toString(), !e.removeSingleSlash && s.pathname === "/" && !o.endsWith("/") && s.hash === "" && (t = t.replace(/\/$/, "")), (e.removeTrailingSlash || s.pathname === "/") && s.hash === "" && e.removeSingleSlash && (t = t.replace(/\/$/, "")), n && !e.normalizeProtocol && (t = t.replace(/^http:\/\//, "//")), e.stripProtocol && (t = t.replace(/^(?:https?:)?\/\//, "")), t;
}
function normalizeRelayUrl(t) {
  let e = normalizeUrl(t, {
    stripAuthentication: !1,
    stripWWW: !1,
    stripHash: !0
  });
  return e.endsWith("/") || (e += "/"), e;
}
function normalize(t) {
  const e = /* @__PURE__ */ new Set();
  for (const n of t)
    try {
      e.add(normalizeRelayUrl(n));
    } catch {
    }
  return Array.from(e);
}
var READ_MARKER = "read", WRITE_MARKER = "write", NDKRelayList = class mn extends NDKEvent {
  constructor(e, n) {
    super(e, n), this.kind ?? (this.kind = 10002);
  }
  static from(e) {
    return new mn(e.ndk, e.rawEvent());
  }
  static async forUser(e, n) {
    return (await this.forUsers([e], n)).get(e);
  }
  /**
   * Gathers a set of relay list events for a given set of users.
   * @returns A map of pubkeys to relay list.
   */
  static async forUsers(e, n) {
    var p;
    const r = n.outboxPool || n.pool, s = /* @__PURE__ */ new Set();
    for (const g of r.relays.values())
      s.add(g);
    const o = /* @__PURE__ */ new Map(), a = /* @__PURE__ */ new Map(), c = new NDKRelaySet(s, n);
    if ((p = n.cacheAdapter) != null && p.locking) {
      const g = await n.fetchEvents(
        { kinds: [3, 10002], authors: e },
        {
          cacheUsage: "ONLY_CACHE"
          /* ONLY_CACHE */
        }
      );
      for (const y of g)
        y.kind === 10002 && o.set(y.pubkey, mn.from(y));
      for (const y of g)
        if (y.kind === 3) {
          const $ = relayListFromKind3(n, y);
          $ && a.set(y.pubkey, $);
        }
      e = e.filter((y) => !o.has(y) && !a.has(y));
    }
    if (e.length === 0)
      return o;
    await Promise.all([
      // Fetch all kind 10002 events
      new Promise(async (g) => {
        const y = await n.fetchEvents(
          { kinds: [10002], authors: e },
          { closeOnEose: !0, pool: r, groupable: !1 },
          c
        );
        for (const $ of y)
          o.set($.pubkey, mn.from($));
        g();
      }),
      // Also fetch all kind 3 events
      new Promise(async (g) => {
        const y = await n.fetchEvents(
          { kinds: [3], authors: e },
          { closeOnEose: !0, pool: r, groupable: !1 },
          c
        );
        for (const $ of y) {
          const k = relayListFromKind3(n, $);
          k && a.set($.pubkey, k);
        }
        g();
      })
    ]);
    const h = /* @__PURE__ */ new Map();
    for (const g of e) {
      const y = o.get(g) ?? a.get(g);
      y && h.set(g, y);
    }
    return h;
  }
  get readRelayUrls() {
    return this.tags.filter((e) => e[0] === "r" || e[0] === "relay").filter((e) => !e[2] || e[2] && e[2] === READ_MARKER).map((e) => e[1]);
  }
  set readRelayUrls(e) {
    for (const n of e)
      this.tags.push(["r", n, READ_MARKER]);
  }
  get writeRelayUrls() {
    return this.tags.filter((e) => e[0] === "r" || e[0] === "relay").filter((e) => !e[2] || e[2] && e[2] === WRITE_MARKER).map((e) => e[1]);
  }
  set writeRelayUrls(e) {
    for (const n of e)
      this.tags.push(["r", n, WRITE_MARKER]);
  }
  get bothRelayUrls() {
    return this.tags.filter((e) => e[0] === "r" || e[0] === "relay").filter((e) => !e[2]).map((e) => e[1]);
  }
  set bothRelayUrls(e) {
    for (const n of e)
      this.tags.push(["r", n]);
  }
  get relays() {
    return this.tags.filter((e) => e[0] === "r" || e[0] === "relay").map((e) => e[1]);
  }
};
function relayListFromKind3(t, e) {
  try {
    const n = JSON.parse(e.content), r = new NDKRelayList(t), s = /* @__PURE__ */ new Set(), o = /* @__PURE__ */ new Set();
    for (let [a, c] of Object.entries(n)) {
      try {
        a = normalizeRelayUrl(a);
      } catch {
        continue;
      }
      if (!c)
        s.add(a), o.add(a);
      else {
        const h = c;
        h.write && o.add(a), h.read && s.add(a);
      }
    }
    return r.readRelayUrls = Array.from(s), r.writeRelayUrls = Array.from(o), r;
  } catch {
  }
}
async function payInvoice(t) {
  return await this.sendReq("pay_invoice", { invoice: t });
}
var NDKPrivateKeySigner = class Dr {
  constructor(e) {
    M(this, "_user");
    M(this, "privateKey");
    e && (this.privateKey = e, this._user = new NDKUser({
      pubkey: getPublicKey(this.privateKey)
    }));
  }
  static generate() {
    const e = generatePrivateKey();
    return new Dr(e);
  }
  async blockUntilReady() {
    if (!this._user)
      throw new Error("NDKUser not initialized");
    return this._user;
  }
  async user() {
    return await this.blockUntilReady(), this._user;
  }
  async sign(e) {
    if (!this.privateKey)
      throw Error("Attempted to sign without a private key");
    return getSignature(e, this.privateKey);
  }
  async encrypt(e, n) {
    if (!this.privateKey)
      throw Error("Attempted to encrypt without a private key");
    const r = e.pubkey;
    return await nip04_exports.encrypt(this.privateKey, r, n);
  }
  async decrypt(e, n) {
    if (!this.privateKey)
      throw Error("Attempted to decrypt without a private key");
    const r = e.pubkey;
    return await nip04_exports.decrypt(this.privateKey, r, n);
  }
};
async function sendReq(t, e) {
  const n = new NDKEvent(this.ndk, {
    kind: 23194,
    tags: [["p", this.walletService.pubkey]],
    content: JSON.stringify({ method: t, params: e })
  });
  return this.debug("Sending request", n.content), await n.encrypt(this.walletService, this.signer), await n.sign(this.signer), this.debug("Request encrypted and signed"), new Promise(async (r, s) => {
    try {
      const o = n.tagId();
      if (!o)
        throw new Error("Failed to get e-tag");
      const a = (h) => {
        this.off(o, a), this.off("event", a), this.debug("Received response", h);
        try {
          const p = JSON.parse(h);
          p.error && s(p), r(p);
        } catch (p) {
          this.debug("Failed to parse response", p), s({
            result_type: "error",
            error: {
              code: "failed_to_parse_response",
              message: p.message
            }
          });
        }
      }, c = this.ndk.subscribe(
        {
          kinds: [
            23195
            /* NostrWalletConnectRes */
          ],
          "#e": [o],
          limit: 1
        },
        { groupable: !1, subId: `nwc-${t}` },
        this.relaySet
      );
      c.on("event", async (h) => {
        await h.decrypt(h.author, this.signer), a(h.content), c.stop();
      }), this.once(o, a), this.once("event", a), this.debug("Sending request to relay", n.rawEvent()), await n.publish(this.relaySet);
    } catch (o) {
      this.debug("Failed to send request", o, o.relayErrors), s({
        result_type: "error",
        error: {
          code: "failed_to_send_request",
          message: o.message
        }
      });
    }
  });
}
async function getBalance() {
  return await this.sendReq("get_balance", {});
}
async function getInfo() {
  return await this.sendReq("get_info", {});
}
var NDKNwc = class Fr extends lib$1.EventEmitter {
  /**
   *
   * @param opts: NostrWalletConnectOptions
   * @returns NDKNwc
   */
  constructor({
    ndk: n,
    pubkey: r,
    relayUrls: s,
    secret: o
  }) {
    super();
    M(this, "ndk");
    M(this, "debug");
    /**
     * The Wallet Service's public key
     */
    M(this, "walletService");
    M(this, "relaySet");
    M(this, "signer");
    M(this, "active", !1);
    M(this, "getBalance", getBalance.bind(this));
    this.ndk = n, this.walletService = n.getUser({ pubkey: r }), this.relaySet = new NDKRelaySet(
      new Set(s.map((a) => n.pool.getRelay(a))),
      n
    ), this.signer = new NDKPrivateKeySigner(o), this.debug = n.debug.extend("nwc"), this.debug(`Starting with wallet service ${this.walletService.npub}`);
  }
  static async fromURI(n, r) {
    const s = new URL(r);
    if (s.protocol !== "nostr+walletconnect:")
      throw new Error("Invalid protocol");
    return new Fr({
      ndk: n,
      pubkey: s.host ?? s.pathname,
      relayUrls: s.searchParams.getAll("relay") ?? [""],
      secret: s.searchParams.get("secret") ?? ""
    });
  }
  /**
   * Blocks until we're subscribed to talk to the wallet service
   * @param msTimeout Timeout in ms to wait for the subscription to be ready
   * @returns
   */
  async blockUntilReady(n) {
    const r = await this.signer.user(), s = new Promise((c, h) => {
      setTimeout(() => {
        h(new Error("Timeout"));
      }, n);
    }), a = [new Promise((c) => {
      const h = this.ndk.subscribe(
        {
          kinds: [
            23195
            /* NostrWalletConnectRes */
          ],
          "#p": [r.pubkey],
          limit: 1
        },
        { groupable: !1, subId: "nwc" },
        this.relaySet
      );
      h.on("event", async (p) => {
        this.debug("received response", p.rawEvent());
        const g = p.tagValue("e");
        if (!g) {
          this.debug("Received an event without an e-tag");
          return;
        }
        this.debug("received an event", g);
        try {
          await p.decrypt(p.author, this.signer), this.emit(g, p.content);
        } catch (y) {
          this.debug("Failed to decrypt event", y);
          return;
        }
      }), h.on("eose", () => {
        this.debug("Subscription ready"), this.active = !0, c();
      }), h.on("close", () => {
        this.debug("Subscription closed"), this.active = !1;
      });
    })];
    return n && a.push(s), await Promise.race(a);
  }
  async sendReq(n, r) {
    return await sendReq.call(this, n, r);
  }
  async payInvoice(n) {
    return await payInvoice.call(this, n);
  }
  async getInfo() {
    return await getInfo.call(this);
  }
};
function disconnect(t, e) {
  return e ?? (e = debug("ndk:relay:auth-policies:disconnect")), async (n) => {
    e(`Relay ${n.url} requested authentication, disconnecting`), t.removeRelay(n.url);
  };
}
async function signAndAuth(t, e, n, r, s, o) {
  try {
    await t.sign(n), await e.auth(t), s(t);
  } catch (a) {
    r(`Failed to publish auth event to relay ${e.url}`, a), o(t);
  }
}
function signIn({ ndk: t, signer: e, debug: n } = {}) {
  return n ?? (n = debug("ndk:auth-policies:signIn")), async (r, s) => {
    n(`Relay ${r.url} requested authentication, signing in`);
    const o = new NDKEvent(t);
    return o.kind = 22242, o.tags = [
      ["relay", r.url],
      ["challenge", s]
    ], e ?? (e = t == null ? void 0 : t.signer), new Promise(async (a, c) => {
      e ? await signAndAuth(o, r, e, n, a, c) : t == null || t.once("signer:ready", async (h) => {
        await signAndAuth(o, r, h, n, a, c);
      });
    });
  };
}
var NDKRelayAuthPolicies = {
  disconnect,
  signIn
}, NDKNip07Signer = class {
  /**
   * @param waitTimeout - The timeout in milliseconds to wait for the NIP-07 to become available
   */
  constructor(t = 1e3) {
    M(this, "_userPromise");
    M(this, "nip04Queue", []);
    M(this, "nip04Processing", !1);
    M(this, "debug");
    M(this, "waitTimeout");
    this.debug = debug("ndk:nip07"), this.waitTimeout = t;
  }
  async blockUntilReady() {
    await this.waitForExtension();
    const t = await window.nostr.getPublicKey();
    if (!t)
      throw new Error("User rejected access");
    return new NDKUser({ pubkey: t });
  }
  /**
   * Getter for the user property.
   * @returns The NDKUser instance.
   */
  async user() {
    return this._userPromise || (this._userPromise = this.blockUntilReady()), this._userPromise;
  }
  /**
   * Signs the given Nostr event.
   * @param event - The Nostr event to be signed.
   * @returns The signature of the signed event.
   * @throws Error if the NIP-07 is not available on the window object.
   */
  async sign(t) {
    return await this.waitForExtension(), (await window.nostr.signEvent(t)).sig;
  }
  async relays() {
    var n, r;
    await this.waitForExtension();
    const t = await ((r = (n = window.nostr).getRelays) == null ? void 0 : r.call(n)) || {}, e = [];
    for (const s of Object.keys(t))
      t[s].read && t[s].write && e.push(s);
    return e.map((s) => new NDKRelay(s));
  }
  async encrypt(t, e) {
    await this.waitForExtension();
    const n = t.pubkey;
    return this.queueNip04("encrypt", n, e);
  }
  async decrypt(t, e) {
    await this.waitForExtension();
    const n = t.pubkey;
    return this.queueNip04("decrypt", n, e);
  }
  async queueNip04(t, e, n) {
    return new Promise((r, s) => {
      this.nip04Queue.push({
        type: t,
        counterpartyHexpubkey: e,
        value: n,
        resolve: r,
        reject: s
      }), this.nip04Processing || this.processNip04Queue();
    });
  }
  async processNip04Queue(t, e = 0) {
    if (!t && this.nip04Queue.length === 0) {
      this.nip04Processing = !1;
      return;
    }
    this.nip04Processing = !0;
    const { type: n, counterpartyHexpubkey: r, value: s, resolve: o, reject: a } = t || this.nip04Queue.shift();
    this.debug("Processing encryption queue item", {
      type: n,
      counterpartyHexpubkey: r,
      value: s
    });
    try {
      let c;
      n === "encrypt" ? c = await window.nostr.nip04.encrypt(r, s) : c = await window.nostr.nip04.decrypt(r, s), o(c);
    } catch (c) {
      if (c.message && c.message.includes("call already executing") && e < 5) {
        this.debug("Retrying encryption queue item", {
          type: n,
          counterpartyHexpubkey: r,
          value: s,
          retries: e
        }), setTimeout(() => {
          this.processNip04Queue(t, e + 1);
        }, 50 * e);
        return;
      }
      a(c);
    }
    this.processNip04Queue();
  }
  waitForExtension() {
    return new Promise((t, e) => {
      if (window.nostr) {
        t();
        return;
      }
      let n;
      const r = setInterval(() => {
        window.nostr && (clearTimeout(n), clearInterval(r), t());
      }, 100);
      n = setTimeout(() => {
        clearInterval(r), e(new Error("NIP-07 extension not available"));
      }, this.waitTimeout);
    });
  }
};
function dedup(t, e) {
  return t.created_at > e.created_at ? t : e;
}
var OutboxItem = class {
  constructor(t) {
    /**
     * Type of item
     */
    M(this, "type");
    /**
     * The relay URLs that are of interest to this item
     */
    M(this, "relayUrlScores");
    M(this, "readRelays");
    M(this, "writeRelays");
    this.type = t, this.relayUrlScores = /* @__PURE__ */ new Map(), this.readRelays = /* @__PURE__ */ new Set(), this.writeRelays = /* @__PURE__ */ new Set();
  }
}, OutboxTracker = class extends lib$1.EventEmitter {
  constructor(e) {
    super();
    M(this, "data");
    M(this, "ndk");
    M(this, "debug");
    this.ndk = e, this.debug = e.debug.extend("outbox-tracker"), this.data = new dist.LRUCache({
      maxSize: 1e5,
      entryExpirationTimeInMS: 2 * 60 * 1e3
    });
  }
  trackUsers(e) {
    for (let n = 0; n < e.length; n += 400) {
      let s = e.slice(n, n + 400).map((o) => getKeyFromItem(o)).filter((o) => !this.data.has(o));
      if (s.length !== 0) {
        for (const o of s)
          this.data.set(o, new OutboxItem("user"));
        NDKRelayList.forUsers(s, this.ndk).then(
          (o) => {
            for (const [a, c] of o) {
              const h = this.data.get(a);
              if (c) {
                h.readRelays = new Set(normalize(c.readRelayUrls)), h.writeRelays = new Set(normalize(c.writeRelayUrls));
                for (const p of h.readRelays)
                  this.ndk.pool.blacklistRelayUrls.has(p) && h.readRelays.delete(p);
                for (const p of h.writeRelays)
                  this.ndk.pool.blacklistRelayUrls.has(p) && h.writeRelays.delete(p);
                this.data.set(a, h);
              }
            }
          }
        );
      }
    }
  }
  /**
   *
   * @param key
   * @param score
   */
  track(e, n) {
    const r = getKeyFromItem(e);
    n ?? (n = getTypeFromItem(e));
    let s = this.data.get(r);
    return s || (s = new OutboxItem(n), e instanceof NDKUser && this.trackUsers([e])), s;
  }
};
function getKeyFromItem(t) {
  return t instanceof NDKUser ? t.pubkey : t;
}
function getTypeFromItem(t) {
  return t instanceof NDKUser ? "user" : "kind";
}
var NDKPool = class extends lib$1.EventEmitter {
  constructor(e = [], n = [], r, s) {
    super();
    // TODO: This should probably be an LRU cache
    M(this, "relays", /* @__PURE__ */ new Map());
    M(this, "blacklistRelayUrls");
    M(this, "debug");
    M(this, "temporaryRelayTimers", /* @__PURE__ */ new Map());
    M(this, "flappingRelays", /* @__PURE__ */ new Set());
    // A map to store timeouts for each flapping relay.
    M(this, "backoffTimes", /* @__PURE__ */ new Map());
    this.debug = s ?? r.debug.extend("pool");
    for (const o of e) {
      const a = new NDKRelay(o);
      this.addRelay(a, !1);
    }
    this.blacklistRelayUrls = new Set(n);
  }
  /**
   * Adds a relay to the pool, and sets a timer to remove it if it is not used within the specified time.
   * @param relay - The relay to add to the pool.
   * @param removeIfUnusedAfter - The time in milliseconds to wait before removing the relay from the pool after it is no longer used.
   */
  useTemporaryRelay(e, n = 3e4) {
    const r = this.relays.has(e.url);
    r || this.addRelay(e);
    const s = this.temporaryRelayTimers.get(e.url);
    if (s && clearTimeout(s), !r || s) {
      const o = setTimeout(() => {
        this.removeRelay(e.url);
      }, n);
      this.temporaryRelayTimers.set(e.url, o);
    }
  }
  /**
   * Adds a relay to the pool.
   *
   * @param relay - The relay to add to the pool.
   * @param connect - Whether or not to connect to the relay.
   */
  addRelay(e, n = !0) {
    var s;
    const r = e.url;
    if ((s = this.blacklistRelayUrls) != null && s.has(r)) {
      this.debug(`Relay ${r} is blacklisted`);
      return;
    }
    if (r.includes("/npub1")) {
      this.debug(`Relay ${r} is a filter relay`);
      return;
    }
    e.on("notice", async (o, a) => this.emit("notice", o, a)), e.on("connect", () => this.handleRelayConnect(r)), e.on("ready", () => this.handleRelayReady(e)), e.on("disconnect", async () => this.emit("relay:disconnect", e)), e.on("flapping", () => this.handleFlapping(e)), e.on("auth", async (o) => this.emit("relay:auth", e, o)), e.on("authed", async () => this.emit("relay:authed", e)), this.relays.set(r, e), n && (this.emit("relay:connecting", e), e.connect().catch((o) => {
      this.debug(`Failed to connect to relay ${r}`, o);
    }));
  }
  /**
   * Removes a relay from the pool.
   * @param relayUrl - The URL of the relay to remove.
   * @returns {boolean} True if the relay was removed, false if it was not found.
   */
  removeRelay(e) {
    const n = this.relays.get(e);
    if (n)
      return n.disconnect(), this.relays.delete(e), this.emit("relay:disconnect", n), !0;
    const r = this.temporaryRelayTimers.get(e);
    return r && (clearTimeout(r), this.temporaryRelayTimers.delete(e)), !1;
  }
  /**
   * Fetches a relay from the pool, or creates a new one if it does not exist.
   *
   * New relays will be attempted to be connected.
   */
  getRelay(e, n = !0, r = !1, s) {
    let o = this.relays.get(e);
    return o || (o = new NDKRelay(e), r ? this.useTemporaryRelay(o) : this.addRelay(o, n)), o;
  }
  handleRelayConnect(e) {
    this.emit("relay:connect", this.relays.get(e)), this.stats().connected === this.relays.size && this.emit("connect");
  }
  handleRelayReady(e) {
    this.debug(`Relay ${e.url} ready`), this.emit("relay:ready", e);
  }
  /**
   * Attempts to establish a connection to each relay in the pool.
   *
   * @async
   * @param {number} [timeoutMs] - Optional timeout in milliseconds for each connection attempt.
   * @returns {Promise<void>} A promise that resolves when all connection attempts have completed.
   * @throws {Error} If any of the connection attempts result in an error or timeout.
   */
  async connect(e) {
    const n = [];
    this.debug(
      `Connecting to ${this.relays.size} relays${e ? `, timeout ${e}...` : ""}`
    );
    for (const r of this.relays.values()) {
      const s = new Promise((o, a) => (this.emit("relay:connecting", r), r.connect(e).then(o).catch(a)));
      if (e) {
        const o = new Promise((a, c) => {
          setTimeout(() => c(`Timed out after ${e}ms`), e);
        });
        n.push(
          Promise.race([s, o]).catch((a) => {
            this.debug(
              `Failed to connect to relay ${r.url}: ${a ?? "No reason specified"}`
            );
          })
        );
      } else
        n.push(s);
    }
    e && setTimeout(() => {
      const r = this.stats().connected === this.relays.size, s = this.stats().connected > 0;
      !r && s && this.emit("connect");
    }, e), await Promise.all(n);
  }
  checkOnFlappingRelays() {
    const e = this.flappingRelays.size, n = this.relays.size;
    if (e / n >= 0.8)
      for (const r of this.flappingRelays)
        this.backoffTimes.set(r, 0);
  }
  handleFlapping(e) {
    this.debug(`Relay ${e.url} is flapping`);
    let n = this.backoffTimes.get(e.url) || 5e3;
    n = n * 2, this.backoffTimes.set(e.url, n), this.debug(`Backoff time for ${e.url} is ${n}ms`), setTimeout(() => {
      this.debug(`Attempting to reconnect to ${e.url}`), this.emit("relay:connecting", e), e.connect(), this.checkOnFlappingRelays();
    }, n), e.disconnect(), this.emit("flapping", e);
  }
  size() {
    return this.relays.size;
  }
  /**
   * Returns the status of each relay in the pool.
   * @returns {NDKPoolStats} An object containing the number of relays in each status.
   */
  stats() {
    const e = {
      total: 0,
      connected: 0,
      disconnected: 0,
      connecting: 0
    };
    for (const n of this.relays.values())
      e.total++, n.status === 1 ? e.connected++ : n.status === 3 ? e.disconnected++ : n.status === 0 && e.connecting++;
    return e;
  }
  connectedRelays() {
    return Array.from(this.relays.values()).filter(
      (e) => e.status === 1
      /* CONNECTED */
    );
  }
  permanentAndConnectedRelays() {
    return Array.from(this.relays.values()).filter(
      (e) => e.status === 1 || !this.temporaryRelayTimers.has(e.url)
    );
  }
  /**
   * Get a list of all relay urls in the pool.
   */
  urls() {
    return Array.from(this.relays.keys());
  }
};
function correctRelaySet(t, e) {
  const n = e.connectedRelays();
  if (!Array.from(t.relays).some((s) => n.map((o) => o.url).includes(s.url)))
    for (const s of n)
      t.addRelay(s);
  if (n.length === 0)
    for (const s of e.relays.values())
      t.addRelay(s);
  return t;
}
async function fetchEventFromTag(t, e, n = {
  type: "timeout"
}) {
  const r = this.debug.extend("fetch-event-from-tag"), [s, o, a] = t;
  let c, h = a && a !== "" ? this.pool.getRelay(a, !0, !0, [{ ids: [o] }]) : void 0;
  const p = new Promise((y) => {
    this.fetchEvent(o, e, h).then(y);
  });
  if (a === "" || !a || n.type === "none")
    return p;
  let g = new Promise(async (y) => {
    let $ = n.relaySet, k = n.timeout ?? 1500, S = new Promise((w) => setTimeout(w, k));
    if (n.type === "timeout" && await S, c)
      y(c);
    else {
      r("fallback fetch triggered");
      let w = await this.fetchEvent(o, e, $);
      y(w);
    }
  });
  switch (n.type) {
    case "timeout":
      return Promise.race([p, g]);
    case "eose":
      return c = await p, c || g;
  }
}
var SPEC_PATH = "/.well-known/nostr/nip96.json", Nip96 = class {
  /**
   * @param domain domain of the NIP96 service
   */
  constructor(t, e) {
    M(this, "ndk");
    M(this, "spec");
    M(this, "url");
    M(this, "nip98Required", !1);
    this.url = `https://${t}${SPEC_PATH}`, this.ndk = e;
  }
  async prepareUpload(t, e = "POST") {
    if (this.validateHttpFetch(), this.spec || await this.fetchSpec(), !this.spec)
      throw new Error("Failed to fetch NIP96 spec");
    let n = {};
    return this.nip98Required && (n = { Authorization: await this.generateNip98Header(
      this.spec.api_url,
      e,
      t
    ) }), {
      url: this.spec.api_url,
      headers: n
    };
  }
  /**
   * Provides an XMLHttpRequest-based upload method for browsers.
   * @example
   * const xhr = new XMLHttpRequest();
   * xhr.upload.addEventListener("progress", function(e) {
   *    const percentComplete = e.loaded / e.total;
   *    console.log(percentComplete);
   * });
   * const nip96 = ndk.getNip96("nostrcheck.me");
   * const blob = new Blob(["Hello, world!"], { type: "text/plain" });
   * const response = await nip96.xhrUpload(xhr, blob);
   * console.log(response);
   * @returns Promise that resolves to the upload response
   */
  async xhrUpload(t, e) {
    const n = "POST", { url: r, headers: s } = await this.prepareUpload(e, n);
    t.open(n, r, !0), s.Authorization && t.setRequestHeader("Authorization", s.Authorization);
    const o = new FormData();
    return o.append("file", e), new Promise((a, c) => {
      t.onload = function() {
        t.status >= 200 && t.status < 300 ? a(JSON.parse(t.responseText)) : c(new Error(t.statusText));
      }, t.onerror = function() {
        c(new Error("Network Error"));
      }, t.send(o);
    });
  }
  /**
   * Fetch-based upload method. Note that this will use NDK's httpFetch
   * @param blob
   * @returns Promise that resolves to the upload response
   *
   * @example
   * const nip96 = ndk.getNip96("nostrcheck.me");
   * const blob = new Blob(["Hello, world!"], { type: "text/plain" });
   * const response = await nip96.upload(blob);
   * console.log(response);
   */
  async upload(t) {
    const e = "POST", { url: n, headers: r } = await this.prepareUpload(t, e), s = new FormData();
    s.append("file", t);
    const o = await this.ndk.httpFetch(this.spec.api_url, {
      method: e,
      headers: r,
      body: s
    });
    if (o.status !== 200)
      throw new Error(`Failed to upload file to ${n}`);
    const a = await o.json();
    if (a.status !== "success")
      throw new Error(a.message);
    return a;
  }
  validateHttpFetch() {
    if (!this.ndk)
      throw new Error("NDK is required to fetch NIP96 spec");
    if (!this.ndk.httpFetch)
      throw new Error("NDK must have an httpFetch method to fetch NIP96 spec");
  }
  async fetchSpec() {
    this.validateHttpFetch();
    const t = await this.ndk.httpFetch(this.url);
    if (t.status !== 200)
      throw new Error(`Failed to fetch NIP96 spec from ${this.url}`);
    const e = await t.json();
    if (!e)
      throw new Error(`Failed to parse NIP96 spec from ${this.url}`);
    this.spec = e, this.nip98Required = this.spec.plans.free.is_nip98_required;
  }
  async generateNip98Header(t, e, n) {
    const r = new NDKEvent(this.ndk, {
      kind: 27235,
      tags: [
        ["u", t],
        ["method", e]
      ]
    });
    if (["POST", "PUT", "PATCH"].includes(e)) {
      const o = await this.calculateSha256(n);
      r.tags.push(["payload", o]);
    }
    return await r.sign(), `Nostr ${btoa(JSON.stringify(r.rawEvent()))}`;
  }
  async calculateSha256(t) {
    const e = await t.arrayBuffer(), n = await crypto.subtle.digest("SHA-256", e);
    return Array.from(new Uint8Array(n)).map((o) => o.toString(16).padStart(2, "0")).join("");
  }
}, Queue = class {
  constructor(t, e) {
    M(this, "queue", []);
    M(this, "maxConcurrency");
    M(this, "processing", /* @__PURE__ */ new Set());
    M(this, "promises", /* @__PURE__ */ new Map());
    this.maxConcurrency = e;
  }
  add(t) {
    if (this.promises.has(t.id))
      return this.promises.get(t.id);
    const e = new Promise((n, r) => {
      this.queue.push({
        ...t,
        func: () => t.func().then(
          (s) => (n(s), s),
          (s) => {
            throw r(s), s;
          }
        )
      }), this.process();
    });
    return this.promises.set(t.id, e), e.finally(() => {
      this.promises.delete(t.id), this.processing.delete(t.id);
    }), e;
  }
  process() {
    if (this.processing.size >= this.maxConcurrency || this.queue.length === 0)
      return;
    const t = this.queue.shift();
    !t || this.processing.has(t.id) || (this.processing.add(t.id), t.func());
  }
  clear() {
    this.queue = [];
  }
  clearProcessing() {
    this.processing.clear();
  }
  clearAll() {
    this.clear(), this.clearProcessing();
  }
  length() {
    return this.queue.length;
  }
}, DEFAULT_OUTBOX_RELAYS = ["wss://purplepag.es/", "wss://profiles.nos.social/"], DEFAULT_BLACKLISTED_RELAYS = [
  "wss://brb.io/",
  // BRB
  "wss://nostr.mutinywallet.com/"
  // Don't try to read from this relay since it's a write-only relay
  // "wss://purplepag.es/", // This is a hack, since this is a mostly read-only relay, but not fully. Once we have relay routing this can be removed so it only receives the supported kinds
], NDK = class extends lib$1.EventEmitter {
  constructor(e = {}) {
    super();
    M(this, "explicitRelayUrls");
    M(this, "pool");
    M(this, "outboxPool");
    M(this, "_signer");
    M(this, "_activeUser");
    M(this, "cacheAdapter");
    M(this, "debug");
    M(this, "devWriteRelaySet");
    M(this, "outboxTracker");
    M(this, "mutedIds");
    M(this, "clientName");
    M(this, "clientNip89");
    M(this, "queuesZapConfig");
    M(this, "queuesNip05");
    M(this, "asyncSigVerification", !1);
    M(this, "validationRatio", 1);
    /**
     * Default relay-auth policy that will be used when a relay requests authentication,
     * if no other policy is specified for that relay.
     *
     * @example Disconnect from relays that request authentication:
     * ```typescript
     * ndk.relayAuthDefaultPolicy = NDKAuthPolicies.disconnect(ndk.pool);
     * ```
     *
     * @example Sign in to relays that request authentication:
     * ```typescript
     * ndk.relayAuthDefaultPolicy = NDKAuthPolicies.signIn({ndk})
     * ```
     *
     * @example Sign in to relays that request authentication, asking the user for confirmation:
     * ```typescript
     * ndk.relayAuthDefaultPolicy = (relay: NDKRelay) => {
     *     const signIn = NDKAuthPolicies.signIn({ndk});
     *     if (confirm(`Relay ${relay.url} is requesting authentication, do you want to sign in?`)) {
     *        signIn(relay);
     *     }
     * }
     * ```
     */
    M(this, "relayAuthDefaultPolicy");
    /**
     * Fetch function to use for HTTP requests.
     *
     * @example
     * ```typescript
     * import fetch from "node-fetch";
     *
     * ndk.httpFetch = fetch;
     * ```
     */
    M(this, "httpFetch");
    M(this, "autoConnectUserRelays", !0);
    M(this, "autoFetchUserMutelist", !0);
    /**
     * Fetches event following a tag
     * @param tag
     * @param subOpts
     * @returns
     */
    M(this, "fetchEventFromTag", fetchEventFromTag.bind(this));
    this.debug = e.debug || debug("ndk"), this.explicitRelayUrls = e.explicitRelayUrls || [], this.pool = new NDKPool(
      e.explicitRelayUrls || [],
      e.blacklistRelayUrls || DEFAULT_BLACKLISTED_RELAYS,
      this
    ), this.debug(`Starting with explicit relays: ${JSON.stringify(this.explicitRelayUrls)}`), this.pool.on("relay:auth", async (n, r) => {
      this.relayAuthDefaultPolicy && await this.relayAuthDefaultPolicy(n, r);
    }), this.autoConnectUserRelays = e.autoConnectUserRelays ?? !0, this.autoFetchUserMutelist = e.autoFetchUserMutelist ?? !0, this.clientName = e.clientName, this.clientNip89 = e.clientNip89, this.relayAuthDefaultPolicy = e.relayAuthDefaultPolicy, e.enableOutboxModel && (this.outboxPool = new NDKPool(
      e.outboxRelayUrls || DEFAULT_OUTBOX_RELAYS,
      e.blacklistRelayUrls || DEFAULT_BLACKLISTED_RELAYS,
      this,
      this.debug.extend("outbox-pool")
    ), this.outboxTracker = new OutboxTracker(this)), this.signer = e.signer, this.cacheAdapter = e.cacheAdapter, this.mutedIds = e.mutedIds || /* @__PURE__ */ new Map(), e.devWriteRelayUrls && (this.devWriteRelaySet = NDKRelaySet.fromRelayUrls(e.devWriteRelayUrls, this)), this.queuesZapConfig = new Queue("zaps", 3), this.queuesNip05 = new Queue("nip05", 10), this.signatureVerificationWorker = e.signatureVerificationWorker, this.validationRatio = e.validationRatio || 1;
    try {
      this.httpFetch = fetch;
    } catch {
    }
  }
  set signatureVerificationWorker(e) {
    this.asyncSigVerification = !!e, e && signatureVerificationInit(e);
  }
  /**
   * Adds an explicit relay to the pool.
   * @param url
   * @param relayAuthPolicy Authentication policy to use if different from the default
   * @param connect Whether to connect to the relay automatically
   * @returns
   */
  addExplicitRelay(e, n, r = !0) {
    let s;
    return typeof e == "string" ? s = new NDKRelay(e, n) : s = e, this.pool.addRelay(s, r), this.explicitRelayUrls.push(s.url), s;
  }
  toJSON() {
    return { relayCount: this.pool.relays.size }.toString();
  }
  get activeUser() {
    return this._activeUser;
  }
  /**
   * Sets the active user for this NDK instance, typically this will be
   * called when assigning a signer to the NDK instance.
   *
   * This function will automatically connect to the user's relays if
   * `autoConnectUserRelays` is set to true.
   *
   * It will also fetch the user's mutelist if `autoFetchUserMutelist` is set to true.
   */
  set activeUser(e) {
    var r;
    const n = ((r = this._activeUser) == null ? void 0 : r.pubkey) !== (e == null ? void 0 : e.pubkey);
    if (this._activeUser = e, e && n) {
      const s = async (g) => {
        const y = await NDKRelayList.forUser(g.pubkey, this);
        if (!y) {
          this.debug("No relay list found for user", { npub: g.npub });
          return;
        }
        this.debug("Connecting to user relays", {
          npub: g.npub,
          relays: y.relays
        });
        for (const $ of y.relays) {
          let k = this.pool.relays.get($);
          k || (k = new NDKRelay($), this.pool.addRelay(k));
        }
      }, o = async (g) => {
        const y = await this.fetchEvent({
          kinds: [
            10006
            /* BlockRelayList */
          ],
          authors: [g.pubkey]
        });
        if (y) {
          const $ = lists_default.from(y);
          for (const k of $.items)
            this.pool.blacklistRelayUrls.add(k[0]);
        }
        this.debug("Blocked relays", { blockedRelays: y });
      }, a = async (g) => {
        const y = await this.fetchEvent({
          kinds: [
            1e4
            /* MuteList */
          ],
          authors: [g.pubkey]
        });
        if (y) {
          const $ = lists_default.from(y);
          for (const k of $.items)
            this.mutedIds.set(k[1], k[0]);
        }
      }, c = [o];
      this.autoConnectUserRelays && c.push(s), this.autoFetchUserMutelist && c.push(a);
      const h = async (g) => {
        for (const y of c)
          await y(g);
      }, p = this.outboxPool || this.pool;
      p.connectedRelays.length > 0 ? h(e) : (this.debug("Waiting for connection to main relays"), p.once("connect", () => {
        h(e);
      }));
    } else
      e || (this.mutedIds = /* @__PURE__ */ new Map());
  }
  get signer() {
    return this._signer;
  }
  set signer(e) {
    this._signer = e, e && this.emit("signer:ready", e), e == null || e.user().then((n) => {
      n.ndk = this, this.activeUser = n;
    });
  }
  /**
   * Connect to relays with optional timeout.
   * If the timeout is reached, the connection will be continued to be established in the background.
   */
  async connect(e) {
    this._signer && this.autoConnectUserRelays && (this.debug("Attempting to connect to user relays specified by signer"), this._signer.relays && (await this._signer.relays()).forEach((s) => this.pool.addRelay(s)));
    const n = [this.pool.connect(e)];
    return this.outboxPool && n.push(this.outboxPool.connect(e)), this.debug("Connecting to relays", { timeoutMs: e }), Promise.allSettled(n).then(() => {
    });
  }
  /**
   * Get a NDKUser object
   *
   * @param opts
   * @returns
   */
  getUser(e) {
    const n = new NDKUser(e);
    return n.ndk = this, n;
  }
  /**
   * Get a NDKUser from a NIP05
   * @param nip05 NIP-05 ID
   * @param skipCache Skip cache
   * @returns
   */
  async getUserFromNip05(e, n = !1) {
    return NDKUser.fromNip05(e, this, n);
  }
  /**
   * Create a new subscription. Subscriptions automatically start, you can make them automatically close when all relays send back an EOSE by setting `opts.closeOnEose` to `true`)
   *
   * @param filters
   * @param opts
   * @param relaySet explicit relay set to use
   * @param autoStart automatically start the subscription
   * @returns NDKSubscription
   */
  subscribe(e, n, r, s = !0) {
    var a;
    const o = new NDKSubscription(this, e, n, r);
    if (r)
      for (const c of r.relays)
        this.pool.useTemporaryRelay(c);
    if (this.outboxPool && o.hasAuthorsFilter()) {
      const c = o.filters.filter((h) => {
        var p;
        return h.authors && ((p = h.authors) == null ? void 0 : p.length) > 0;
      }).map((h) => h.authors).flat();
      (a = this.outboxTracker) == null || a.trackUsers(c);
    }
    return s && setTimeout(() => o.start(), 0), o;
  }
  /**
   * Publish an event to a relay
   * @param event event to publish
   * @param relaySet explicit relay set to use
   * @param timeoutMs timeout in milliseconds to wait for the event to be published
   * @returns The relays the event was published to
   *
   * @deprecated Use `event.publish()` instead
   */
  async publish(e, n, r) {
    return this.debug("Deprecated: Use `event.publish()` instead"), e.publish(n, r);
  }
  /**
   * Fetch a single event.
   *
   * @param idOrFilter event id in bech32 format or filter
   * @param opts subscription options
   * @param relaySetOrRelay explicit relay set to use
   */
  async fetchEvent(e, n, r) {
    let s, o;
    if (r instanceof NDKRelay ? o = new NDKRelaySet(/* @__PURE__ */ new Set([r]), this) : r instanceof NDKRelaySet && (o = r), !r && typeof e == "string" && !isNip33AValue(e)) {
      const a = relaysFromBech32(e);
      a.length > 0 && (o = new NDKRelaySet(new Set(a), this), o = correctRelaySet(o, this.pool));
    }
    if (typeof e == "string" ? s = filterFromId(e) : s = e, !s)
      throw new Error(`Invalid filter: ${JSON.stringify(e)}`);
    return new Promise((a) => {
      let c = null;
      const h = this.subscribe(
        s,
        { ...n || {}, closeOnEose: !0 },
        o,
        !1
      );
      h.on("event", (p) => {
        p.ndk = this, p.isReplaceable() ? (!c || c.created_at < p.created_at) && (c = p) : a(p);
      }), h.on("eose", () => {
        a(c);
      }), h.start();
    });
  }
  /**
   * Fetch events
   */
  async fetchEvents(e, n, r) {
    return new Promise((s) => {
      const o = /* @__PURE__ */ new Map(), a = this.subscribe(
        e,
        { ...n || {}, closeOnEose: !0 },
        r,
        !1
      ), c = (h) => {
        const p = h.deduplicationKey(), g = o.get(p);
        g && (h = dedup(g, h)), h.ndk = this, o.set(p, h);
      };
      a.on("event", c), a.on("event:dup", c), a.on("eose", () => {
        s(new Set(o.values()));
      }), a.start();
    });
  }
  /**
   * Ensures that a signer is available to sign an event.
   */
  assertSigner() {
    if (!this.signer)
      throw this.emit("signer:required"), new Error("Signer required");
  }
  /**
   * Creates a new Nip96 instance for the given domain.
   * @param domain Domain to use for nip96 uploads
   * @example Upload a file to a NIP-96 enabled domain:
   *
   * ```typescript
   * const blob = new Blob(["Hello, world!"], { type: "text/plain" });
   * const nip96 = ndk.getNip96("nostrcheck.me");
   * await nip96.upload(blob);
   * ```
   */
  getNip96(e) {
    return new Nip96(e, this);
  }
  /**
   * Creates a new Nostr Wallet Connect instance for the given URI and waits for it to be ready.
   * @param uri WalletConnect URI
   * @param connectTimeout Timeout in milliseconds to wait for the NWC to be ready. Set to `false` to avoid connecting.
   * @example
   * const nwc = await ndk.nwc("nostr+walletconnect://....")
   * nwc.payInvoice("lnbc...")
   */
  async nwc(e, n = 2e3) {
    const r = await NDKNwc.fromURI(this, e);
    return n !== !1 && await r.blockUntilReady(n), r;
  }
}, dexie_min = { exports: {} };
(function(t, e) {
  (function(n, r) {
    t.exports = r();
  })(commonjsGlobal, function() {
    var n = function(l, d) {
      return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(b, m) {
        b.__proto__ = m;
      } || function(b, m) {
        for (var v in m)
          Object.prototype.hasOwnProperty.call(m, v) && (b[v] = m[v]);
      })(l, d);
    }, r = function() {
      return (r = Object.assign || function(l) {
        for (var d, b = 1, m = arguments.length; b < m; b++)
          for (var v in d = arguments[b])
            Object.prototype.hasOwnProperty.call(d, v) && (l[v] = d[v]);
        return l;
      }).apply(this, arguments);
    };
    function s(l, d, b) {
      for (var m, v = 0, _ = d.length; v < _; v++)
        !m && v in d || ((m = m || Array.prototype.slice.call(d, 0, v))[v] = d[v]);
      return l.concat(m || Array.prototype.slice.call(d));
    }
    var o = typeof globalThis < "u" ? globalThis : typeof self < "u" ? self : typeof window < "u" ? window : commonjsGlobal, a = Object.keys, c = Array.isArray;
    function h(l, d) {
      return typeof d != "object" || a(d).forEach(function(b) {
        l[b] = d[b];
      }), l;
    }
    typeof Promise > "u" || o.Promise || (o.Promise = Promise);
    var p = Object.getPrototypeOf, g = {}.hasOwnProperty;
    function y(l, d) {
      return g.call(l, d);
    }
    function $(l, d) {
      typeof d == "function" && (d = d(p(l))), (typeof Reflect > "u" ? a : Reflect.ownKeys)(d).forEach(function(b) {
        S(l, b, d[b]);
      });
    }
    var k = Object.defineProperty;
    function S(l, d, b, m) {
      k(l, d, h(b && y(b, "get") && typeof b.get == "function" ? { get: b.get, set: b.set, configurable: !0 } : { value: b, configurable: !0, writable: !0 }, m));
    }
    function w(l) {
      return { from: function(d) {
        return l.prototype = Object.create(d.prototype), S(l.prototype, "constructor", l), { extend: $.bind(null, l.prototype) };
      } };
    }
    var x = Object.getOwnPropertyDescriptor, A = [].slice;
    function N(l, d, b) {
      return A.call(l, d, b);
    }
    function C(l, d) {
      return d(l);
    }
    function W(l) {
      if (!l)
        throw new Error("Assertion Failed");
    }
    function q(l) {
      o.setImmediate ? setImmediate(l) : setTimeout(l, 0);
    }
    function I(l, d) {
      if (typeof d == "string" && y(l, d))
        return l[d];
      if (!d)
        return l;
      if (typeof d != "string") {
        for (var b = [], m = 0, v = d.length; m < v; ++m) {
          var _ = I(l, d[m]);
          b.push(_);
        }
        return b;
      }
      var R = d.indexOf(".");
      if (R !== -1) {
        var U = l[d.substr(0, R)];
        return U == null ? void 0 : I(U, d.substr(R + 1));
      }
    }
    function L(l, d, b) {
      if (l && d !== void 0 && !("isFrozen" in Object && Object.isFrozen(l)))
        if (typeof d != "string" && "length" in d) {
          W(typeof b != "string" && "length" in b);
          for (var m = 0, v = d.length; m < v; ++m)
            L(l, d[m], b[m]);
        } else {
          var _, R, U = d.indexOf(".");
          U !== -1 ? (_ = d.substr(0, U), (R = d.substr(U + 1)) === "" ? b === void 0 ? c(l) && !isNaN(parseInt(_)) ? l.splice(_, 1) : delete l[_] : l[_] = b : L(U = !(U = l[_]) || !y(l, _) ? l[_] = {} : U, R, b)) : b === void 0 ? c(l) && !isNaN(parseInt(d)) ? l.splice(d, 1) : delete l[d] : l[d] = b;
        }
    }
    function P(l) {
      var d, b = {};
      for (d in l)
        y(l, d) && (b[d] = l[d]);
      return b;
    }
    var ie = [].concat;
    function te(l) {
      return ie.apply([], l);
    }
    var ot = "BigUint64Array,BigInt64Array,Array,Boolean,String,Date,RegExp,Blob,File,FileList,FileSystemFileHandle,FileSystemDirectoryHandle,ArrayBuffer,DataView,Uint8ClampedArray,ImageBitmap,ImageData,Map,Set,CryptoKey".split(",").concat(te([8, 16, 32, 64].map(function(l) {
      return ["Int", "Uint", "Float"].map(function(d) {
        return d + l + "Array";
      });
    }))).filter(function(l) {
      return o[l];
    }), T = new Set(ot.map(function(l) {
      return o[l];
    })), O = null;
    function K(l) {
      return O = /* @__PURE__ */ new WeakMap(), l = function d(b) {
        if (!b || typeof b != "object")
          return b;
        var m = O.get(b);
        if (m)
          return m;
        if (c(b)) {
          m = [], O.set(b, m);
          for (var v = 0, _ = b.length; v < _; ++v)
            m.push(d(b[v]));
        } else if (T.has(b.constructor))
          m = b;
        else {
          var R, U = p(b);
          for (R in m = U === Object.prototype ? {} : Object.create(U), O.set(b, m), b)
            y(b, R) && (m[R] = d(b[R]));
        }
        return m;
      }(l), O = null, l;
    }
    var ae = {}.toString;
    function E(l) {
      return ae.call(l).slice(8, -1);
    }
    var B = typeof Symbol < "u" ? Symbol.iterator : "@@iterator", H = typeof B == "symbol" ? function(l) {
      var d;
      return l != null && (d = l[B]) && d.apply(l);
    } : function() {
      return null;
    };
    function Q(l, d) {
      return d = l.indexOf(d), 0 <= d && l.splice(d, 1), 0 <= d;
    }
    var F = {};
    function ce(l) {
      var d, b, m, v;
      if (arguments.length === 1) {
        if (c(l))
          return l.slice();
        if (this === F && typeof l == "string")
          return [l];
        if (v = H(l)) {
          for (b = []; !(m = v.next()).done; )
            b.push(m.value);
          return b;
        }
        if (l == null)
          return [l];
        if (typeof (d = l.length) != "number")
          return [l];
        for (b = new Array(d); d--; )
          b[d] = l[d];
        return b;
      }
      for (d = arguments.length, b = new Array(d); d--; )
        b[d] = arguments[d];
      return b;
    }
    var oe = typeof Symbol < "u" ? function(l) {
      return l[Symbol.toStringTag] === "AsyncFunction";
    } : function() {
      return !1;
    }, Ct = ["Unknown", "Constraint", "Data", "TransactionInactive", "ReadOnly", "Version", "NotFound", "InvalidState", "InvalidAccess", "Abort", "Timeout", "QuotaExceeded", "Syntax", "DataClone"], Qe = ["Modify", "Bulk", "OpenFailed", "VersionChange", "Schema", "Upgrade", "InvalidTable", "MissingAPI", "NoSuchDatabase", "InvalidArgument", "SubTransaction", "Unsupported", "Internal", "DatabaseClosed", "PrematureCommit", "ForeignAwait"].concat(Ct), le = { VersionChanged: "Database version changed by other database connection", DatabaseClosed: "Database has been closed", Abort: "Transaction aborted", TransactionInactive: "Transaction has already completed or failed", MissingAPI: "IndexedDB API missing. Please visit https://tinyurl.com/y2uuvskb" };
    function ve(l, d) {
      this.name = l, this.message = d;
    }
    function xe(l, d) {
      return l + ". Errors: " + Object.keys(d).map(function(b) {
        return d[b].toString();
      }).filter(function(b, m, v) {
        return v.indexOf(b) === m;
      }).join(`
`);
    }
    function Se(l, d, b, m) {
      this.failures = d, this.failedKeys = m, this.successCount = b, this.message = xe(l, d);
    }
    function Te(l, d) {
      this.name = "BulkError", this.failures = Object.keys(d).map(function(b) {
        return d[b];
      }), this.failuresByPos = d, this.message = xe(l, this.failures);
    }
    w(ve).from(Error).extend({ toString: function() {
      return this.name + ": " + this.message;
    } }), w(Se).from(ve), w(Te).from(ve);
    var Ae = Qe.reduce(function(l, d) {
      return l[d] = d + "Error", l;
    }, {}), Oe = ve, de = Qe.reduce(function(l, d) {
      var b = d + "Error";
      function m(v, _) {
        this.name = b, v ? typeof v == "string" ? (this.message = "".concat(v).concat(_ ? `
 ` + _ : ""), this.inner = _ || null) : typeof v == "object" && (this.message = "".concat(v.name, " ").concat(v.message), this.inner = v) : (this.message = le[d] || b, this.inner = null);
      }
      return w(m).from(Oe), l[d] = m, l;
    }, {});
    de.Syntax = SyntaxError, de.Type = TypeError, de.Range = RangeError;
    var Ue = Ct.reduce(function(l, d) {
      return l[d + "Error"] = de[d], l;
    }, {}), Ve = Qe.reduce(function(l, d) {
      return ["Syntax", "Type", "Range"].indexOf(d) === -1 && (l[d + "Error"] = de[d]), l;
    }, {});
    function _e() {
    }
    function Be(l) {
      return l;
    }
    function Pe(l, d) {
      return l == null || l === Be ? d : function(b) {
        return d(l(b));
      };
    }
    function qe(l, d) {
      return function() {
        l.apply(this, arguments), d.apply(this, arguments);
      };
    }
    function Xe(l, d) {
      return l === _e ? d : function() {
        var b = l.apply(this, arguments);
        b !== void 0 && (arguments[0] = b);
        var m = this.onsuccess, v = this.onerror;
        this.onsuccess = null, this.onerror = null;
        var _ = d.apply(this, arguments);
        return m && (this.onsuccess = this.onsuccess ? qe(m, this.onsuccess) : m), v && (this.onerror = this.onerror ? qe(v, this.onerror) : v), _ !== void 0 ? _ : b;
      };
    }
    function Mr(l, d) {
      return l === _e ? d : function() {
        l.apply(this, arguments);
        var b = this.onsuccess, m = this.onerror;
        this.onsuccess = this.onerror = null, d.apply(this, arguments), b && (this.onsuccess = this.onsuccess ? qe(b, this.onsuccess) : b), m && (this.onerror = this.onerror ? qe(m, this.onerror) : m);
      };
    }
    function qr(l, d) {
      return l === _e ? d : function(b) {
        var m = l.apply(this, arguments);
        h(b, m);
        var v = this.onsuccess, _ = this.onerror;
        return this.onsuccess = null, this.onerror = null, b = d.apply(this, arguments), v && (this.onsuccess = this.onsuccess ? qe(v, this.onsuccess) : v), _ && (this.onerror = this.onerror ? qe(_, this.onerror) : _), m === void 0 ? b === void 0 ? void 0 : b : h(m, b);
      };
    }
    function jr(l, d) {
      return l === _e ? d : function() {
        return d.apply(this, arguments) !== !1 && l.apply(this, arguments);
      };
    }
    function wn(l, d) {
      return l === _e ? d : function() {
        var b = l.apply(this, arguments);
        if (b && typeof b.then == "function") {
          for (var m = this, v = arguments.length, _ = new Array(v); v--; )
            _[v] = arguments[v];
          return b.then(function() {
            return d.apply(m, _);
          });
        }
        return d.apply(this, arguments);
      };
    }
    Ve.ModifyError = Se, Ve.DexieError = ve, Ve.BulkError = Te;
    var nt = typeof location < "u" && /^(http|https):\/\/(localhost|127\.0\.0\.1)/.test(location.href);
    function rr(l) {
      nt = l;
    }
    var Rt = {}, ir = 100, ot = typeof Promise > "u" ? [] : function() {
      var l = Promise.resolve();
      if (typeof crypto > "u" || !crypto.subtle)
        return [l, p(l), l];
      var d = crypto.subtle.digest("SHA-512", new Uint8Array([0]));
      return [d, p(d), l];
    }(), Ct = ot[0], Qe = ot[1], ot = ot[2], Qe = Qe && Qe.then, Nt = Ct && Ct.constructor, $n = !!ot, Lt = function(l, d) {
      Ht.push([l, d]), zt && (queueMicrotask(Vr), zt = !1);
    }, vn = !0, zt = !0, gt = [], Vt = [], En = Be, ct = { id: "global", global: !0, ref: 0, unhandleds: [], onunhandled: _e, pgp: !1, env: {}, finalize: _e }, Ee = ct, Ht = [], bt = 0, Wt = [];
    function $e(l) {
      if (typeof this != "object")
        throw new TypeError("Promises must be constructed via new");
      this._listeners = [], this._lib = !1;
      var d = this._PSD = Ee;
      if (typeof l != "function") {
        if (l !== Rt)
          throw new TypeError("Not a function");
        return this._state = arguments[1], this._value = arguments[2], void (this._state === !1 && _n(this, this._value));
      }
      this._state = null, this._value = null, ++d.ref, function b(m, v) {
        try {
          v(function(_) {
            if (m._state === null) {
              if (_ === m)
                throw new TypeError("A promise cannot be resolved with itself.");
              var R = m._lib && _t();
              _ && typeof _.then == "function" ? b(m, function(U, V) {
                _ instanceof $e ? _._then(U, V) : _.then(U, V);
              }) : (m._state = !0, m._value = _, or(m)), R && Bt();
            }
          }, _n.bind(null, m));
        } catch (_) {
          _n(m, _);
        }
      }(this, l);
    }
    var xn = { get: function() {
      var l = Ee, d = Xt;
      function b(m, v) {
        var _ = this, R = !l.global && (l !== Ee || d !== Xt), U = R && !ft(), V = new $e(function(j, Y) {
          Bn(_, new sr(cr(m, l, R, U), cr(v, l, R, U), j, Y, l));
        });
        return this._consoleTask && (V._consoleTask = this._consoleTask), V;
      }
      return b.prototype = Rt, b;
    }, set: function(l) {
      S(this, "then", l && l.prototype === Rt ? xn : { get: function() {
        return l;
      }, set: xn.set });
    } };
    function sr(l, d, b, m, v) {
      this.onFulfilled = typeof l == "function" ? l : null, this.onRejected = typeof d == "function" ? d : null, this.resolve = b, this.reject = m, this.psd = v;
    }
    function _n(l, d) {
      var b, m;
      Vt.push(d), l._state === null && (b = l._lib && _t(), d = En(d), l._state = !1, l._value = d, m = l, gt.some(function(v) {
        return v._value === m._value;
      }) || gt.push(m), or(l), b && Bt());
    }
    function or(l) {
      var d = l._listeners;
      l._listeners = [];
      for (var b = 0, m = d.length; b < m; ++b)
        Bn(l, d[b]);
      var v = l._PSD;
      --v.ref || v.finalize(), bt === 0 && (++bt, Lt(function() {
        --bt == 0 && An();
      }, []));
    }
    function Bn(l, d) {
      if (l._state !== null) {
        var b = l._state ? d.onFulfilled : d.onRejected;
        if (b === null)
          return (l._state ? d.resolve : d.reject)(l._value);
        ++d.psd.ref, ++bt, Lt(zr, [b, l, d]);
      } else
        l._listeners.push(d);
    }
    function zr(l, d, b) {
      try {
        var m, v = d._value;
        !d._state && Vt.length && (Vt = []), m = nt && d._consoleTask ? d._consoleTask.run(function() {
          return l(v);
        }) : l(v), d._state || Vt.indexOf(v) !== -1 || function(_) {
          for (var R = gt.length; R; )
            if (gt[--R]._value === _._value)
              return gt.splice(R, 1);
        }(d), b.resolve(m);
      } catch (_) {
        b.reject(_);
      } finally {
        --bt == 0 && An(), --b.psd.ref || b.psd.finalize();
      }
    }
    function Vr() {
      mt(ct, function() {
        _t() && Bt();
      });
    }
    function _t() {
      var l = vn;
      return zt = vn = !1, l;
    }
    function Bt() {
      var l, d, b;
      do
        for (; 0 < Ht.length; )
          for (l = Ht, Ht = [], b = l.length, d = 0; d < b; ++d) {
            var m = l[d];
            m[0].apply(null, m[1]);
          }
      while (0 < Ht.length);
      zt = vn = !0;
    }
    function An() {
      var l = gt;
      gt = [], l.forEach(function(m) {
        m._PSD.onunhandled.call(null, m._value, m);
      });
      for (var d = Wt.slice(0), b = d.length; b; )
        d[--b]();
    }
    function Gt(l) {
      return new $e(Rt, !1, l);
    }
    function Ke(l, d) {
      var b = Ee;
      return function() {
        var m = _t(), v = Ee;
        try {
          return ht(b, !0), l.apply(this, arguments);
        } catch (_) {
          d && d(_);
        } finally {
          ht(v, !1), m && Bt();
        }
      };
    }
    $($e.prototype, { then: xn, _then: function(l, d) {
      Bn(this, new sr(null, null, l, d, Ee));
    }, catch: function(l) {
      if (arguments.length === 1)
        return this.then(null, l);
      var d = l, b = arguments[1];
      return typeof d == "function" ? this.then(null, function(m) {
        return (m instanceof d ? b : Gt)(m);
      }) : this.then(null, function(m) {
        return (m && m.name === d ? b : Gt)(m);
      });
    }, finally: function(l) {
      return this.then(function(d) {
        return $e.resolve(l()).then(function() {
          return d;
        });
      }, function(d) {
        return $e.resolve(l()).then(function() {
          return Gt(d);
        });
      });
    }, timeout: function(l, d) {
      var b = this;
      return l < 1 / 0 ? new $e(function(m, v) {
        var _ = setTimeout(function() {
          return v(new de.Timeout(d));
        }, l);
        b.then(m, v).finally(clearTimeout.bind(null, _));
      }) : this;
    } }), typeof Symbol < "u" && Symbol.toStringTag && S($e.prototype, Symbol.toStringTag, "Dexie.Promise"), ct.env = ar(), $($e, { all: function() {
      var l = ce.apply(null, arguments).map(Jt);
      return new $e(function(d, b) {
        l.length === 0 && d([]);
        var m = l.length;
        l.forEach(function(v, _) {
          return $e.resolve(v).then(function(R) {
            l[_] = R, --m || d(l);
          }, b);
        });
      });
    }, resolve: function(l) {
      return l instanceof $e ? l : l && typeof l.then == "function" ? new $e(function(d, b) {
        l.then(d, b);
      }) : new $e(Rt, !0, l);
    }, reject: Gt, race: function() {
      var l = ce.apply(null, arguments).map(Jt);
      return new $e(function(d, b) {
        l.map(function(m) {
          return $e.resolve(m).then(d, b);
        });
      });
    }, PSD: { get: function() {
      return Ee;
    }, set: function(l) {
      return Ee = l;
    } }, totalEchoes: { get: function() {
      return Xt;
    } }, newPSD: lt, usePSD: mt, scheduler: { get: function() {
      return Lt;
    }, set: function(l) {
      Lt = l;
    } }, rejectionMapper: { get: function() {
      return En;
    }, set: function(l) {
      En = l;
    } }, follow: function(l, d) {
      return new $e(function(b, m) {
        return lt(function(v, _) {
          var R = Ee;
          R.unhandleds = [], R.onunhandled = _, R.finalize = qe(function() {
            var U, V = this;
            U = function() {
              V.unhandleds.length === 0 ? v() : _(V.unhandleds[0]);
            }, Wt.push(function j() {
              U(), Wt.splice(Wt.indexOf(j), 1);
            }), ++bt, Lt(function() {
              --bt == 0 && An();
            }, []);
          }, R.finalize), l();
        }, d, b, m);
      });
    } }), Nt && (Nt.allSettled && S($e, "allSettled", function() {
      var l = ce.apply(null, arguments).map(Jt);
      return new $e(function(d) {
        l.length === 0 && d([]);
        var b = l.length, m = new Array(b);
        l.forEach(function(v, _) {
          return $e.resolve(v).then(function(R) {
            return m[_] = { status: "fulfilled", value: R };
          }, function(R) {
            return m[_] = { status: "rejected", reason: R };
          }).then(function() {
            return --b || d(m);
          });
        });
      });
    }), Nt.any && typeof AggregateError < "u" && S($e, "any", function() {
      var l = ce.apply(null, arguments).map(Jt);
      return new $e(function(d, b) {
        l.length === 0 && b(new AggregateError([]));
        var m = l.length, v = new Array(m);
        l.forEach(function(_, R) {
          return $e.resolve(_).then(function(U) {
            return d(U);
          }, function(U) {
            v[R] = U, --m || b(new AggregateError(v));
          });
        });
      });
    }));
    var je = { awaits: 0, echoes: 0, id: 0 }, Wr = 0, Zt = [], Yt = 0, Xt = 0, Gr = 0;
    function lt(l, d, b, m) {
      var v = Ee, _ = Object.create(v);
      return _.parent = v, _.ref = 0, _.global = !1, _.id = ++Gr, ct.env, _.env = $n ? { Promise: $e, PromiseProp: { value: $e, configurable: !0, writable: !0 }, all: $e.all, race: $e.race, allSettled: $e.allSettled, any: $e.any, resolve: $e.resolve, reject: $e.reject } : {}, d && h(_, d), ++v.ref, _.finalize = function() {
        --this.parent.ref || this.parent.finalize();
      }, m = mt(_, l, b, m), _.ref === 0 && _.finalize(), m;
    }
    function At() {
      return je.id || (je.id = ++Wr), ++je.awaits, je.echoes += ir, je.id;
    }
    function ft() {
      return !!je.awaits && (--je.awaits == 0 && (je.id = 0), je.echoes = je.awaits * ir, !0);
    }
    function Jt(l) {
      return je.echoes && l && l.constructor === Nt ? (At(), l.then(function(d) {
        return ft(), d;
      }, function(d) {
        return ft(), Fe(d);
      })) : l;
    }
    function Zr() {
      var l = Zt[Zt.length - 1];
      Zt.pop(), ht(l, !1);
    }
    function ht(l, d) {
      var b, m = Ee;
      (d ? !je.echoes || Yt++ && l === Ee : !Yt || --Yt && l === Ee) || queueMicrotask(d ? (function(v) {
        ++Xt, je.echoes && --je.echoes != 0 || (je.echoes = je.awaits = je.id = 0), Zt.push(Ee), ht(v, !0);
      }).bind(null, l) : Zr), l !== Ee && (Ee = l, m === ct && (ct.env = ar()), $n && (b = ct.env.Promise, d = l.env, (m.global || l.global) && (Object.defineProperty(o, "Promise", d.PromiseProp), b.all = d.all, b.race = d.race, b.resolve = d.resolve, b.reject = d.reject, d.allSettled && (b.allSettled = d.allSettled), d.any && (b.any = d.any))));
    }
    function ar() {
      var l = o.Promise;
      return $n ? { Promise: l, PromiseProp: Object.getOwnPropertyDescriptor(o, "Promise"), all: l.all, race: l.race, allSettled: l.allSettled, any: l.any, resolve: l.resolve, reject: l.reject } : {};
    }
    function mt(l, d, b, m, v) {
      var _ = Ee;
      try {
        return ht(l, !0), d(b, m, v);
      } finally {
        ht(_, !1);
      }
    }
    function cr(l, d, b, m) {
      return typeof l != "function" ? l : function() {
        var v = Ee;
        b && At(), ht(d, !0);
        try {
          return l.apply(this, arguments);
        } finally {
          ht(v, !1), m && queueMicrotask(ft);
        }
      };
    }
    function kn(l) {
      Promise === Nt && je.echoes === 0 ? Yt === 0 ? l() : enqueueNativeMicroTask(l) : setTimeout(l, 0);
    }
    ("" + Qe).indexOf("[native code]") === -1 && (At = ft = _e);
    var Fe = $e.reject, wt = "￿", st = "Invalid key provided. Keys must be of type string, number, Date or Array<string | number | Date>.", ur = "String expected.", kt = [], Qt = "__dbnames", Sn = "readonly", Tn = "readwrite";
    function $t(l, d) {
      return l ? d ? function() {
        return l.apply(this, arguments) && d.apply(this, arguments);
      } : l : d;
    }
    var lr = { type: 3, lower: -1 / 0, lowerOpen: !1, upper: [[]], upperOpen: !1 };
    function en(l) {
      return typeof l != "string" || /\./.test(l) ? function(d) {
        return d;
      } : function(d) {
        return d[l] === void 0 && l in d && delete (d = K(d))[l], d;
      };
    }
    function fr() {
      throw de.Type();
    }
    function He(l, d) {
      try {
        var b = hr(l), m = hr(d);
        if (b !== m)
          return b === "Array" ? 1 : m === "Array" ? -1 : b === "binary" ? 1 : m === "binary" ? -1 : b === "string" ? 1 : m === "string" ? -1 : b === "Date" ? 1 : m !== "Date" ? NaN : -1;
        switch (b) {
          case "number":
          case "Date":
          case "string":
            return d < l ? 1 : l < d ? -1 : 0;
          case "binary":
            return function(v, _) {
              for (var R = v.length, U = _.length, V = R < U ? R : U, j = 0; j < V; ++j)
                if (v[j] !== _[j])
                  return v[j] < _[j] ? -1 : 1;
              return R === U ? 0 : R < U ? -1 : 1;
            }(dr(l), dr(d));
          case "Array":
            return function(v, _) {
              for (var R = v.length, U = _.length, V = R < U ? R : U, j = 0; j < V; ++j) {
                var Y = He(v[j], _[j]);
                if (Y !== 0)
                  return Y;
              }
              return R === U ? 0 : R < U ? -1 : 1;
            }(l, d);
        }
      } catch {
      }
      return NaN;
    }
    function hr(l) {
      var d = typeof l;
      return d != "object" ? d : ArrayBuffer.isView(l) ? "binary" : (l = E(l), l === "ArrayBuffer" ? "binary" : l);
    }
    function dr(l) {
      return l instanceof Uint8Array ? l : ArrayBuffer.isView(l) ? new Uint8Array(l.buffer, l.byteOffset, l.byteLength) : new Uint8Array(l);
    }
    var pr = (De.prototype._trans = function(l, d, b) {
      var m = this._tx || Ee.trans, v = this.name, _ = nt && typeof console < "u" && console.createTask && console.createTask("Dexie: ".concat(l === "readonly" ? "read" : "write", " ").concat(this.name));
      function R(j, Y, D) {
        if (!D.schema[v])
          throw new de.NotFound("Table " + v + " not part of transaction");
        return d(D.idbtrans, D);
      }
      var U = _t();
      try {
        var V = m && m.db._novip === this.db._novip ? m === Ee.trans ? m._promise(l, R, b) : lt(function() {
          return m._promise(l, R, b);
        }, { trans: m, transless: Ee.transless || Ee }) : function j(Y, D, X, z) {
          if (Y.idbdb && (Y._state.openComplete || Ee.letThrough || Y._vip)) {
            var Z = Y._createTransaction(D, X, Y._dbSchema);
            try {
              Z.create(), Y._state.PR1398_maxLoop = 3;
            } catch (J) {
              return J.name === Ae.InvalidState && Y.isOpen() && 0 < --Y._state.PR1398_maxLoop ? (console.warn("Dexie: Need to reopen db"), Y.close({ disableAutoOpen: !1 }), Y.open().then(function() {
                return j(Y, D, X, z);
              })) : Fe(J);
            }
            return Z._promise(D, function(J, G) {
              return lt(function() {
                return Ee.trans = Z, z(J, G, Z);
              });
            }).then(function(J) {
              if (D === "readwrite")
                try {
                  Z.idbtrans.commit();
                } catch {
                }
              return D === "readonly" ? J : Z._completion.then(function() {
                return J;
              });
            });
          }
          if (Y._state.openComplete)
            return Fe(new de.DatabaseClosed(Y._state.dbOpenError));
          if (!Y._state.isBeingOpened) {
            if (!Y._state.autoOpen)
              return Fe(new de.DatabaseClosed());
            Y.open().catch(_e);
          }
          return Y._state.dbReadyPromise.then(function() {
            return j(Y, D, X, z);
          });
        }(this.db, l, [this.name], R);
        return _ && (V._consoleTask = _, V = V.catch(function(j) {
          return console.trace(j), Fe(j);
        })), V;
      } finally {
        U && Bt();
      }
    }, De.prototype.get = function(l, d) {
      var b = this;
      return l && l.constructor === Object ? this.where(l).first(d) : l == null ? Fe(new de.Type("Invalid argument to Table.get()")) : this._trans("readonly", function(m) {
        return b.core.get({ trans: m, key: l }).then(function(v) {
          return b.hook.reading.fire(v);
        });
      }).then(d);
    }, De.prototype.where = function(l) {
      if (typeof l == "string")
        return new this.db.WhereClause(this, l);
      if (c(l))
        return new this.db.WhereClause(this, "[".concat(l.join("+"), "]"));
      var d = a(l);
      if (d.length === 1)
        return this.where(d[0]).equals(l[d[0]]);
      var b = this.schema.indexes.concat(this.schema.primKey).filter(function(V) {
        if (V.compound && d.every(function(Y) {
          return 0 <= V.keyPath.indexOf(Y);
        })) {
          for (var j = 0; j < d.length; ++j)
            if (d.indexOf(V.keyPath[j]) === -1)
              return !1;
          return !0;
        }
        return !1;
      }).sort(function(V, j) {
        return V.keyPath.length - j.keyPath.length;
      })[0];
      if (b && this.db._maxKey !== wt) {
        var R = b.keyPath.slice(0, d.length);
        return this.where(R).equals(R.map(function(j) {
          return l[j];
        }));
      }
      !b && nt && console.warn("The query ".concat(JSON.stringify(l), " on ").concat(this.name, " would benefit from a ") + "compound index [".concat(d.join("+"), "]"));
      var m = this.schema.idxByName, v = this.db._deps.indexedDB;
      function _(V, j) {
        return v.cmp(V, j) === 0;
      }
      var U = d.reduce(function(X, j) {
        var Y = X[0], D = X[1], X = m[j], z = l[j];
        return [Y || X, Y || !X ? $t(D, X && X.multi ? function(Z) {
          return Z = I(Z, j), c(Z) && Z.some(function(J) {
            return _(z, J);
          });
        } : function(Z) {
          return _(z, I(Z, j));
        }) : D];
      }, [null, null]), R = U[0], U = U[1];
      return R ? this.where(R.name).equals(l[R.keyPath]).filter(U) : b ? this.filter(U) : this.where(d).equals("");
    }, De.prototype.filter = function(l) {
      return this.toCollection().and(l);
    }, De.prototype.count = function(l) {
      return this.toCollection().count(l);
    }, De.prototype.offset = function(l) {
      return this.toCollection().offset(l);
    }, De.prototype.limit = function(l) {
      return this.toCollection().limit(l);
    }, De.prototype.each = function(l) {
      return this.toCollection().each(l);
    }, De.prototype.toArray = function(l) {
      return this.toCollection().toArray(l);
    }, De.prototype.toCollection = function() {
      return new this.db.Collection(new this.db.WhereClause(this));
    }, De.prototype.orderBy = function(l) {
      return new this.db.Collection(new this.db.WhereClause(this, c(l) ? "[".concat(l.join("+"), "]") : l));
    }, De.prototype.reverse = function() {
      return this.toCollection().reverse();
    }, De.prototype.mapToClass = function(l) {
      var d, b = this.db, m = this.name;
      function v() {
        return d !== null && d.apply(this, arguments) || this;
      }
      (this.schema.mappedClass = l).prototype instanceof fr && (function(V, j) {
        if (typeof j != "function" && j !== null)
          throw new TypeError("Class extends value " + String(j) + " is not a constructor or null");
        function Y() {
          this.constructor = V;
        }
        n(V, j), V.prototype = j === null ? Object.create(j) : (Y.prototype = j.prototype, new Y());
      }(v, d = l), Object.defineProperty(v.prototype, "db", { get: function() {
        return b;
      }, enumerable: !1, configurable: !0 }), v.prototype.table = function() {
        return m;
      }, l = v);
      for (var _ = /* @__PURE__ */ new Set(), R = l.prototype; R; R = p(R))
        Object.getOwnPropertyNames(R).forEach(function(V) {
          return _.add(V);
        });
      function U(V) {
        if (!V)
          return V;
        var j, Y = Object.create(l.prototype);
        for (j in V)
          if (!_.has(j))
            try {
              Y[j] = V[j];
            } catch {
            }
        return Y;
      }
      return this.schema.readHook && this.hook.reading.unsubscribe(this.schema.readHook), this.schema.readHook = U, this.hook("reading", U), l;
    }, De.prototype.defineClass = function() {
      return this.mapToClass(function(l) {
        h(this, l);
      });
    }, De.prototype.add = function(l, d) {
      var b = this, m = this.schema.primKey, v = m.auto, _ = m.keyPath, R = l;
      return _ && v && (R = en(_)(l)), this._trans("readwrite", function(U) {
        return b.core.mutate({ trans: U, type: "add", keys: d != null ? [d] : null, values: [R] });
      }).then(function(U) {
        return U.numFailures ? $e.reject(U.failures[0]) : U.lastResult;
      }).then(function(U) {
        if (_)
          try {
            L(l, _, U);
          } catch {
          }
        return U;
      });
    }, De.prototype.update = function(l, d) {
      return typeof l != "object" || c(l) ? this.where(":id").equals(l).modify(d) : (l = I(l, this.schema.primKey.keyPath), l === void 0 ? Fe(new de.InvalidArgument("Given object does not contain its primary key")) : this.where(":id").equals(l).modify(d));
    }, De.prototype.put = function(l, d) {
      var b = this, m = this.schema.primKey, v = m.auto, _ = m.keyPath, R = l;
      return _ && v && (R = en(_)(l)), this._trans("readwrite", function(U) {
        return b.core.mutate({ trans: U, type: "put", values: [R], keys: d != null ? [d] : null });
      }).then(function(U) {
        return U.numFailures ? $e.reject(U.failures[0]) : U.lastResult;
      }).then(function(U) {
        if (_)
          try {
            L(l, _, U);
          } catch {
          }
        return U;
      });
    }, De.prototype.delete = function(l) {
      var d = this;
      return this._trans("readwrite", function(b) {
        return d.core.mutate({ trans: b, type: "delete", keys: [l] });
      }).then(function(b) {
        return b.numFailures ? $e.reject(b.failures[0]) : void 0;
      });
    }, De.prototype.clear = function() {
      var l = this;
      return this._trans("readwrite", function(d) {
        return l.core.mutate({ trans: d, type: "deleteRange", range: lr });
      }).then(function(d) {
        return d.numFailures ? $e.reject(d.failures[0]) : void 0;
      });
    }, De.prototype.bulkGet = function(l) {
      var d = this;
      return this._trans("readonly", function(b) {
        return d.core.getMany({ keys: l, trans: b }).then(function(m) {
          return m.map(function(v) {
            return d.hook.reading.fire(v);
          });
        });
      });
    }, De.prototype.bulkAdd = function(l, d, b) {
      var m = this, v = Array.isArray(d) ? d : void 0, _ = (b = b || (v ? void 0 : d)) ? b.allKeys : void 0;
      return this._trans("readwrite", function(R) {
        var j = m.schema.primKey, U = j.auto, j = j.keyPath;
        if (j && v)
          throw new de.InvalidArgument("bulkAdd(): keys argument invalid on tables with inbound keys");
        if (v && v.length !== l.length)
          throw new de.InvalidArgument("Arguments objects and keys must have the same length");
        var V = l.length, j = j && U ? l.map(en(j)) : l;
        return m.core.mutate({ trans: R, type: "add", keys: v, values: j, wantResults: _ }).then(function(Z) {
          var D = Z.numFailures, X = Z.results, z = Z.lastResult, Z = Z.failures;
          if (D === 0)
            return _ ? X : z;
          throw new Te("".concat(m.name, ".bulkAdd(): ").concat(D, " of ").concat(V, " operations failed"), Z);
        });
      });
    }, De.prototype.bulkPut = function(l, d, b) {
      var m = this, v = Array.isArray(d) ? d : void 0, _ = (b = b || (v ? void 0 : d)) ? b.allKeys : void 0;
      return this._trans("readwrite", function(R) {
        var j = m.schema.primKey, U = j.auto, j = j.keyPath;
        if (j && v)
          throw new de.InvalidArgument("bulkPut(): keys argument invalid on tables with inbound keys");
        if (v && v.length !== l.length)
          throw new de.InvalidArgument("Arguments objects and keys must have the same length");
        var V = l.length, j = j && U ? l.map(en(j)) : l;
        return m.core.mutate({ trans: R, type: "put", keys: v, values: j, wantResults: _ }).then(function(Z) {
          var D = Z.numFailures, X = Z.results, z = Z.lastResult, Z = Z.failures;
          if (D === 0)
            return _ ? X : z;
          throw new Te("".concat(m.name, ".bulkPut(): ").concat(D, " of ").concat(V, " operations failed"), Z);
        });
      });
    }, De.prototype.bulkUpdate = function(l) {
      var d = this, b = this.core, m = l.map(function(R) {
        return R.key;
      }), v = l.map(function(R) {
        return R.changes;
      }), _ = [];
      return this._trans("readwrite", function(R) {
        return b.getMany({ trans: R, keys: m, cache: "clone" }).then(function(U) {
          var V = [], j = [];
          l.forEach(function(D, X) {
            var z = D.key, Z = D.changes, J = U[X];
            if (J) {
              for (var G = 0, ne = Object.keys(Z); G < ne.length; G++) {
                var re = ne[G], se = Z[re];
                if (re === d.schema.primKey.keyPath) {
                  if (He(se, z) !== 0)
                    throw new de.Constraint("Cannot update primary key in bulkUpdate()");
                } else
                  L(J, re, se);
              }
              _.push(X), V.push(z), j.push(J);
            }
          });
          var Y = V.length;
          return b.mutate({ trans: R, type: "put", keys: V, values: j, updates: { keys: m, changeSpecs: v } }).then(function(D) {
            var X = D.numFailures, z = D.failures;
            if (X === 0)
              return Y;
            for (var Z = 0, J = Object.keys(z); Z < J.length; Z++) {
              var G, ne = J[Z], re = _[Number(ne)];
              re != null && (G = z[ne], delete z[ne], z[re] = G);
            }
            throw new Te("".concat(d.name, ".bulkUpdate(): ").concat(X, " of ").concat(Y, " operations failed"), z);
          });
        });
      });
    }, De.prototype.bulkDelete = function(l) {
      var d = this, b = l.length;
      return this._trans("readwrite", function(m) {
        return d.core.mutate({ trans: m, type: "delete", keys: l });
      }).then(function(R) {
        var v = R.numFailures, _ = R.lastResult, R = R.failures;
        if (v === 0)
          return _;
        throw new Te("".concat(d.name, ".bulkDelete(): ").concat(v, " of ").concat(b, " operations failed"), R);
      });
    }, De);
    function De() {
    }
    function Ut(l) {
      function d(R, U) {
        if (U) {
          for (var V = arguments.length, j = new Array(V - 1); --V; )
            j[V - 1] = arguments[V];
          return b[R].subscribe.apply(null, j), l;
        }
        if (typeof R == "string")
          return b[R];
      }
      var b = {};
      d.addEventType = _;
      for (var m = 1, v = arguments.length; m < v; ++m)
        _(arguments[m]);
      return d;
      function _(R, U, V) {
        if (typeof R != "object") {
          var j;
          U = U || jr;
          var Y = { subscribers: [], fire: V = V || _e, subscribe: function(D) {
            Y.subscribers.indexOf(D) === -1 && (Y.subscribers.push(D), Y.fire = U(Y.fire, D));
          }, unsubscribe: function(D) {
            Y.subscribers = Y.subscribers.filter(function(X) {
              return X !== D;
            }), Y.fire = Y.subscribers.reduce(U, V);
          } };
          return b[R] = d[R] = Y;
        }
        a(j = R).forEach(function(D) {
          var X = j[D];
          if (c(X))
            _(D, j[D][0], j[D][1]);
          else {
            if (X !== "asap")
              throw new de.InvalidArgument("Invalid event config");
            var z = _(D, Be, function() {
              for (var Z = arguments.length, J = new Array(Z); Z--; )
                J[Z] = arguments[Z];
              z.subscribers.forEach(function(G) {
                q(function() {
                  G.apply(null, J);
                });
              });
            });
          }
        });
      }
    }
    function Pt(l, d) {
      return w(d).from({ prototype: l }), d;
    }
    function St(l, d) {
      return !(l.filter || l.algorithm || l.or) && (d ? l.justLimit : !l.replayFilter);
    }
    function In(l, d) {
      l.filter = $t(l.filter, d);
    }
    function Rn(l, d, b) {
      var m = l.replayFilter;
      l.replayFilter = m ? function() {
        return $t(m(), d());
      } : d, l.justLimit = b && !m;
    }
    function tn(l, d) {
      if (l.isPrimKey)
        return d.primaryKey;
      var b = d.getIndexByKeyPath(l.index);
      if (!b)
        throw new de.Schema("KeyPath " + l.index + " on object store " + d.name + " is not indexed");
      return b;
    }
    function yr(l, d, b) {
      var m = tn(l, d.schema);
      return d.openCursor({ trans: b, values: !l.keysOnly, reverse: l.dir === "prev", unique: !!l.unique, query: { index: m, range: l.range } });
    }
    function nn(l, d, b, m) {
      var v = l.replayFilter ? $t(l.filter, l.replayFilter()) : l.filter;
      if (l.or) {
        var _ = {}, R = function(U, V, j) {
          var Y, D;
          v && !v(V, j, function(X) {
            return V.stop(X);
          }, function(X) {
            return V.fail(X);
          }) || ((D = "" + (Y = V.primaryKey)) == "[object ArrayBuffer]" && (D = "" + new Uint8Array(Y)), y(_, D) || (_[D] = !0, d(U, V, j)));
        };
        return Promise.all([l.or._iterate(R, b), gr(yr(l, m, b), l.algorithm, R, !l.keysOnly && l.valueMapper)]);
      }
      return gr(yr(l, m, b), $t(l.algorithm, v), d, !l.keysOnly && l.valueMapper);
    }
    function gr(l, d, b, m) {
      var v = Ke(m ? function(_, R, U) {
        return b(m(_), R, U);
      } : b);
      return l.then(function(_) {
        if (_)
          return _.start(function() {
            var R = function() {
              return _.continue();
            };
            d && !d(_, function(U) {
              return R = U;
            }, function(U) {
              _.stop(U), R = _e;
            }, function(U) {
              _.fail(U), R = _e;
            }) || v(_.value, _, function(U) {
              return R = U;
            }), R();
          });
      });
    }
    var ot = Symbol(), Cn = (br.prototype.execute = function(l) {
      var d = (d = this.replacePrefix) === null || d === void 0 ? void 0 : d[0];
      return d && typeof l == "string" && l.startsWith(d) ? this.replacePrefix[1] + l.substring(d.length) : l;
    }, br);
    function br(l) {
      Object.assign(this, l);
    }
    var Yr = (Le.prototype._read = function(l, d) {
      var b = this._ctx;
      return b.error ? b.table._trans(null, Fe.bind(null, b.error)) : b.table._trans("readonly", l).then(d);
    }, Le.prototype._write = function(l) {
      var d = this._ctx;
      return d.error ? d.table._trans(null, Fe.bind(null, d.error)) : d.table._trans("readwrite", l, "locked");
    }, Le.prototype._addAlgorithm = function(l) {
      var d = this._ctx;
      d.algorithm = $t(d.algorithm, l);
    }, Le.prototype._iterate = function(l, d) {
      return nn(this._ctx, l, d, this._ctx.table.core);
    }, Le.prototype.clone = function(l) {
      var d = Object.create(this.constructor.prototype), b = Object.create(this._ctx);
      return l && h(b, l), d._ctx = b, d;
    }, Le.prototype.raw = function() {
      return this._ctx.valueMapper = null, this;
    }, Le.prototype.each = function(l) {
      var d = this._ctx;
      return this._read(function(b) {
        return nn(d, l, b, d.table.core);
      });
    }, Le.prototype.count = function(l) {
      var d = this;
      return this._read(function(b) {
        var m = d._ctx, v = m.table.core;
        if (St(m, !0))
          return v.count({ trans: b, query: { index: tn(m, v.schema), range: m.range } }).then(function(R) {
            return Math.min(R, m.limit);
          });
        var _ = 0;
        return nn(m, function() {
          return ++_, !1;
        }, b, v).then(function() {
          return _;
        });
      }).then(l);
    }, Le.prototype.sortBy = function(l, d) {
      var b = l.split(".").reverse(), m = b[0], v = b.length - 1;
      function _(V, j) {
        return j ? _(V[b[j]], j - 1) : V[m];
      }
      var R = this._ctx.dir === "next" ? 1 : -1;
      function U(V, j) {
        return V = _(V, v), j = _(j, v), V < j ? -R : j < V ? R : 0;
      }
      return this.toArray(function(V) {
        return V.sort(U);
      }).then(d);
    }, Le.prototype.toArray = function(l) {
      var d = this;
      return this._read(function(b) {
        var m = d._ctx;
        if (m.dir === "next" && St(m, !0) && 0 < m.limit) {
          var v = m.valueMapper, _ = tn(m, m.table.core.schema);
          return m.table.core.query({ trans: b, limit: m.limit, values: !0, query: { index: _, range: m.range } }).then(function(U) {
            return U = U.result, v ? U.map(v) : U;
          });
        }
        var R = [];
        return nn(m, function(U) {
          return R.push(U);
        }, b, m.table.core).then(function() {
          return R;
        });
      }, l);
    }, Le.prototype.offset = function(l) {
      var d = this._ctx;
      return l <= 0 || (d.offset += l, St(d) ? Rn(d, function() {
        var b = l;
        return function(m, v) {
          return b === 0 || (b === 1 ? --b : v(function() {
            m.advance(b), b = 0;
          }), !1);
        };
      }) : Rn(d, function() {
        var b = l;
        return function() {
          return --b < 0;
        };
      })), this;
    }, Le.prototype.limit = function(l) {
      return this._ctx.limit = Math.min(this._ctx.limit, l), Rn(this._ctx, function() {
        var d = l;
        return function(b, m, v) {
          return --d <= 0 && m(v), 0 <= d;
        };
      }, !0), this;
    }, Le.prototype.until = function(l, d) {
      return In(this._ctx, function(b, m, v) {
        return !l(b.value) || (m(v), d);
      }), this;
    }, Le.prototype.first = function(l) {
      return this.limit(1).toArray(function(d) {
        return d[0];
      }).then(l);
    }, Le.prototype.last = function(l) {
      return this.reverse().first(l);
    }, Le.prototype.filter = function(l) {
      var d;
      return In(this._ctx, function(b) {
        return l(b.value);
      }), (d = this._ctx).isMatch = $t(d.isMatch, l), this;
    }, Le.prototype.and = function(l) {
      return this.filter(l);
    }, Le.prototype.or = function(l) {
      return new this.db.WhereClause(this._ctx.table, l, this);
    }, Le.prototype.reverse = function() {
      return this._ctx.dir = this._ctx.dir === "prev" ? "next" : "prev", this._ondirectionchange && this._ondirectionchange(this._ctx.dir), this;
    }, Le.prototype.desc = function() {
      return this.reverse();
    }, Le.prototype.eachKey = function(l) {
      var d = this._ctx;
      return d.keysOnly = !d.isMatch, this.each(function(b, m) {
        l(m.key, m);
      });
    }, Le.prototype.eachUniqueKey = function(l) {
      return this._ctx.unique = "unique", this.eachKey(l);
    }, Le.prototype.eachPrimaryKey = function(l) {
      var d = this._ctx;
      return d.keysOnly = !d.isMatch, this.each(function(b, m) {
        l(m.primaryKey, m);
      });
    }, Le.prototype.keys = function(l) {
      var d = this._ctx;
      d.keysOnly = !d.isMatch;
      var b = [];
      return this.each(function(m, v) {
        b.push(v.key);
      }).then(function() {
        return b;
      }).then(l);
    }, Le.prototype.primaryKeys = function(l) {
      var d = this._ctx;
      if (d.dir === "next" && St(d, !0) && 0 < d.limit)
        return this._read(function(m) {
          var v = tn(d, d.table.core.schema);
          return d.table.core.query({ trans: m, values: !1, limit: d.limit, query: { index: v, range: d.range } });
        }).then(function(m) {
          return m.result;
        }).then(l);
      d.keysOnly = !d.isMatch;
      var b = [];
      return this.each(function(m, v) {
        b.push(v.primaryKey);
      }).then(function() {
        return b;
      }).then(l);
    }, Le.prototype.uniqueKeys = function(l) {
      return this._ctx.unique = "unique", this.keys(l);
    }, Le.prototype.firstKey = function(l) {
      return this.limit(1).keys(function(d) {
        return d[0];
      }).then(l);
    }, Le.prototype.lastKey = function(l) {
      return this.reverse().firstKey(l);
    }, Le.prototype.distinct = function() {
      var l = this._ctx, l = l.index && l.table.schema.idxByName[l.index];
      if (!l || !l.multi)
        return this;
      var d = {};
      return In(this._ctx, function(v) {
        var m = v.primaryKey.toString(), v = y(d, m);
        return d[m] = !0, !v;
      }), this;
    }, Le.prototype.modify = function(l) {
      var d = this, b = this._ctx;
      return this._write(function(m) {
        var v, _, R;
        R = typeof l == "function" ? l : (v = a(l), _ = v.length, function(G) {
          for (var ne = !1, re = 0; re < _; ++re) {
            var se = v[re], ue = l[se], he = I(G, se);
            ue instanceof Cn ? (L(G, se, ue.execute(he)), ne = !0) : he !== ue && (L(G, se, ue), ne = !0);
          }
          return ne;
        });
        function U(G, se) {
          var re = se.failures, se = se.numFailures;
          Z += G - se;
          for (var ue = 0, he = a(re); ue < he.length; ue++) {
            var be = he[ue];
            z.push(re[be]);
          }
        }
        var V = b.table.core, j = V.schema.primaryKey, Y = j.outbound, D = j.extractKey, X = d.db._options.modifyChunkSize || 200, z = [], Z = 0, J = [];
        return d.clone().primaryKeys().then(function(G) {
          function ne(re) {
            var se = Math.min(X, G.length - re);
            return V.getMany({ trans: m, keys: G.slice(re, re + se), cache: "immutable" }).then(function(ue) {
              for (var he = [], be = [], pe = Y ? [] : null, ye = [], me = 0; me < se; ++me) {
                var we = ue[me], ke = { value: K(we), primKey: G[re + me] };
                R.call(ke, ke.value, ke) !== !1 && (ke.value == null ? ye.push(G[re + me]) : Y || He(D(we), D(ke.value)) === 0 ? (be.push(ke.value), Y && pe.push(G[re + me])) : (ye.push(G[re + me]), he.push(ke.value)));
              }
              var Ie = St(b) && b.limit === 1 / 0 && (typeof l != "function" || l === Nn) && { index: b.index, range: b.range };
              return Promise.resolve(0 < he.length && V.mutate({ trans: m, type: "add", values: he }).then(function(Ne) {
                for (var Re in Ne.failures)
                  ye.splice(parseInt(Re), 1);
                U(he.length, Ne);
              })).then(function() {
                return (0 < be.length || Ie && typeof l == "object") && V.mutate({ trans: m, type: "put", keys: pe, values: be, criteria: Ie, changeSpec: typeof l != "function" && l }).then(function(Ne) {
                  return U(be.length, Ne);
                });
              }).then(function() {
                return (0 < ye.length || Ie && l === Nn) && V.mutate({ trans: m, type: "delete", keys: ye, criteria: Ie }).then(function(Ne) {
                  return U(ye.length, Ne);
                });
              }).then(function() {
                return G.length > re + se && ne(re + X);
              });
            });
          }
          return ne(0).then(function() {
            if (0 < z.length)
              throw new Se("Error modifying one or more objects", z, Z, J);
            return G.length;
          });
        });
      });
    }, Le.prototype.delete = function() {
      var l = this._ctx, d = l.range;
      return St(l) && (l.isPrimKey || d.type === 3) ? this._write(function(b) {
        var m = l.table.core.schema.primaryKey, v = d;
        return l.table.core.count({ trans: b, query: { index: m, range: v } }).then(function(_) {
          return l.table.core.mutate({ trans: b, type: "deleteRange", range: v }).then(function(R) {
            var U = R.failures;
            if (R.lastResult, R.results, R = R.numFailures, R)
              throw new Se("Could not delete some values", Object.keys(U).map(function(V) {
                return U[V];
              }), _ - R);
            return _ - R;
          });
        });
      }) : this.modify(Nn);
    }, Le);
    function Le() {
    }
    var Nn = function(l, d) {
      return d.value = null;
    };
    function Xr(l, d) {
      return l < d ? -1 : l === d ? 0 : 1;
    }
    function Jr(l, d) {
      return d < l ? -1 : l === d ? 0 : 1;
    }
    function Je(l, d, b) {
      return l = l instanceof wr ? new l.Collection(l) : l, l._ctx.error = new (b || TypeError)(d), l;
    }
    function Tt(l) {
      return new l.Collection(l, function() {
        return mr("");
      }).limit(0);
    }
    function rn(l, d, b, m) {
      var v, _, R, U, V, j, Y, D = b.length;
      if (!b.every(function(Z) {
        return typeof Z == "string";
      }))
        return Je(l, ur);
      function X(Z) {
        v = Z === "next" ? function(G) {
          return G.toUpperCase();
        } : function(G) {
          return G.toLowerCase();
        }, _ = Z === "next" ? function(G) {
          return G.toLowerCase();
        } : function(G) {
          return G.toUpperCase();
        }, R = Z === "next" ? Xr : Jr;
        var J = b.map(function(G) {
          return { lower: _(G), upper: v(G) };
        }).sort(function(G, ne) {
          return R(G.lower, ne.lower);
        });
        U = J.map(function(G) {
          return G.upper;
        }), V = J.map(function(G) {
          return G.lower;
        }), Y = (j = Z) === "next" ? "" : m;
      }
      X("next"), l = new l.Collection(l, function() {
        return dt(U[0], V[D - 1] + m);
      }), l._ondirectionchange = function(Z) {
        X(Z);
      };
      var z = 0;
      return l._addAlgorithm(function(Z, J, G) {
        var ne = Z.key;
        if (typeof ne != "string")
          return !1;
        var re = _(ne);
        if (d(re, V, z))
          return !0;
        for (var se = null, ue = z; ue < D; ++ue) {
          var he = function(be, pe, ye, me, we, ke) {
            for (var Ie = Math.min(be.length, me.length), Ne = -1, Re = 0; Re < Ie; ++Re) {
              var et = pe[Re];
              if (et !== me[Re])
                return we(be[Re], ye[Re]) < 0 ? be.substr(0, Re) + ye[Re] + ye.substr(Re + 1) : we(be[Re], me[Re]) < 0 ? be.substr(0, Re) + me[Re] + ye.substr(Re + 1) : 0 <= Ne ? be.substr(0, Ne) + pe[Ne] + ye.substr(Ne + 1) : null;
              we(be[Re], et) < 0 && (Ne = Re);
            }
            return Ie < me.length && ke === "next" ? be + ye.substr(be.length) : Ie < be.length && ke === "prev" ? be.substr(0, ye.length) : Ne < 0 ? null : be.substr(0, Ne) + me[Ne] + ye.substr(Ne + 1);
          }(ne, re, U[ue], V[ue], R, j);
          he === null && se === null ? z = ue + 1 : (se === null || 0 < R(se, he)) && (se = he);
        }
        return J(se !== null ? function() {
          Z.continue(se + Y);
        } : G), !1;
      }), l;
    }
    function dt(l, d, b, m) {
      return { type: 2, lower: l, upper: d, lowerOpen: b, upperOpen: m };
    }
    function mr(l) {
      return { type: 1, lower: l, upper: l };
    }
    var wr = (Object.defineProperty(ze.prototype, "Collection", { get: function() {
      return this._ctx.table.db.Collection;
    }, enumerable: !1, configurable: !0 }), ze.prototype.between = function(l, d, b, m) {
      b = b !== !1, m = m === !0;
      try {
        return 0 < this._cmp(l, d) || this._cmp(l, d) === 0 && (b || m) && (!b || !m) ? Tt(this) : new this.Collection(this, function() {
          return dt(l, d, !b, !m);
        });
      } catch {
        return Je(this, st);
      }
    }, ze.prototype.equals = function(l) {
      return l == null ? Je(this, st) : new this.Collection(this, function() {
        return mr(l);
      });
    }, ze.prototype.above = function(l) {
      return l == null ? Je(this, st) : new this.Collection(this, function() {
        return dt(l, void 0, !0);
      });
    }, ze.prototype.aboveOrEqual = function(l) {
      return l == null ? Je(this, st) : new this.Collection(this, function() {
        return dt(l, void 0, !1);
      });
    }, ze.prototype.below = function(l) {
      return l == null ? Je(this, st) : new this.Collection(this, function() {
        return dt(void 0, l, !1, !0);
      });
    }, ze.prototype.belowOrEqual = function(l) {
      return l == null ? Je(this, st) : new this.Collection(this, function() {
        return dt(void 0, l);
      });
    }, ze.prototype.startsWith = function(l) {
      return typeof l != "string" ? Je(this, ur) : this.between(l, l + wt, !0, !0);
    }, ze.prototype.startsWithIgnoreCase = function(l) {
      return l === "" ? this.startsWith(l) : rn(this, function(d, b) {
        return d.indexOf(b[0]) === 0;
      }, [l], wt);
    }, ze.prototype.equalsIgnoreCase = function(l) {
      return rn(this, function(d, b) {
        return d === b[0];
      }, [l], "");
    }, ze.prototype.anyOfIgnoreCase = function() {
      var l = ce.apply(F, arguments);
      return l.length === 0 ? Tt(this) : rn(this, function(d, b) {
        return b.indexOf(d) !== -1;
      }, l, "");
    }, ze.prototype.startsWithAnyOfIgnoreCase = function() {
      var l = ce.apply(F, arguments);
      return l.length === 0 ? Tt(this) : rn(this, function(d, b) {
        return b.some(function(m) {
          return d.indexOf(m) === 0;
        });
      }, l, wt);
    }, ze.prototype.anyOf = function() {
      var l = this, d = ce.apply(F, arguments), b = this._cmp;
      try {
        d.sort(b);
      } catch {
        return Je(this, st);
      }
      if (d.length === 0)
        return Tt(this);
      var m = new this.Collection(this, function() {
        return dt(d[0], d[d.length - 1]);
      });
      m._ondirectionchange = function(_) {
        b = _ === "next" ? l._ascending : l._descending, d.sort(b);
      };
      var v = 0;
      return m._addAlgorithm(function(_, R, U) {
        for (var V = _.key; 0 < b(V, d[v]); )
          if (++v === d.length)
            return R(U), !1;
        return b(V, d[v]) === 0 || (R(function() {
          _.continue(d[v]);
        }), !1);
      }), m;
    }, ze.prototype.notEqual = function(l) {
      return this.inAnyRange([[-1 / 0, l], [l, this.db._maxKey]], { includeLowers: !1, includeUppers: !1 });
    }, ze.prototype.noneOf = function() {
      var l = ce.apply(F, arguments);
      if (l.length === 0)
        return new this.Collection(this);
      try {
        l.sort(this._ascending);
      } catch {
        return Je(this, st);
      }
      var d = l.reduce(function(b, m) {
        return b ? b.concat([[b[b.length - 1][1], m]]) : [[-1 / 0, m]];
      }, null);
      return d.push([l[l.length - 1], this.db._maxKey]), this.inAnyRange(d, { includeLowers: !1, includeUppers: !1 });
    }, ze.prototype.inAnyRange = function(ne, d) {
      var b = this, m = this._cmp, v = this._ascending, _ = this._descending, R = this._min, U = this._max;
      if (ne.length === 0)
        return Tt(this);
      if (!ne.every(function(re) {
        return re[0] !== void 0 && re[1] !== void 0 && v(re[0], re[1]) <= 0;
      }))
        return Je(this, "First argument to inAnyRange() must be an Array of two-value Arrays [lower,upper] where upper must not be lower than lower", de.InvalidArgument);
      var V = !d || d.includeLowers !== !1, j = d && d.includeUppers === !0, Y, D = v;
      function X(re, se) {
        return D(re[0], se[0]);
      }
      try {
        (Y = ne.reduce(function(re, se) {
          for (var ue = 0, he = re.length; ue < he; ++ue) {
            var be = re[ue];
            if (m(se[0], be[1]) < 0 && 0 < m(se[1], be[0])) {
              be[0] = R(be[0], se[0]), be[1] = U(be[1], se[1]);
              break;
            }
          }
          return ue === he && re.push(se), re;
        }, [])).sort(X);
      } catch {
        return Je(this, st);
      }
      var z = 0, Z = j ? function(re) {
        return 0 < v(re, Y[z][1]);
      } : function(re) {
        return 0 <= v(re, Y[z][1]);
      }, J = V ? function(re) {
        return 0 < _(re, Y[z][0]);
      } : function(re) {
        return 0 <= _(re, Y[z][0]);
      }, G = Z, ne = new this.Collection(this, function() {
        return dt(Y[0][0], Y[Y.length - 1][1], !V, !j);
      });
      return ne._ondirectionchange = function(re) {
        D = re === "next" ? (G = Z, v) : (G = J, _), Y.sort(X);
      }, ne._addAlgorithm(function(re, se, ue) {
        for (var he, be = re.key; G(be); )
          if (++z === Y.length)
            return se(ue), !1;
        return !Z(he = be) && !J(he) || (b._cmp(be, Y[z][1]) === 0 || b._cmp(be, Y[z][0]) === 0 || se(function() {
          D === v ? re.continue(Y[z][0]) : re.continue(Y[z][1]);
        }), !1);
      }), ne;
    }, ze.prototype.startsWithAnyOf = function() {
      var l = ce.apply(F, arguments);
      return l.every(function(d) {
        return typeof d == "string";
      }) ? l.length === 0 ? Tt(this) : this.inAnyRange(l.map(function(d) {
        return [d, d + wt];
      })) : Je(this, "startsWithAnyOf() only works with strings");
    }, ze);
    function ze() {
    }
    function rt(l) {
      return Ke(function(d) {
        return Ot(d), l(d.target.error), !1;
      });
    }
    function Ot(l) {
      l.stopPropagation && l.stopPropagation(), l.preventDefault && l.preventDefault();
    }
    var Dt = "storagemutated", Ln = "x-storagemutated-1", pt = Ut(null, Dt), Qr = (it.prototype._lock = function() {
      return W(!Ee.global), ++this._reculock, this._reculock !== 1 || Ee.global || (Ee.lockOwnerFor = this), this;
    }, it.prototype._unlock = function() {
      if (W(!Ee.global), --this._reculock == 0)
        for (Ee.global || (Ee.lockOwnerFor = null); 0 < this._blockedFuncs.length && !this._locked(); ) {
          var l = this._blockedFuncs.shift();
          try {
            mt(l[1], l[0]);
          } catch {
          }
        }
      return this;
    }, it.prototype._locked = function() {
      return this._reculock && Ee.lockOwnerFor !== this;
    }, it.prototype.create = function(l) {
      var d = this;
      if (!this.mode)
        return this;
      var b = this.db.idbdb, m = this.db._state.dbOpenError;
      if (W(!this.idbtrans), !l && !b)
        switch (m && m.name) {
          case "DatabaseClosedError":
            throw new de.DatabaseClosed(m);
          case "MissingAPIError":
            throw new de.MissingAPI(m.message, m);
          default:
            throw new de.OpenFailed(m);
        }
      if (!this.active)
        throw new de.TransactionInactive();
      return W(this._completion._state === null), (l = this.idbtrans = l || (this.db.core || b).transaction(this.storeNames, this.mode, { durability: this.chromeTransactionDurability })).onerror = Ke(function(v) {
        Ot(v), d._reject(l.error);
      }), l.onabort = Ke(function(v) {
        Ot(v), d.active && d._reject(new de.Abort(l.error)), d.active = !1, d.on("abort").fire(v);
      }), l.oncomplete = Ke(function() {
        d.active = !1, d._resolve(), "mutatedParts" in l && pt.storagemutated.fire(l.mutatedParts);
      }), this;
    }, it.prototype._promise = function(l, d, b) {
      var m = this;
      if (l === "readwrite" && this.mode !== "readwrite")
        return Fe(new de.ReadOnly("Transaction is readonly"));
      if (!this.active)
        return Fe(new de.TransactionInactive());
      if (this._locked())
        return new $e(function(_, R) {
          m._blockedFuncs.push([function() {
            m._promise(l, d, b).then(_, R);
          }, Ee]);
        });
      if (b)
        return lt(function() {
          var _ = new $e(function(R, U) {
            m._lock();
            var V = d(R, U, m);
            V && V.then && V.then(R, U);
          });
          return _.finally(function() {
            return m._unlock();
          }), _._lib = !0, _;
        });
      var v = new $e(function(_, R) {
        var U = d(_, R, m);
        U && U.then && U.then(_, R);
      });
      return v._lib = !0, v;
    }, it.prototype._root = function() {
      return this.parent ? this.parent._root() : this;
    }, it.prototype.waitFor = function(l) {
      var d, b = this._root(), m = $e.resolve(l);
      b._waitingFor ? b._waitingFor = b._waitingFor.then(function() {
        return m;
      }) : (b._waitingFor = m, b._waitingQueue = [], d = b.idbtrans.objectStore(b.storeNames[0]), function _() {
        for (++b._spinCount; b._waitingQueue.length; )
          b._waitingQueue.shift()();
        b._waitingFor && (d.get(-1 / 0).onsuccess = _);
      }());
      var v = b._waitingFor;
      return new $e(function(_, R) {
        m.then(function(U) {
          return b._waitingQueue.push(Ke(_.bind(null, U)));
        }, function(U) {
          return b._waitingQueue.push(Ke(R.bind(null, U)));
        }).finally(function() {
          b._waitingFor === v && (b._waitingFor = null);
        });
      });
    }, it.prototype.abort = function() {
      this.active && (this.active = !1, this.idbtrans && this.idbtrans.abort(), this._reject(new de.Abort()));
    }, it.prototype.table = function(l) {
      var d = this._memoizedTables || (this._memoizedTables = {});
      if (y(d, l))
        return d[l];
      var b = this.schema[l];
      if (!b)
        throw new de.NotFound("Table " + l + " not part of transaction");
      return b = new this.db.Table(l, b, this), b.core = this.db.core.table(l), d[l] = b;
    }, it);
    function it() {
    }
    function Hn(l, d, b, m, v, _, R) {
      return { name: l, keyPath: d, unique: b, multi: m, auto: v, compound: _, src: (b && !R ? "&" : "") + (m ? "*" : "") + (v ? "++" : "") + $r(d) };
    }
    function $r(l) {
      return typeof l == "string" ? l : l ? "[" + [].join.call(l, "+") + "]" : "";
    }
    function Un(l, d, b) {
      return { name: l, primKey: d, indexes: b, mappedClass: null, idxByName: (m = function(v) {
        return [v.name, v];
      }, b.reduce(function(v, _, R) {
        return R = m(_, R), R && (v[R[0]] = R[1]), v;
      }, {})) };
      var m;
    }
    var Kt = function(l) {
      try {
        return l.only([[]]), Kt = function() {
          return [[]];
        }, [[]];
      } catch {
        return Kt = function() {
          return wt;
        }, wt;
      }
    };
    function Pn(l) {
      return l == null ? function() {
      } : typeof l == "string" ? (d = l).split(".").length === 1 ? function(b) {
        return b[d];
      } : function(b) {
        return I(b, d);
      } : function(b) {
        return I(b, l);
      };
      var d;
    }
    function vr(l) {
      return [].slice.call(l);
    }
    var ei = 0;
    function Ft(l) {
      return l == null ? ":id" : typeof l == "string" ? l : "[".concat(l.join("+"), "]");
    }
    function ti(l, d, V) {
      function m(G) {
        if (G.type === 3)
          return null;
        if (G.type === 4)
          throw new Error("Cannot convert never type to IDBKeyRange");
        var z = G.lower, Z = G.upper, J = G.lowerOpen, G = G.upperOpen;
        return z === void 0 ? Z === void 0 ? null : d.upperBound(Z, !!G) : Z === void 0 ? d.lowerBound(z, !!J) : d.bound(z, Z, !!J, !!G);
      }
      function v(X) {
        var z, Z = X.name;
        return { name: Z, schema: X, mutate: function(J) {
          var G = J.trans, ne = J.type, re = J.keys, se = J.values, ue = J.range;
          return new Promise(function(he, be) {
            he = Ke(he);
            var pe = G.objectStore(Z), ye = pe.keyPath == null, me = ne === "put" || ne === "add";
            if (!me && ne !== "delete" && ne !== "deleteRange")
              throw new Error("Invalid operation type: " + ne);
            var we, ke = (re || se || { length: 1 }).length;
            if (re && se && re.length !== se.length)
              throw new Error("Given keys array must have same length as given values array.");
            if (ke === 0)
              return he({ numFailures: 0, failures: {}, results: [], lastResult: void 0 });
            function Ie(Ye) {
              ++et, Ot(Ye);
            }
            var Ne = [], Re = [], et = 0;
            if (ne === "deleteRange") {
              if (ue.type === 4)
                return he({ numFailures: et, failures: Re, results: [], lastResult: void 0 });
              ue.type === 3 ? Ne.push(we = pe.clear()) : Ne.push(we = pe.delete(m(ue)));
            } else {
              var ye = me ? ye ? [se, re] : [se, null] : [re, null], Ce = ye[0], Ge = ye[1];
              if (me)
                for (var Ze = 0; Ze < ke; ++Ze)
                  Ne.push(we = Ge && Ge[Ze] !== void 0 ? pe[ne](Ce[Ze], Ge[Ze]) : pe[ne](Ce[Ze])), we.onerror = Ie;
              else
                for (Ze = 0; Ze < ke; ++Ze)
                  Ne.push(we = pe[ne](Ce[Ze])), we.onerror = Ie;
            }
            function bn(Ye) {
              Ye = Ye.target.result, Ne.forEach(function(xt, nr) {
                return xt.error != null && (Re[nr] = xt.error);
              }), he({ numFailures: et, failures: Re, results: ne === "delete" ? re : Ne.map(function(xt) {
                return xt.result;
              }), lastResult: Ye });
            }
            we.onerror = function(Ye) {
              Ie(Ye), bn(Ye);
            }, we.onsuccess = bn;
          });
        }, getMany: function(J) {
          var G = J.trans, ne = J.keys;
          return new Promise(function(re, se) {
            re = Ke(re);
            for (var ue, he = G.objectStore(Z), be = ne.length, pe = new Array(be), ye = 0, me = 0, we = function(Ne) {
              Ne = Ne.target, pe[Ne._pos] = Ne.result, ++me === ye && re(pe);
            }, ke = rt(se), Ie = 0; Ie < be; ++Ie)
              ne[Ie] != null && ((ue = he.get(ne[Ie]))._pos = Ie, ue.onsuccess = we, ue.onerror = ke, ++ye);
            ye === 0 && re(pe);
          });
        }, get: function(J) {
          var G = J.trans, ne = J.key;
          return new Promise(function(re, se) {
            re = Ke(re);
            var ue = G.objectStore(Z).get(ne);
            ue.onsuccess = function(he) {
              return re(he.target.result);
            }, ue.onerror = rt(se);
          });
        }, query: (z = j, function(J) {
          return new Promise(function(G, ne) {
            G = Ke(G);
            var re, se, ue, ye = J.trans, he = J.values, be = J.limit, we = J.query, pe = be === 1 / 0 ? void 0 : be, me = we.index, we = we.range, ye = ye.objectStore(Z), me = me.isPrimaryKey ? ye : ye.index(me.name), we = m(we);
            if (be === 0)
              return G({ result: [] });
            z ? ((pe = he ? me.getAll(we, pe) : me.getAllKeys(we, pe)).onsuccess = function(ke) {
              return G({ result: ke.target.result });
            }, pe.onerror = rt(ne)) : (re = 0, se = !he && "openKeyCursor" in me ? me.openKeyCursor(we) : me.openCursor(we), ue = [], se.onsuccess = function(ke) {
              var Ie = se.result;
              return Ie ? (ue.push(he ? Ie.value : Ie.primaryKey), ++re === be ? G({ result: ue }) : void Ie.continue()) : G({ result: ue });
            }, se.onerror = rt(ne));
          });
        }), openCursor: function(J) {
          var G = J.trans, ne = J.values, re = J.query, se = J.reverse, ue = J.unique;
          return new Promise(function(he, be) {
            he = Ke(he);
            var me = re.index, pe = re.range, ye = G.objectStore(Z), ye = me.isPrimaryKey ? ye : ye.index(me.name), me = se ? ue ? "prevunique" : "prev" : ue ? "nextunique" : "next", we = !ne && "openKeyCursor" in ye ? ye.openKeyCursor(m(pe), me) : ye.openCursor(m(pe), me);
            we.onerror = rt(be), we.onsuccess = Ke(function(ke) {
              var Ie, Ne, Re, et, Ce = we.result;
              Ce ? (Ce.___id = ++ei, Ce.done = !1, Ie = Ce.continue.bind(Ce), Ne = (Ne = Ce.continuePrimaryKey) && Ne.bind(Ce), Re = Ce.advance.bind(Ce), et = function() {
                throw new Error("Cursor not stopped");
              }, Ce.trans = G, Ce.stop = Ce.continue = Ce.continuePrimaryKey = Ce.advance = function() {
                throw new Error("Cursor not started");
              }, Ce.fail = Ke(be), Ce.next = function() {
                var Ge = this, Ze = 1;
                return this.start(function() {
                  return Ze-- ? Ge.continue() : Ge.stop();
                }).then(function() {
                  return Ge;
                });
              }, Ce.start = function(Ge) {
                function Ze() {
                  if (we.result)
                    try {
                      Ge();
                    } catch (Ye) {
                      Ce.fail(Ye);
                    }
                  else
                    Ce.done = !0, Ce.start = function() {
                      throw new Error("Cursor behind last entry");
                    }, Ce.stop();
                }
                var bn = new Promise(function(Ye, xt) {
                  Ye = Ke(Ye), we.onerror = rt(xt), Ce.fail = xt, Ce.stop = function(nr) {
                    Ce.stop = Ce.continue = Ce.continuePrimaryKey = Ce.advance = et, Ye(nr);
                  };
                });
                return we.onsuccess = Ke(function(Ye) {
                  we.onsuccess = Ze, Ze();
                }), Ce.continue = Ie, Ce.continuePrimaryKey = Ne, Ce.advance = Re, Ze(), bn;
              }, he(Ce)) : he(null);
            }, be);
          });
        }, count: function(J) {
          var G = J.query, ne = J.trans, re = G.index, se = G.range;
          return new Promise(function(ue, he) {
            var be = ne.objectStore(Z), pe = re.isPrimaryKey ? be : be.index(re.name), be = m(se), pe = be ? pe.count(be) : pe.count();
            pe.onsuccess = Ke(function(ye) {
              return ue(ye.target.result);
            }), pe.onerror = rt(he);
          });
        } };
      }
      var _, R, U, Y = (R = V, U = vr((_ = l).objectStoreNames), { schema: { name: _.name, tables: U.map(function(X) {
        return R.objectStore(X);
      }).map(function(X) {
        var z = X.keyPath, G = X.autoIncrement, Z = c(z), J = {}, G = { name: X.name, primaryKey: { name: null, isPrimaryKey: !0, outbound: z == null, compound: Z, keyPath: z, autoIncrement: G, unique: !0, extractKey: Pn(z) }, indexes: vr(X.indexNames).map(function(ne) {
          return X.index(ne);
        }).map(function(ue) {
          var re = ue.name, se = ue.unique, he = ue.multiEntry, ue = ue.keyPath, he = { name: re, compound: c(ue), keyPath: ue, unique: se, multiEntry: he, extractKey: Pn(ue) };
          return J[Ft(ue)] = he;
        }), getIndexByKeyPath: function(ne) {
          return J[Ft(ne)];
        } };
        return J[":id"] = G.primaryKey, z != null && (J[Ft(z)] = G.primaryKey), G;
      }) }, hasGetAll: 0 < U.length && "getAll" in R.objectStore(U[0]) && !(typeof navigator < "u" && /Safari/.test(navigator.userAgent) && !/(Chrome\/|Edge\/)/.test(navigator.userAgent) && [].concat(navigator.userAgent.match(/Safari\/(\d*)/))[1] < 604) }), V = Y.schema, j = Y.hasGetAll, Y = V.tables.map(v), D = {};
      return Y.forEach(function(X) {
        return D[X.name] = X;
      }), { stack: "dbcore", transaction: l.transaction.bind(l), table: function(X) {
        if (!D[X])
          throw new Error("Table '".concat(X, "' not found"));
        return D[X];
      }, MIN_KEY: -1 / 0, MAX_KEY: Kt(d), schema: V };
    }
    function ni(l, d, b, m) {
      var v = b.IDBKeyRange;
      return b.indexedDB, { dbcore: (m = ti(d, v, m), l.dbcore.reduce(function(_, R) {
        return R = R.create, r(r({}, _), R(_));
      }, m)) };
    }
    function sn(l, m) {
      var b = m.db, m = ni(l._middlewares, b, l._deps, m);
      l.core = m.dbcore, l.tables.forEach(function(v) {
        var _ = v.name;
        l.core.schema.tables.some(function(R) {
          return R.name === _;
        }) && (v.core = l.core.table(_), l[_] instanceof l.Table && (l[_].core = v.core));
      });
    }
    function on(l, d, b, m) {
      b.forEach(function(v) {
        var _ = m[v];
        d.forEach(function(R) {
          var U = function V(j, Y) {
            return x(j, Y) || (j = p(j)) && V(j, Y);
          }(R, v);
          (!U || "value" in U && U.value === void 0) && (R === l.Transaction.prototype || R instanceof l.Transaction ? S(R, v, { get: function() {
            return this.table(v);
          }, set: function(V) {
            k(this, v, { value: V, writable: !0, configurable: !0, enumerable: !0 });
          } }) : R[v] = new l.Table(v, _));
        });
      });
    }
    function On(l, d) {
      d.forEach(function(b) {
        for (var m in b)
          b[m] instanceof l.Table && delete b[m];
      });
    }
    function ri(l, d) {
      return l._cfg.version - d._cfg.version;
    }
    function ii(l, d, b, m) {
      var v = l._dbSchema;
      b.objectStoreNames.contains("$meta") && !v.$meta && (v.$meta = Un("$meta", xr("")[0], []), l._storeNames.push("$meta"));
      var _ = l._createTransaction("readwrite", l._storeNames, v);
      _.create(b), _._completion.catch(m);
      var R = _._reject.bind(_), U = Ee.transless || Ee;
      lt(function() {
        return Ee.trans = _, Ee.transless = U, d !== 0 ? (sn(l, b), j = d, ((V = _).storeNames.includes("$meta") ? V.table("$meta").get("version").then(function(Y) {
          return Y ?? j;
        }) : $e.resolve(j)).then(function(Y) {
          return X = Y, z = _, Z = b, J = [], Y = (D = l)._versions, G = D._dbSchema = cn(0, D.idbdb, Z), (Y = Y.filter(function(ne) {
            return ne._cfg.version >= X;
          })).length !== 0 ? (Y.forEach(function(ne) {
            J.push(function() {
              var re = G, se = ne._cfg.dbschema;
              un(D, re, Z), un(D, se, Z), G = D._dbSchema = se;
              var ue = Dn(re, se);
              ue.add.forEach(function(me) {
                Kn(Z, me[0], me[1].primKey, me[1].indexes);
              }), ue.change.forEach(function(me) {
                if (me.recreate)
                  throw new de.Upgrade("Not yet support for changing primary key");
                var we = Z.objectStore(me.name);
                me.add.forEach(function(ke) {
                  return an(we, ke);
                }), me.change.forEach(function(ke) {
                  we.deleteIndex(ke.name), an(we, ke);
                }), me.del.forEach(function(ke) {
                  return we.deleteIndex(ke);
                });
              });
              var he = ne._cfg.contentUpgrade;
              if (he && ne._cfg.version > X) {
                sn(D, Z), z._memoizedTables = {};
                var be = P(se);
                ue.del.forEach(function(me) {
                  be[me] = re[me];
                }), On(D, [D.Transaction.prototype]), on(D, [D.Transaction.prototype], a(be), be), z.schema = be;
                var pe, ye = oe(he);
                return ye && At(), ue = $e.follow(function() {
                  var me;
                  (pe = he(z)) && ye && (me = ft.bind(null, null), pe.then(me, me));
                }), pe && typeof pe.then == "function" ? $e.resolve(pe) : ue.then(function() {
                  return pe;
                });
              }
            }), J.push(function(re) {
              var se, ue, he = ne._cfg.dbschema;
              se = he, ue = re, [].slice.call(ue.db.objectStoreNames).forEach(function(be) {
                return se[be] == null && ue.db.deleteObjectStore(be);
              }), On(D, [D.Transaction.prototype]), on(D, [D.Transaction.prototype], D._storeNames, D._dbSchema), z.schema = D._dbSchema;
            }), J.push(function(re) {
              D.idbdb.objectStoreNames.contains("$meta") && (Math.ceil(D.idbdb.version / 10) === ne._cfg.version ? (D.idbdb.deleteObjectStore("$meta"), delete D._dbSchema.$meta, D._storeNames = D._storeNames.filter(function(se) {
                return se !== "$meta";
              })) : re.objectStore("$meta").put(ne._cfg.version, "version"));
            });
          }), function ne() {
            return J.length ? $e.resolve(J.shift()(z.idbtrans)).then(ne) : $e.resolve();
          }().then(function() {
            Er(G, Z);
          })) : $e.resolve();
          var D, X, z, Z, J, G;
        }).catch(R)) : (a(v).forEach(function(Y) {
          Kn(b, Y, v[Y].primKey, v[Y].indexes);
        }), sn(l, b), void $e.follow(function() {
          return l.on.populate.fire(_);
        }).catch(R));
        var V, j;
      });
    }
    function si(l, d) {
      Er(l._dbSchema, d), d.db.version % 10 != 0 || d.objectStoreNames.contains("$meta") || d.db.createObjectStore("$meta").add(Math.ceil(d.db.version / 10 - 1), "version");
      var b = cn(0, l.idbdb, d);
      un(l, l._dbSchema, d);
      for (var m = 0, v = Dn(b, l._dbSchema).change; m < v.length; m++) {
        var _ = function(R) {
          if (R.change.length || R.recreate)
            return console.warn("Unable to patch indexes of table ".concat(R.name, " because it has changes on the type of index or primary key.")), { value: void 0 };
          var U = d.objectStore(R.name);
          R.add.forEach(function(V) {
            nt && console.debug("Dexie upgrade patch: Creating missing index ".concat(R.name, ".").concat(V.src)), an(U, V);
          });
        }(v[m]);
        if (typeof _ == "object")
          return _.value;
      }
    }
    function Dn(l, d) {
      var b, m = { del: [], add: [], change: [] };
      for (b in l)
        d[b] || m.del.push(b);
      for (b in d) {
        var v = l[b], _ = d[b];
        if (v) {
          var R = { name: b, def: _, recreate: !1, del: [], add: [], change: [] };
          if ("" + (v.primKey.keyPath || "") != "" + (_.primKey.keyPath || "") || v.primKey.auto !== _.primKey.auto)
            R.recreate = !0, m.change.push(R);
          else {
            var U = v.idxByName, V = _.idxByName, j = void 0;
            for (j in U)
              V[j] || R.del.push(j);
            for (j in V) {
              var Y = U[j], D = V[j];
              Y ? Y.src !== D.src && R.change.push(D) : R.add.push(D);
            }
            (0 < R.del.length || 0 < R.add.length || 0 < R.change.length) && m.change.push(R);
          }
        } else
          m.add.push([b, _]);
      }
      return m;
    }
    function Kn(l, d, b, m) {
      var v = l.db.createObjectStore(d, b.keyPath ? { keyPath: b.keyPath, autoIncrement: b.auto } : { autoIncrement: b.auto });
      return m.forEach(function(_) {
        return an(v, _);
      }), v;
    }
    function Er(l, d) {
      a(l).forEach(function(b) {
        d.db.objectStoreNames.contains(b) || (nt && console.debug("Dexie: Creating missing table", b), Kn(d, b, l[b].primKey, l[b].indexes));
      });
    }
    function an(l, d) {
      l.createIndex(d.name, d.keyPath, { unique: d.unique, multiEntry: d.multi });
    }
    function cn(l, d, b) {
      var m = {};
      return N(d.objectStoreNames, 0).forEach(function(v) {
        for (var _ = b.objectStore(v), R = Hn($r(j = _.keyPath), j || "", !0, !1, !!_.autoIncrement, j && typeof j != "string", !0), U = [], V = 0; V < _.indexNames.length; ++V) {
          var Y = _.index(_.indexNames[V]), j = Y.keyPath, Y = Hn(Y.name, j, !!Y.unique, !!Y.multiEntry, !1, j && typeof j != "string", !1);
          U.push(Y);
        }
        m[v] = Un(v, R, U);
      }), m;
    }
    function un(l, d, b) {
      for (var m = b.db.objectStoreNames, v = 0; v < m.length; ++v) {
        var _ = m[v], R = b.objectStore(_);
        l._hasGetAll = "getAll" in R;
        for (var U = 0; U < R.indexNames.length; ++U) {
          var V = R.indexNames[U], j = R.index(V).keyPath, Y = typeof j == "string" ? j : "[" + N(j).join("+") + "]";
          !d[_] || (j = d[_].idxByName[Y]) && (j.name = V, delete d[_].idxByName[Y], d[_].idxByName[V] = j);
        }
      }
      typeof navigator < "u" && /Safari/.test(navigator.userAgent) && !/(Chrome\/|Edge\/)/.test(navigator.userAgent) && o.WorkerGlobalScope && o instanceof o.WorkerGlobalScope && [].concat(navigator.userAgent.match(/Safari\/(\d*)/))[1] < 604 && (l._hasGetAll = !1);
    }
    function xr(l) {
      return l.split(",").map(function(d, b) {
        var m = (d = d.trim()).replace(/([&*]|\+\+)/g, ""), v = /^\[/.test(m) ? m.match(/^\[(.*)\]$/)[1].split("+") : m;
        return Hn(m, v || null, /\&/.test(d), /\*/.test(d), /\+\+/.test(d), c(v), b === 0);
      });
    }
    var oi = (ln.prototype._parseStoresSpec = function(l, d) {
      a(l).forEach(function(b) {
        if (l[b] !== null) {
          var m = xr(l[b]), v = m.shift();
          if (v.unique = !0, v.multi)
            throw new de.Schema("Primary key cannot be multi-valued");
          m.forEach(function(_) {
            if (_.auto)
              throw new de.Schema("Only primary key can be marked as autoIncrement (++)");
            if (!_.keyPath)
              throw new de.Schema("Index must have a name and cannot be an empty string");
          }), d[b] = Un(b, v, m);
        }
      });
    }, ln.prototype.stores = function(b) {
      var d = this.db;
      this._cfg.storesSource = this._cfg.storesSource ? h(this._cfg.storesSource, b) : b;
      var b = d._versions, m = {}, v = {};
      return b.forEach(function(_) {
        h(m, _._cfg.storesSource), v = _._cfg.dbschema = {}, _._parseStoresSpec(m, v);
      }), d._dbSchema = v, On(d, [d._allTables, d, d.Transaction.prototype]), on(d, [d._allTables, d, d.Transaction.prototype, this._cfg.tables], a(v), v), d._storeNames = a(v), this;
    }, ln.prototype.upgrade = function(l) {
      return this._cfg.contentUpgrade = wn(this._cfg.contentUpgrade || _e, l), this;
    }, ln);
    function ln() {
    }
    function Fn(l, d) {
      var b = l._dbNamesDB;
      return b || (b = l._dbNamesDB = new at(Qt, { addons: [], indexedDB: l, IDBKeyRange: d })).version(1).stores({ dbnames: "name" }), b.table("dbnames");
    }
    function Mn(l) {
      return l && typeof l.databases == "function";
    }
    function qn(l) {
      return lt(function() {
        return Ee.letThrough = !0, l();
      });
    }
    function jn(l) {
      return !("from" in l);
    }
    var We = function(l, d) {
      if (!this) {
        var b = new We();
        return l && "d" in l && h(b, l), b;
      }
      h(this, arguments.length ? { d: 1, from: l, to: 1 < arguments.length ? d : l } : { d: 0 });
    };
    function Mt(l, d, b) {
      var m = He(d, b);
      if (!isNaN(m)) {
        if (0 < m)
          throw RangeError();
        if (jn(l))
          return h(l, { from: d, to: b, d: 1 });
        var v = l.l, m = l.r;
        if (He(b, l.from) < 0)
          return v ? Mt(v, d, b) : l.l = { from: d, to: b, d: 1, l: null, r: null }, _r(l);
        if (0 < He(d, l.to))
          return m ? Mt(m, d, b) : l.r = { from: d, to: b, d: 1, l: null, r: null }, _r(l);
        He(d, l.from) < 0 && (l.from = d, l.l = null, l.d = m ? m.d + 1 : 1), 0 < He(b, l.to) && (l.to = b, l.r = null, l.d = l.l ? l.l.d + 1 : 1), b = !l.r, v && !l.l && qt(l, v), m && b && qt(l, m);
      }
    }
    function qt(l, d) {
      jn(d) || function b(m, V) {
        var _ = V.from, R = V.to, U = V.l, V = V.r;
        Mt(m, _, R), U && b(m, U), V && b(m, V);
      }(l, d);
    }
    function fn(l, d) {
      var b = zn(d), m = b.next();
      if (m.done)
        return !1;
      for (var v = m.value, _ = zn(l), R = _.next(v.from), U = R.value; !m.done && !R.done; ) {
        if (He(U.from, v.to) <= 0 && 0 <= He(U.to, v.from))
          return !0;
        He(v.from, U.from) < 0 ? v = (m = b.next(U.from)).value : U = (R = _.next(v.from)).value;
      }
      return !1;
    }
    function zn(l) {
      var d = jn(l) ? null : { s: 0, n: l };
      return { next: function(b) {
        for (var m = 0 < arguments.length; d; )
          switch (d.s) {
            case 0:
              if (d.s = 1, m)
                for (; d.n.l && He(b, d.n.from) < 0; )
                  d = { up: d, n: d.n.l, s: 1 };
              else
                for (; d.n.l; )
                  d = { up: d, n: d.n.l, s: 1 };
            case 1:
              if (d.s = 2, !m || He(b, d.n.to) <= 0)
                return { value: d.n, done: !1 };
            case 2:
              if (d.n.r) {
                d.s = 3, d = { up: d, n: d.n.r, s: 0 };
                continue;
              }
            case 3:
              d = d.up;
          }
        return { done: !0 };
      } };
    }
    function _r(l) {
      var d, b, m = (((d = l.r) === null || d === void 0 ? void 0 : d.d) || 0) - (((b = l.l) === null || b === void 0 ? void 0 : b.d) || 0), v = 1 < m ? "r" : m < -1 ? "l" : "";
      v && (d = v == "r" ? "l" : "r", b = r({}, l), m = l[v], l.from = m.from, l.to = m.to, l[v] = m[v], b[v] = m[d], (l[d] = b).d = Br(b)), l.d = Br(l);
    }
    function Br(b) {
      var d = b.r, b = b.l;
      return (d ? b ? Math.max(d.d, b.d) : d.d : b ? b.d : 0) + 1;
    }
    function hn(l, d) {
      return a(d).forEach(function(b) {
        l[b] ? qt(l[b], d[b]) : l[b] = function m(v) {
          var _, R, U = {};
          for (_ in v)
            y(v, _) && (R = v[_], U[_] = !R || typeof R != "object" || T.has(R.constructor) ? R : m(R));
          return U;
        }(d[b]);
      }), l;
    }
    function Vn(l, d) {
      return l.all || d.all || Object.keys(l).some(function(b) {
        return d[b] && fn(d[b], l[b]);
      });
    }
    $(We.prototype, ((Qe = { add: function(l) {
      return qt(this, l), this;
    }, addKey: function(l) {
      return Mt(this, l, l), this;
    }, addKeys: function(l) {
      var d = this;
      return l.forEach(function(b) {
        return Mt(d, b, b);
      }), this;
    } })[B] = function() {
      return zn(this);
    }, Qe));
    var vt = {}, Wn = {}, Gn = !1;
    function dn(l) {
      hn(Wn, l), Gn || (Gn = !0, setTimeout(function() {
        Gn = !1, Zn(Wn, !(Wn = {}));
      }, 0));
    }
    function Zn(l, d) {
      d === void 0 && (d = !1);
      var b = /* @__PURE__ */ new Set();
      if (l.all)
        for (var m = 0, v = Object.values(vt); m < v.length; m++)
          Ar(R = v[m], l, b, d);
      else
        for (var _ in l) {
          var R, U = /^idb\:\/\/(.*)\/(.*)\//.exec(_);
          U && (_ = U[1], U = U[2], (R = vt["idb://".concat(_, "/").concat(U)]) && Ar(R, l, b, d));
        }
      b.forEach(function(V) {
        return V();
      });
    }
    function Ar(l, d, b, m) {
      for (var v = [], _ = 0, R = Object.entries(l.queries.query); _ < R.length; _++) {
        for (var U = R[_], V = U[0], j = [], Y = 0, D = U[1]; Y < D.length; Y++) {
          var X = D[Y];
          Vn(d, X.obsSet) ? X.subscribers.forEach(function(G) {
            return b.add(G);
          }) : m && j.push(X);
        }
        m && v.push([V, j]);
      }
      if (m)
        for (var z = 0, Z = v; z < Z.length; z++) {
          var J = Z[z], V = J[0], j = J[1];
          l.queries.query[V] = j;
        }
    }
    function ai(l) {
      var d = l._state, b = l._deps.indexedDB;
      if (d.isBeingOpened || l.idbdb)
        return d.dbReadyPromise.then(function() {
          return d.dbOpenError ? Fe(d.dbOpenError) : l;
        });
      d.isBeingOpened = !0, d.dbOpenError = null, d.openComplete = !1;
      var m = d.openCanceller, v = Math.round(10 * l.verno), _ = !1;
      function R() {
        if (d.openCanceller !== m)
          throw new de.DatabaseClosed("db.open() was cancelled");
      }
      function U() {
        return new $e(function(X, z) {
          if (R(), !b)
            throw new de.MissingAPI();
          var Z = l.name, J = d.autoSchema || !v ? b.open(Z) : b.open(Z, v);
          if (!J)
            throw new de.MissingAPI();
          J.onerror = rt(z), J.onblocked = Ke(l._fireOnBlocked), J.onupgradeneeded = Ke(function(G) {
            var ne;
            Y = J.transaction, d.autoSchema && !l._options.allowEmptyDB ? (J.onerror = Ot, Y.abort(), J.result.close(), (ne = b.deleteDatabase(Z)).onsuccess = ne.onerror = Ke(function() {
              z(new de.NoSuchDatabase("Database ".concat(Z, " doesnt exist")));
            })) : (Y.onerror = rt(z), G = G.oldVersion > Math.pow(2, 62) ? 0 : G.oldVersion, D = G < 1, l.idbdb = J.result, _ && si(l, Y), ii(l, G / 10, Y, z));
          }, z), J.onsuccess = Ke(function() {
            Y = null;
            var G, ne, re, se, ue, he = l.idbdb = J.result, be = N(he.objectStoreNames);
            if (0 < be.length)
              try {
                var pe = he.transaction((se = be).length === 1 ? se[0] : se, "readonly");
                if (d.autoSchema)
                  ne = he, re = pe, (G = l).verno = ne.version / 10, re = G._dbSchema = cn(0, ne, re), G._storeNames = N(ne.objectStoreNames, 0), on(G, [G._allTables], a(re), re);
                else if (un(l, l._dbSchema, pe), ((ue = Dn(cn(0, (ue = l).idbdb, pe), ue._dbSchema)).add.length || ue.change.some(function(ye) {
                  return ye.add.length || ye.change.length;
                })) && !_)
                  return console.warn("Dexie SchemaDiff: Schema was extended without increasing the number passed to db.version(). Dexie will add missing parts and increment native version number to workaround this."), he.close(), v = he.version + 1, _ = !0, X(U());
                sn(l, pe);
              } catch {
              }
            kt.push(l), he.onversionchange = Ke(function(ye) {
              d.vcFired = !0, l.on("versionchange").fire(ye);
            }), he.onclose = Ke(function(ye) {
              l.on("close").fire(ye);
            }), D && (ue = l._deps, pe = Z, he = ue.indexedDB, ue = ue.IDBKeyRange, Mn(he) || pe === Qt || Fn(he, ue).put({ name: pe }).catch(_e)), X();
          }, z);
        }).catch(function(X) {
          switch (X == null ? void 0 : X.name) {
            case "UnknownError":
              if (0 < d.PR1398_maxLoop)
                return d.PR1398_maxLoop--, console.warn("Dexie: Workaround for Chrome UnknownError on open()"), U();
              break;
            case "VersionError":
              if (0 < v)
                return v = 0, U();
          }
          return $e.reject(X);
        });
      }
      var V, j = d.dbReadyResolve, Y = null, D = !1;
      return $e.race([m, (typeof navigator > "u" ? $e.resolve() : !navigator.userAgentData && /Safari\//.test(navigator.userAgent) && !/Chrom(e|ium)\//.test(navigator.userAgent) && indexedDB.databases ? new Promise(function(X) {
        function z() {
          return indexedDB.databases().finally(X);
        }
        V = setInterval(z, 100), z();
      }).finally(function() {
        return clearInterval(V);
      }) : Promise.resolve()).then(U)]).then(function() {
        return R(), d.onReadyBeingFired = [], $e.resolve(qn(function() {
          return l.on.ready.fire(l.vip);
        })).then(function X() {
          if (0 < d.onReadyBeingFired.length) {
            var z = d.onReadyBeingFired.reduce(wn, _e);
            return d.onReadyBeingFired = [], $e.resolve(qn(function() {
              return z(l.vip);
            })).then(X);
          }
        });
      }).finally(function() {
        d.openCanceller === m && (d.onReadyBeingFired = null, d.isBeingOpened = !1);
      }).catch(function(X) {
        d.dbOpenError = X;
        try {
          Y && Y.abort();
        } catch {
        }
        return m === d.openCanceller && l._close(), Fe(X);
      }).finally(function() {
        d.openComplete = !0, j();
      }).then(function() {
        var X;
        return D && (X = {}, l.tables.forEach(function(z) {
          z.schema.indexes.forEach(function(Z) {
            Z.name && (X["idb://".concat(l.name, "/").concat(z.name, "/").concat(Z.name)] = new We(-1 / 0, [[[]]]));
          }), X["idb://".concat(l.name, "/").concat(z.name, "/")] = X["idb://".concat(l.name, "/").concat(z.name, "/:dels")] = new We(-1 / 0, [[[]]]);
        }), pt(Dt).fire(X), Zn(X, !0)), l;
      });
    }
    function Yn(l) {
      function d(_) {
        return l.next(_);
      }
      var b = v(d), m = v(function(_) {
        return l.throw(_);
      });
      function v(_) {
        return function(V) {
          var U = _(V), V = U.value;
          return U.done ? V : V && typeof V.then == "function" ? V.then(b, m) : c(V) ? Promise.all(V).then(b, m) : b(V);
        };
      }
      return v(d)();
    }
    function pn(l, d, b) {
      for (var m = c(l) ? l.slice() : [l], v = 0; v < b; ++v)
        m.push(d);
      return m;
    }
    var ci = { stack: "dbcore", name: "VirtualIndexMiddleware", level: 1, create: function(l) {
      return r(r({}, l), { table: function(d) {
        var b = l.table(d), m = b.schema, v = {}, _ = [];
        function R(D, X, z) {
          var Z = Ft(D), J = v[Z] = v[Z] || [], G = D == null ? 0 : typeof D == "string" ? 1 : D.length, ne = 0 < X, ne = r(r({}, z), { name: ne ? "".concat(Z, "(virtual-from:").concat(z.name, ")") : z.name, lowLevelIndex: z, isVirtual: ne, keyTail: X, keyLength: G, extractKey: Pn(D), unique: !ne && z.unique });
          return J.push(ne), ne.isPrimaryKey || _.push(ne), 1 < G && R(G === 2 ? D[0] : D.slice(0, G - 1), X + 1, z), J.sort(function(re, se) {
            return re.keyTail - se.keyTail;
          }), ne;
        }
        d = R(m.primaryKey.keyPath, 0, m.primaryKey), v[":id"] = [d];
        for (var U = 0, V = m.indexes; U < V.length; U++) {
          var j = V[U];
          R(j.keyPath, 0, j);
        }
        function Y(D) {
          var X, z = D.query.index;
          return z.isVirtual ? r(r({}, D), { query: { index: z.lowLevelIndex, range: (X = D.query.range, z = z.keyTail, { type: X.type === 1 ? 2 : X.type, lower: pn(X.lower, X.lowerOpen ? l.MAX_KEY : l.MIN_KEY, z), lowerOpen: !0, upper: pn(X.upper, X.upperOpen ? l.MIN_KEY : l.MAX_KEY, z), upperOpen: !0 }) } }) : D;
        }
        return r(r({}, b), { schema: r(r({}, m), { primaryKey: d, indexes: _, getIndexByKeyPath: function(D) {
          return (D = v[Ft(D)]) && D[0];
        } }), count: function(D) {
          return b.count(Y(D));
        }, query: function(D) {
          return b.query(Y(D));
        }, openCursor: function(D) {
          var X = D.query.index, z = X.keyTail, Z = X.isVirtual, J = X.keyLength;
          return Z ? b.openCursor(Y(D)).then(function(ne) {
            return ne && G(ne);
          }) : b.openCursor(D);
          function G(ne) {
            return Object.create(ne, { continue: { value: function(re) {
              re != null ? ne.continue(pn(re, D.reverse ? l.MAX_KEY : l.MIN_KEY, z)) : D.unique ? ne.continue(ne.key.slice(0, J).concat(D.reverse ? l.MIN_KEY : l.MAX_KEY, z)) : ne.continue();
            } }, continuePrimaryKey: { value: function(re, se) {
              ne.continuePrimaryKey(pn(re, l.MAX_KEY, z), se);
            } }, primaryKey: { get: function() {
              return ne.primaryKey;
            } }, key: { get: function() {
              var re = ne.key;
              return J === 1 ? re[0] : re.slice(0, J);
            } }, value: { get: function() {
              return ne.value;
            } } });
          }
        } });
      } });
    } };
    function Xn(l, d, b, m) {
      return b = b || {}, m = m || "", a(l).forEach(function(v) {
        var _, R, U;
        y(d, v) ? (_ = l[v], R = d[v], typeof _ == "object" && typeof R == "object" && _ && R ? (U = E(_)) !== E(R) ? b[m + v] = d[v] : U === "Object" ? Xn(_, R, b, m + v + ".") : _ !== R && (b[m + v] = d[v]) : _ !== R && (b[m + v] = d[v])) : b[m + v] = void 0;
      }), a(d).forEach(function(v) {
        y(l, v) || (b[m + v] = d[v]);
      }), b;
    }
    function Jn(l, d) {
      return d.type === "delete" ? d.keys : d.keys || d.values.map(l.extractKey);
    }
    var ui = { stack: "dbcore", name: "HooksMiddleware", level: 2, create: function(l) {
      return r(r({}, l), { table: function(d) {
        var b = l.table(d), m = b.schema.primaryKey;
        return r(r({}, b), { mutate: function(v) {
          var _ = Ee.trans, R = _.table(d).hook, U = R.deleting, V = R.creating, j = R.updating;
          switch (v.type) {
            case "add":
              if (V.fire === _e)
                break;
              return _._promise("readwrite", function() {
                return Y(v);
              }, !0);
            case "put":
              if (V.fire === _e && j.fire === _e)
                break;
              return _._promise("readwrite", function() {
                return Y(v);
              }, !0);
            case "delete":
              if (U.fire === _e)
                break;
              return _._promise("readwrite", function() {
                return Y(v);
              }, !0);
            case "deleteRange":
              if (U.fire === _e)
                break;
              return _._promise("readwrite", function() {
                return function D(X, z, Z) {
                  return b.query({ trans: X, values: !1, query: { index: m, range: z }, limit: Z }).then(function(J) {
                    var G = J.result;
                    return Y({ type: "delete", keys: G, trans: X }).then(function(ne) {
                      return 0 < ne.numFailures ? Promise.reject(ne.failures[0]) : G.length < Z ? { failures: [], numFailures: 0, lastResult: void 0 } : D(X, r(r({}, z), { lower: G[G.length - 1], lowerOpen: !0 }), Z);
                    });
                  });
                }(v.trans, v.range, 1e4);
              }, !0);
          }
          return b.mutate(v);
          function Y(D) {
            var X, z, Z, J = Ee.trans, G = D.keys || Jn(m, D);
            if (!G)
              throw new Error("Keys missing");
            return (D = D.type === "add" || D.type === "put" ? r(r({}, D), { keys: G }) : r({}, D)).type !== "delete" && (D.values = s([], D.values)), D.keys && (D.keys = s([], D.keys)), X = b, Z = G, ((z = D).type === "add" ? Promise.resolve([]) : X.getMany({ trans: z.trans, keys: Z, cache: "immutable" })).then(function(ne) {
              var re = G.map(function(se, ue) {
                var he, be, pe, ye = ne[ue], me = { onerror: null, onsuccess: null };
                return D.type === "delete" ? U.fire.call(me, se, ye, J) : D.type === "add" || ye === void 0 ? (he = V.fire.call(me, se, D.values[ue], J), se == null && he != null && (D.keys[ue] = se = he, m.outbound || L(D.values[ue], m.keyPath, se))) : (he = Xn(ye, D.values[ue]), (be = j.fire.call(me, he, se, ye, J)) && (pe = D.values[ue], Object.keys(be).forEach(function(we) {
                  y(pe, we) ? pe[we] = be[we] : L(pe, we, be[we]);
                }))), me;
              });
              return b.mutate(D).then(function(se) {
                for (var ue = se.failures, he = se.results, be = se.numFailures, se = se.lastResult, pe = 0; pe < G.length; ++pe) {
                  var ye = (he || G)[pe], me = re[pe];
                  ye == null ? me.onerror && me.onerror(ue[pe]) : me.onsuccess && me.onsuccess(D.type === "put" && ne[pe] ? D.values[pe] : ye);
                }
                return { failures: ue, results: he, numFailures: be, lastResult: se };
              }).catch(function(se) {
                return re.forEach(function(ue) {
                  return ue.onerror && ue.onerror(se);
                }), Promise.reject(se);
              });
            });
          }
        } });
      } });
    } };
    function kr(l, d, b) {
      try {
        if (!d || d.keys.length < l.length)
          return null;
        for (var m = [], v = 0, _ = 0; v < d.keys.length && _ < l.length; ++v)
          He(d.keys[v], l[_]) === 0 && (m.push(b ? K(d.values[v]) : d.values[v]), ++_);
        return m.length === l.length ? m : null;
      } catch {
        return null;
      }
    }
    var li = { stack: "dbcore", level: -1, create: function(l) {
      return { table: function(d) {
        var b = l.table(d);
        return r(r({}, b), { getMany: function(m) {
          if (!m.cache)
            return b.getMany(m);
          var v = kr(m.keys, m.trans._cache, m.cache === "clone");
          return v ? $e.resolve(v) : b.getMany(m).then(function(_) {
            return m.trans._cache = { keys: m.keys, values: m.cache === "clone" ? K(_) : _ }, _;
          });
        }, mutate: function(m) {
          return m.type !== "add" && (m.trans._cache = null), b.mutate(m);
        } });
      } };
    } };
    function Sr(l, d) {
      return l.trans.mode === "readonly" && !!l.subscr && !l.trans.explicit && l.trans.db._options.cache !== "disabled" && !d.schema.primaryKey.outbound;
    }
    function Tr(l, d) {
      switch (l) {
        case "query":
          return d.values && !d.unique;
        case "get":
        case "getMany":
        case "count":
        case "openCursor":
          return !1;
      }
    }
    var fi = { stack: "dbcore", level: 0, name: "Observability", create: function(l) {
      var d = l.schema.name, b = new We(l.MIN_KEY, l.MAX_KEY);
      return r(r({}, l), { transaction: function(m, v, _) {
        if (Ee.subscr && v !== "readonly")
          throw new de.ReadOnly("Readwrite transaction in liveQuery context. Querier source: ".concat(Ee.querier));
        return l.transaction(m, v, _);
      }, table: function(m) {
        var v = l.table(m), _ = v.schema, R = _.primaryKey, D = _.indexes, U = R.extractKey, V = R.outbound, j = R.autoIncrement && D.filter(function(z) {
          return z.compound && z.keyPath.includes(R.keyPath);
        }), Y = r(r({}, v), { mutate: function(z) {
          function Z(we) {
            return we = "idb://".concat(d, "/").concat(m, "/").concat(we), se[we] || (se[we] = new We());
          }
          var J, G, ne, re = z.trans, se = z.mutatedParts || (z.mutatedParts = {}), ue = Z(""), he = Z(":dels"), be = z.type, me = z.type === "deleteRange" ? [z.range] : z.type === "delete" ? [z.keys] : z.values.length < 50 ? [Jn(R, z).filter(function(we) {
            return we;
          }), z.values] : [], pe = me[0], ye = me[1], me = z.trans._cache;
          return c(pe) ? (ue.addKeys(pe), (me = be === "delete" || pe.length === ye.length ? kr(pe, me) : null) || he.addKeys(pe), (me || ye) && (J = Z, G = me, ne = ye, _.indexes.forEach(function(we) {
            var ke = J(we.name || "");
            function Ie(Re) {
              return Re != null ? we.extractKey(Re) : null;
            }
            function Ne(Re) {
              return we.multiEntry && c(Re) ? Re.forEach(function(et) {
                return ke.addKey(et);
              }) : ke.addKey(Re);
            }
            (G || ne).forEach(function(Re, Ge) {
              var Ce = G && Ie(G[Ge]), Ge = ne && Ie(ne[Ge]);
              He(Ce, Ge) !== 0 && (Ce != null && Ne(Ce), Ge != null && Ne(Ge));
            });
          }))) : pe ? (ye = { from: pe.lower, to: pe.upper }, he.add(ye), ue.add(ye)) : (ue.add(b), he.add(b), _.indexes.forEach(function(we) {
            return Z(we.name).add(b);
          })), v.mutate(z).then(function(we) {
            return !pe || z.type !== "add" && z.type !== "put" || (ue.addKeys(we.results), j && j.forEach(function(ke) {
              var Ie = z.values.map(function(Re) {
                return ke.extractKey(Re);
              }), Ne = ke.keyPath.findIndex(function(Re) {
                return Re === R.keyPath;
              });
              we.results.forEach(function(Re) {
                return Ie[Ne] = Re;
              }), Z(ke.name).addKeys(Ie);
            })), re.mutatedParts = hn(re.mutatedParts || {}, se), we;
          });
        } }), D = function(Z) {
          var J = Z.query, Z = J.index, J = J.range;
          return [Z, new We((Z = J.lower) !== null && Z !== void 0 ? Z : l.MIN_KEY, (J = J.upper) !== null && J !== void 0 ? J : l.MAX_KEY)];
        }, X = { get: function(z) {
          return [R, new We(z.key)];
        }, getMany: function(z) {
          return [R, new We().addKeys(z.keys)];
        }, count: D, query: D, openCursor: D };
        return a(X).forEach(function(z) {
          Y[z] = function(Z) {
            var J = Ee.subscr, G = !!J, ne = Sr(Ee, v) && Tr(z, Z) ? Z.obsSet = {} : J;
            if (G) {
              var re = function(ye) {
                return ye = "idb://".concat(d, "/").concat(m, "/").concat(ye), ne[ye] || (ne[ye] = new We());
              }, se = re(""), ue = re(":dels"), J = X[z](Z), G = J[0], J = J[1];
              if ((z === "query" && G.isPrimaryKey && !Z.values ? ue : re(G.name || "")).add(J), !G.isPrimaryKey) {
                if (z !== "count") {
                  var he = z === "query" && V && Z.values && v.query(r(r({}, Z), { values: !1 }));
                  return v[z].apply(this, arguments).then(function(ye) {
                    if (z === "query") {
                      if (V && Z.values)
                        return he.then(function(Ie) {
                          return Ie = Ie.result, se.addKeys(Ie), ye;
                        });
                      var me = Z.values ? ye.result.map(U) : ye.result;
                      (Z.values ? se : ue).addKeys(me);
                    } else if (z === "openCursor") {
                      var we = ye, ke = Z.values;
                      return we && Object.create(we, { key: { get: function() {
                        return ue.addKey(we.primaryKey), we.key;
                      } }, primaryKey: { get: function() {
                        var Ie = we.primaryKey;
                        return ue.addKey(Ie), Ie;
                      } }, value: { get: function() {
                        return ke && se.addKey(we.primaryKey), we.value;
                      } } });
                    }
                    return ye;
                  });
                }
                ue.add(b);
              }
            }
            return v[z].apply(this, arguments);
          };
        }), Y;
      } });
    } };
    function Ir(l, d, b) {
      if (b.numFailures === 0)
        return d;
      if (d.type === "deleteRange")
        return null;
      var m = d.keys ? d.keys.length : "values" in d && d.values ? d.values.length : 1;
      return b.numFailures === m ? null : (d = r({}, d), c(d.keys) && (d.keys = d.keys.filter(function(v, _) {
        return !(_ in b.failures);
      })), "values" in d && c(d.values) && (d.values = d.values.filter(function(v, _) {
        return !(_ in b.failures);
      })), d);
    }
    function Qn(l, d) {
      return b = l, ((m = d).lower === void 0 || (m.lowerOpen ? 0 < He(b, m.lower) : 0 <= He(b, m.lower))) && (l = l, (d = d).upper === void 0 || (d.upperOpen ? He(l, d.upper) < 0 : He(l, d.upper) <= 0));
      var b, m;
    }
    function Rr(l, d, X, m, v, _) {
      if (!X || X.length === 0)
        return l;
      var R = d.query.index, U = R.multiEntry, V = d.query.range, j = m.schema.primaryKey.extractKey, Y = R.extractKey, D = (R.lowLevelIndex || R).extractKey, X = X.reduce(function(z, Z) {
        var J = z, G = Z.type === "add" || Z.type === "put" ? Z.values.filter(function(ue) {
          return ue = Y(ue), U && c(ue) ? ue.some(function(he) {
            return Qn(he, V);
          }) : Qn(ue, V);
        }).map(function(ue) {
          return ue = K(ue), _ && Object.freeze(ue), ue;
        }) : [];
        switch (Z.type) {
          case "add":
            J = z.concat(d.values ? G : G.map(function(he) {
              return j(he);
            }));
            break;
          case "put":
            var ne = new We().addKeys(Z.values.map(function(he) {
              return j(he);
            })), J = z.filter(function(he) {
              return he = d.values ? j(he) : he, !fn(new We(he), ne);
            }).concat(d.values ? G : G.map(function(he) {
              return j(he);
            }));
            break;
          case "delete":
            var re = new We().addKeys(Z.keys);
            J = z.filter(function(he) {
              return he = d.values ? j(he) : he, !fn(new We(he), re);
            });
            break;
          case "deleteRange":
            var se = Z.range;
            J = z.filter(function(he) {
              return !Qn(j(he), se);
            });
        }
        return J;
      }, l);
      return X === l ? l : (X.sort(function(z, Z) {
        return He(D(z), D(Z)) || He(j(z), j(Z));
      }), d.limit && d.limit < 1 / 0 && (X.length > d.limit ? X.length = d.limit : l.length === d.limit && X.length < d.limit && (v.dirty = !0)), _ ? Object.freeze(X) : X);
    }
    function Cr(l, d) {
      return He(l.lower, d.lower) === 0 && He(l.upper, d.upper) === 0 && !!l.lowerOpen == !!d.lowerOpen && !!l.upperOpen == !!d.upperOpen;
    }
    function hi(l, d) {
      return function(b, m, v, _) {
        if (b === void 0)
          return m !== void 0 ? -1 : 0;
        if (m === void 0)
          return 1;
        if ((m = He(b, m)) === 0) {
          if (v && _)
            return 0;
          if (v)
            return 1;
          if (_)
            return -1;
        }
        return m;
      }(l.lower, d.lower, l.lowerOpen, d.lowerOpen) <= 0 && 0 <= function(b, m, v, _) {
        if (b === void 0)
          return m !== void 0 ? 1 : 0;
        if (m === void 0)
          return -1;
        if ((m = He(b, m)) === 0) {
          if (v && _)
            return 0;
          if (v)
            return -1;
          if (_)
            return 1;
        }
        return m;
      }(l.upper, d.upper, l.upperOpen, d.upperOpen);
    }
    function di(l, d, b, m) {
      l.subscribers.add(b), m.addEventListener("abort", function() {
        var v, _;
        l.subscribers.delete(b), l.subscribers.size === 0 && (v = l, _ = d, setTimeout(function() {
          v.subscribers.size === 0 && Q(_, v);
        }, 3e3));
      });
    }
    var pi = { stack: "dbcore", level: 0, name: "Cache", create: function(l) {
      var d = l.schema.name;
      return r(r({}, l), { transaction: function(b, m, v) {
        var _, R, U = l.transaction(b, m, v);
        return m === "readwrite" && (R = (_ = new AbortController()).signal, v = function(V) {
          return function() {
            if (_.abort(), m === "readwrite") {
              for (var j = /* @__PURE__ */ new Set(), Y = 0, D = b; Y < D.length; Y++) {
                var X = D[Y], z = vt["idb://".concat(d, "/").concat(X)];
                if (z) {
                  var Z = l.table(X), J = z.optimisticOps.filter(function(ke) {
                    return ke.trans === U;
                  });
                  if (U._explicit && V && U.mutatedParts)
                    for (var G = 0, ne = Object.values(z.queries.query); G < ne.length; G++)
                      for (var re = 0, se = (be = ne[G]).slice(); re < se.length; re++)
                        Vn((pe = se[re]).obsSet, U.mutatedParts) && (Q(be, pe), pe.subscribers.forEach(function(ke) {
                          return j.add(ke);
                        }));
                  else if (0 < J.length) {
                    z.optimisticOps = z.optimisticOps.filter(function(ke) {
                      return ke.trans !== U;
                    });
                    for (var ue = 0, he = Object.values(z.queries.query); ue < he.length; ue++)
                      for (var be, pe, ye, me = 0, we = (be = he[ue]).slice(); me < we.length; me++)
                        (pe = we[me]).res != null && U.mutatedParts && (V && !pe.dirty ? (ye = Object.isFrozen(pe.res), ye = Rr(pe.res, pe.req, J, Z, pe, ye), pe.dirty ? (Q(be, pe), pe.subscribers.forEach(function(ke) {
                          return j.add(ke);
                        })) : ye !== pe.res && (pe.res = ye, pe.promise = $e.resolve({ result: ye }))) : (pe.dirty && Q(be, pe), pe.subscribers.forEach(function(ke) {
                          return j.add(ke);
                        })));
                  }
                }
              }
              j.forEach(function(ke) {
                return ke();
              });
            }
          };
        }, U.addEventListener("abort", v(!1), { signal: R }), U.addEventListener("error", v(!1), { signal: R }), U.addEventListener("complete", v(!0), { signal: R })), U;
      }, table: function(b) {
        var m = l.table(b), v = m.schema.primaryKey;
        return r(r({}, m), { mutate: function(_) {
          var R = Ee.trans;
          if (v.outbound || R.db._options.cache === "disabled" || R.explicit)
            return m.mutate(_);
          var U = vt["idb://".concat(d, "/").concat(b)];
          return U ? (R = m.mutate(_), _.type !== "add" && _.type !== "put" || !(50 <= _.values.length || Jn(v, _).some(function(V) {
            return V == null;
          })) ? (U.optimisticOps.push(_), _.mutatedParts && dn(_.mutatedParts), R.then(function(V) {
            0 < V.numFailures && (Q(U.optimisticOps, _), (V = Ir(0, _, V)) && U.optimisticOps.push(V), _.mutatedParts && dn(_.mutatedParts));
          }), R.catch(function() {
            Q(U.optimisticOps, _), _.mutatedParts && dn(_.mutatedParts);
          })) : R.then(function(V) {
            var j = Ir(0, r(r({}, _), { values: _.values.map(function(z, D) {
              var X, z = (X = v.keyPath) !== null && X !== void 0 && X.includes(".") ? K(z) : r({}, z);
              return L(z, v.keyPath, V.results[D]), z;
            }) }), V);
            U.optimisticOps.push(j), queueMicrotask(function() {
              return _.mutatedParts && dn(_.mutatedParts);
            });
          }), R) : m.mutate(_);
        }, query: function(_) {
          if (!Sr(Ee, m) || !Tr("query", _))
            return m.query(_);
          var R = ((j = Ee.trans) === null || j === void 0 ? void 0 : j.db._options.cache) === "immutable", D = Ee, U = D.requery, V = D.signal, j = function(Z, J, G, ne) {
            var re = vt["idb://".concat(Z, "/").concat(J)];
            if (!re)
              return [];
            if (!(J = re.queries[G]))
              return [null, !1, re, null];
            var se = J[(ne.query ? ne.query.index.name : null) || ""];
            if (!se)
              return [null, !1, re, null];
            switch (G) {
              case "query":
                var ue = se.find(function(he) {
                  return he.req.limit === ne.limit && he.req.values === ne.values && Cr(he.req.query.range, ne.query.range);
                });
                return ue ? [ue, !0, re, se] : [se.find(function(he) {
                  return ("limit" in he.req ? he.req.limit : 1 / 0) >= ne.limit && (!ne.values || he.req.values) && hi(he.req.query.range, ne.query.range);
                }), !1, re, se];
              case "count":
                return ue = se.find(function(he) {
                  return Cr(he.req.query.range, ne.query.range);
                }), [ue, !!ue, re, se];
            }
          }(d, b, "query", _), Y = j[0], D = j[1], X = j[2], z = j[3];
          return Y && D ? Y.obsSet = _.obsSet : (D = m.query(_).then(function(Z) {
            var J = Z.result;
            if (Y && (Y.res = J), R) {
              for (var G = 0, ne = J.length; G < ne; ++G)
                Object.freeze(J[G]);
              Object.freeze(J);
            } else
              Z.result = K(J);
            return Z;
          }).catch(function(Z) {
            return z && Y && Q(z, Y), Promise.reject(Z);
          }), Y = { obsSet: _.obsSet, promise: D, subscribers: /* @__PURE__ */ new Set(), type: "query", req: _, dirty: !1 }, z ? z.push(Y) : (z = [Y], (X = X || (vt["idb://".concat(d, "/").concat(b)] = { queries: { query: {}, count: {} }, objs: /* @__PURE__ */ new Map(), optimisticOps: [], unsignaledParts: {} })).queries.query[_.query.index.name || ""] = z)), di(Y, z, U, V), Y.promise.then(function(Z) {
            return { result: Rr(Z.result, _, X == null ? void 0 : X.optimisticOps, m, Y, R) };
          });
        } });
      } });
    } };
    function yn(l, d) {
      return new Proxy(l, { get: function(b, m, v) {
        return m === "db" ? d : Reflect.get(b, m, v);
      } });
    }
    var at = (Me.prototype.version = function(l) {
      if (isNaN(l) || l < 0.1)
        throw new de.Type("Given version is not a positive number");
      if (l = Math.round(10 * l) / 10, this.idbdb || this._state.isBeingOpened)
        throw new de.Schema("Cannot add version when database is open");
      this.verno = Math.max(this.verno, l);
      var d = this._versions, b = d.filter(function(m) {
        return m._cfg.version === l;
      })[0];
      return b || (b = new this.Version(l), d.push(b), d.sort(ri), b.stores({}), this._state.autoSchema = !1, b);
    }, Me.prototype._whenReady = function(l) {
      var d = this;
      return this.idbdb && (this._state.openComplete || Ee.letThrough || this._vip) ? l() : new $e(function(b, m) {
        if (d._state.openComplete)
          return m(new de.DatabaseClosed(d._state.dbOpenError));
        if (!d._state.isBeingOpened) {
          if (!d._state.autoOpen)
            return void m(new de.DatabaseClosed());
          d.open().catch(_e);
        }
        d._state.dbReadyPromise.then(b, m);
      }).then(l);
    }, Me.prototype.use = function(l) {
      var d = l.stack, b = l.create, m = l.level, v = l.name;
      return v && this.unuse({ stack: d, name: v }), l = this._middlewares[d] || (this._middlewares[d] = []), l.push({ stack: d, create: b, level: m ?? 10, name: v }), l.sort(function(_, R) {
        return _.level - R.level;
      }), this;
    }, Me.prototype.unuse = function(l) {
      var d = l.stack, b = l.name, m = l.create;
      return d && this._middlewares[d] && (this._middlewares[d] = this._middlewares[d].filter(function(v) {
        return m ? v.create !== m : !!b && v.name !== b;
      })), this;
    }, Me.prototype.open = function() {
      var l = this;
      return mt(ct, function() {
        return ai(l);
      });
    }, Me.prototype._close = function() {
      var l = this._state, d = kt.indexOf(this);
      if (0 <= d && kt.splice(d, 1), this.idbdb) {
        try {
          this.idbdb.close();
        } catch {
        }
        this.idbdb = null;
      }
      l.isBeingOpened || (l.dbReadyPromise = new $e(function(b) {
        l.dbReadyResolve = b;
      }), l.openCanceller = new $e(function(b, m) {
        l.cancelOpen = m;
      }));
    }, Me.prototype.close = function(b) {
      var d = (b === void 0 ? { disableAutoOpen: !0 } : b).disableAutoOpen, b = this._state;
      d ? (b.isBeingOpened && b.cancelOpen(new de.DatabaseClosed()), this._close(), b.autoOpen = !1, b.dbOpenError = new de.DatabaseClosed()) : (this._close(), b.autoOpen = this._options.autoOpen || b.isBeingOpened, b.openComplete = !1, b.dbOpenError = null);
    }, Me.prototype.delete = function(l) {
      var d = this;
      l === void 0 && (l = { disableAutoOpen: !0 });
      var b = 0 < arguments.length && typeof arguments[0] != "object", m = this._state;
      return new $e(function(v, _) {
        function R() {
          d.close(l);
          var U = d._deps.indexedDB.deleteDatabase(d.name);
          U.onsuccess = Ke(function() {
            var V, j, Y;
            V = d._deps, j = d.name, Y = V.indexedDB, V = V.IDBKeyRange, Mn(Y) || j === Qt || Fn(Y, V).delete(j).catch(_e), v();
          }), U.onerror = rt(_), U.onblocked = d._fireOnBlocked;
        }
        if (b)
          throw new de.InvalidArgument("Invalid closeOptions argument to db.delete()");
        m.isBeingOpened ? m.dbReadyPromise.then(R) : R();
      });
    }, Me.prototype.backendDB = function() {
      return this.idbdb;
    }, Me.prototype.isOpen = function() {
      return this.idbdb !== null;
    }, Me.prototype.hasBeenClosed = function() {
      var l = this._state.dbOpenError;
      return l && l.name === "DatabaseClosed";
    }, Me.prototype.hasFailed = function() {
      return this._state.dbOpenError !== null;
    }, Me.prototype.dynamicallyOpened = function() {
      return this._state.autoSchema;
    }, Object.defineProperty(Me.prototype, "tables", { get: function() {
      var l = this;
      return a(this._allTables).map(function(d) {
        return l._allTables[d];
      });
    }, enumerable: !1, configurable: !0 }), Me.prototype.transaction = function() {
      var l = (function(d, b, m) {
        var v = arguments.length;
        if (v < 2)
          throw new de.InvalidArgument("Too few arguments");
        for (var _ = new Array(v - 1); --v; )
          _[v - 1] = arguments[v];
        return m = _.pop(), [d, te(_), m];
      }).apply(this, arguments);
      return this._transaction.apply(this, l);
    }, Me.prototype._transaction = function(l, d, b) {
      var m = this, v = Ee.trans;
      v && v.db === this && l.indexOf("!") === -1 || (v = null);
      var _, R, U = l.indexOf("?") !== -1;
      l = l.replace("!", "").replace("?", "");
      try {
        if (R = d.map(function(j) {
          if (j = j instanceof m.Table ? j.name : j, typeof j != "string")
            throw new TypeError("Invalid table argument to Dexie.transaction(). Only Table or String are allowed");
          return j;
        }), l == "r" || l === Sn)
          _ = Sn;
        else {
          if (l != "rw" && l != Tn)
            throw new de.InvalidArgument("Invalid transaction mode: " + l);
          _ = Tn;
        }
        if (v) {
          if (v.mode === Sn && _ === Tn) {
            if (!U)
              throw new de.SubTransaction("Cannot enter a sub-transaction with READWRITE mode when parent transaction is READONLY");
            v = null;
          }
          v && R.forEach(function(j) {
            if (v && v.storeNames.indexOf(j) === -1) {
              if (!U)
                throw new de.SubTransaction("Table " + j + " not included in parent transaction.");
              v = null;
            }
          }), U && v && !v.active && (v = null);
        }
      } catch (j) {
        return v ? v._promise(null, function(Y, D) {
          D(j);
        }) : Fe(j);
      }
      var V = (function j(Y, D, X, z, Z) {
        return $e.resolve().then(function() {
          var J = Ee.transless || Ee, G = Y._createTransaction(D, X, Y._dbSchema, z);
          if (G.explicit = !0, J = { trans: G, transless: J }, z)
            G.idbtrans = z.idbtrans;
          else
            try {
              G.create(), G.idbtrans._explicit = !0, Y._state.PR1398_maxLoop = 3;
            } catch (se) {
              return se.name === Ae.InvalidState && Y.isOpen() && 0 < --Y._state.PR1398_maxLoop ? (console.warn("Dexie: Need to reopen db"), Y.close({ disableAutoOpen: !1 }), Y.open().then(function() {
                return j(Y, D, X, null, Z);
              })) : Fe(se);
            }
          var ne, re = oe(Z);
          return re && At(), J = $e.follow(function() {
            var se;
            (ne = Z.call(G, G)) && (re ? (se = ft.bind(null, null), ne.then(se, se)) : typeof ne.next == "function" && typeof ne.throw == "function" && (ne = Yn(ne)));
          }, J), (ne && typeof ne.then == "function" ? $e.resolve(ne).then(function(se) {
            return G.active ? se : Fe(new de.PrematureCommit("Transaction committed too early. See http://bit.ly/2kdckMn"));
          }) : J.then(function() {
            return ne;
          })).then(function(se) {
            return z && G._resolve(), G._completion.then(function() {
              return se;
            });
          }).catch(function(se) {
            return G._reject(se), Fe(se);
          });
        });
      }).bind(null, this, _, R, v, b);
      return v ? v._promise(_, V, "lock") : Ee.trans ? mt(Ee.transless, function() {
        return m._whenReady(V);
      }) : this._whenReady(V);
    }, Me.prototype.table = function(l) {
      if (!y(this._allTables, l))
        throw new de.InvalidTable("Table ".concat(l, " does not exist"));
      return this._allTables[l];
    }, Me);
    function Me(l, d) {
      var b = this;
      this._middlewares = {}, this.verno = 0;
      var m = Me.dependencies;
      this._options = d = r({ addons: Me.addons, autoOpen: !0, indexedDB: m.indexedDB, IDBKeyRange: m.IDBKeyRange, cache: "cloned" }, d), this._deps = { indexedDB: d.indexedDB, IDBKeyRange: d.IDBKeyRange }, m = d.addons, this._dbSchema = {}, this._versions = [], this._storeNames = [], this._allTables = {}, this.idbdb = null, this._novip = this;
      var v, _, R, U, V, j = { dbOpenError: null, isBeingOpened: !1, onReadyBeingFired: null, openComplete: !1, dbReadyResolve: _e, dbReadyPromise: null, cancelOpen: _e, openCanceller: null, autoSchema: !0, PR1398_maxLoop: 3, autoOpen: d.autoOpen };
      j.dbReadyPromise = new $e(function(D) {
        j.dbReadyResolve = D;
      }), j.openCanceller = new $e(function(D, X) {
        j.cancelOpen = X;
      }), this._state = j, this.name = l, this.on = Ut(this, "populate", "blocked", "versionchange", "close", { ready: [wn, _e] }), this.on.ready.subscribe = C(this.on.ready.subscribe, function(D) {
        return function(X, z) {
          Me.vip(function() {
            var Z, J = b._state;
            J.openComplete ? (J.dbOpenError || $e.resolve().then(X), z && D(X)) : J.onReadyBeingFired ? (J.onReadyBeingFired.push(X), z && D(X)) : (D(X), Z = b, z || D(function G() {
              Z.on.ready.unsubscribe(X), Z.on.ready.unsubscribe(G);
            }));
          });
        };
      }), this.Collection = (v = this, Pt(Yr.prototype, function(ne, G) {
        this.db = v;
        var z = lr, Z = null;
        if (G)
          try {
            z = G();
          } catch (re) {
            Z = re;
          }
        var J = ne._ctx, G = J.table, ne = G.hook.reading.fire;
        this._ctx = { table: G, index: J.index, isPrimKey: !J.index || G.schema.primKey.keyPath && J.index === G.schema.primKey.name, range: z, keysOnly: !1, dir: "next", unique: "", algorithm: null, filter: null, replayFilter: null, justLimit: !0, isMatch: null, offset: 0, limit: 1 / 0, error: Z, or: J.or, valueMapper: ne !== Be ? ne : null };
      })), this.Table = (_ = this, Pt(pr.prototype, function(D, X, z) {
        this.db = _, this._tx = z, this.name = D, this.schema = X, this.hook = _._allTables[D] ? _._allTables[D].hook : Ut(null, { creating: [Xe, _e], reading: [Pe, Be], updating: [qr, _e], deleting: [Mr, _e] });
      })), this.Transaction = (R = this, Pt(Qr.prototype, function(D, X, z, Z, J) {
        var G = this;
        this.db = R, this.mode = D, this.storeNames = X, this.schema = z, this.chromeTransactionDurability = Z, this.idbtrans = null, this.on = Ut(this, "complete", "error", "abort"), this.parent = J || null, this.active = !0, this._reculock = 0, this._blockedFuncs = [], this._resolve = null, this._reject = null, this._waitingFor = null, this._waitingQueue = null, this._spinCount = 0, this._completion = new $e(function(ne, re) {
          G._resolve = ne, G._reject = re;
        }), this._completion.then(function() {
          G.active = !1, G.on.complete.fire();
        }, function(ne) {
          var re = G.active;
          return G.active = !1, G.on.error.fire(ne), G.parent ? G.parent._reject(ne) : re && G.idbtrans && G.idbtrans.abort(), Fe(ne);
        });
      })), this.Version = (U = this, Pt(oi.prototype, function(D) {
        this.db = U, this._cfg = { version: D, storesSource: null, dbschema: {}, tables: {}, contentUpgrade: null };
      })), this.WhereClause = (V = this, Pt(wr.prototype, function(D, X, z) {
        if (this.db = V, this._ctx = { table: D, index: X === ":id" ? null : X, or: z }, this._cmp = this._ascending = He, this._descending = function(Z, J) {
          return He(J, Z);
        }, this._max = function(Z, J) {
          return 0 < He(Z, J) ? Z : J;
        }, this._min = function(Z, J) {
          return He(Z, J) < 0 ? Z : J;
        }, this._IDBKeyRange = V._deps.IDBKeyRange, !this._IDBKeyRange)
          throw new de.MissingAPI();
      })), this.on("versionchange", function(D) {
        0 < D.newVersion ? console.warn("Another connection wants to upgrade database '".concat(b.name, "'. Closing db now to resume the upgrade.")) : console.warn("Another connection wants to delete database '".concat(b.name, "'. Closing db now to resume the delete request.")), b.close({ disableAutoOpen: !1 });
      }), this.on("blocked", function(D) {
        !D.newVersion || D.newVersion < D.oldVersion ? console.warn("Dexie.delete('".concat(b.name, "') was blocked")) : console.warn("Upgrade '".concat(b.name, "' blocked by other connection holding version ").concat(D.oldVersion / 10));
      }), this._maxKey = Kt(d.IDBKeyRange), this._createTransaction = function(D, X, z, Z) {
        return new b.Transaction(D, X, z, b._options.chromeTransactionDurability, Z);
      }, this._fireOnBlocked = function(D) {
        b.on("blocked").fire(D), kt.filter(function(X) {
          return X.name === b.name && X !== b && !X._state.vcFired;
        }).map(function(X) {
          return X.on("versionchange").fire(D);
        });
      }, this.use(li), this.use(pi), this.use(fi), this.use(ci), this.use(ui);
      var Y = new Proxy(this, { get: function(D, X, z) {
        if (X === "_vip")
          return !0;
        if (X === "table")
          return function(J) {
            return yn(b.table(J), Y);
          };
        var Z = Reflect.get(D, X, z);
        return Z instanceof pr ? yn(Z, Y) : X === "tables" ? Z.map(function(J) {
          return yn(J, Y);
        }) : X === "_createTransaction" ? function() {
          return yn(Z.apply(this, arguments), Y);
        } : Z;
      } });
      this.vip = Y, m.forEach(function(D) {
        return D(b);
      });
    }
    var gn, Qe = typeof Symbol < "u" && "observable" in Symbol ? Symbol.observable : "@@observable", yi = (er.prototype.subscribe = function(l, d, b) {
      return this._subscribe(l && typeof l != "function" ? l : { next: l, error: d, complete: b });
    }, er.prototype[Qe] = function() {
      return this;
    }, er);
    function er(l) {
      this._subscribe = l;
    }
    try {
      gn = { indexedDB: o.indexedDB || o.mozIndexedDB || o.webkitIndexedDB || o.msIndexedDB, IDBKeyRange: o.IDBKeyRange || o.webkitIDBKeyRange };
    } catch {
      gn = { indexedDB: null, IDBKeyRange: null };
    }
    function Nr(l) {
      var d, b = !1, m = new yi(function(v) {
        var _ = oe(l), R, U = !1, V = {}, j = {}, Y = { get closed() {
          return U;
        }, unsubscribe: function() {
          U || (U = !0, R && R.abort(), D && pt.storagemutated.unsubscribe(z));
        } };
        v.start && v.start(Y);
        var D = !1, X = function() {
          return kn(Z);
        }, z = function(J) {
          hn(V, J), Vn(j, V) && X();
        }, Z = function() {
          var J, G, ne;
          !U && gn.indexedDB && (V = {}, J = {}, R && R.abort(), R = new AbortController(), ne = function(re) {
            var se = _t();
            try {
              _ && At();
              var ue = lt(l, re);
              return ue = _ ? ue.finally(ft) : ue;
            } finally {
              se && Bt();
            }
          }(G = { subscr: J, signal: R.signal, requery: X, querier: l, trans: null }), Promise.resolve(ne).then(function(re) {
            b = !0, d = re, U || G.signal.aborted || (V = {}, function(se) {
              for (var ue in se)
                if (y(se, ue))
                  return;
              return 1;
            }(j = J) || D || (pt(Dt, z), D = !0), kn(function() {
              return !U && v.next && v.next(re);
            }));
          }, function(re) {
            b = !1, ["DatabaseClosedError", "AbortError"].includes(re == null ? void 0 : re.name) || U || kn(function() {
              U || v.error && v.error(re);
            });
          }));
        };
        return setTimeout(X, 0), Y;
      });
      return m.hasValue = function() {
        return b;
      }, m.getValue = function() {
        return d;
      }, m;
    }
    var Et = at;
    function tr(l) {
      var d = yt;
      try {
        yt = !0, pt.storagemutated.fire(l), Zn(l, !0);
      } finally {
        yt = d;
      }
    }
    $(Et, r(r({}, Ve), { delete: function(l) {
      return new Et(l, { addons: [] }).delete();
    }, exists: function(l) {
      return new Et(l, { addons: [] }).open().then(function(d) {
        return d.close(), !0;
      }).catch("NoSuchDatabaseError", function() {
        return !1;
      });
    }, getDatabaseNames: function(l) {
      try {
        return d = Et.dependencies, b = d.indexedDB, d = d.IDBKeyRange, (Mn(b) ? Promise.resolve(b.databases()).then(function(m) {
          return m.map(function(v) {
            return v.name;
          }).filter(function(v) {
            return v !== Qt;
          });
        }) : Fn(b, d).toCollection().primaryKeys()).then(l);
      } catch {
        return Fe(new de.MissingAPI());
      }
      var d, b;
    }, defineClass: function() {
      return function(l) {
        h(this, l);
      };
    }, ignoreTransaction: function(l) {
      return Ee.trans ? mt(Ee.transless, l) : l();
    }, vip: qn, async: function(l) {
      return function() {
        try {
          var d = Yn(l.apply(this, arguments));
          return d && typeof d.then == "function" ? d : $e.resolve(d);
        } catch (b) {
          return Fe(b);
        }
      };
    }, spawn: function(l, d, b) {
      try {
        var m = Yn(l.apply(b, d || []));
        return m && typeof m.then == "function" ? m : $e.resolve(m);
      } catch (v) {
        return Fe(v);
      }
    }, currentTransaction: { get: function() {
      return Ee.trans || null;
    } }, waitFor: function(l, d) {
      return d = $e.resolve(typeof l == "function" ? Et.ignoreTransaction(l) : l).timeout(d || 6e4), Ee.trans ? Ee.trans.waitFor(d) : d;
    }, Promise: $e, debug: { get: function() {
      return nt;
    }, set: function(l) {
      rr(l);
    } }, derive: w, extend: h, props: $, override: C, Events: Ut, on: pt, liveQuery: Nr, extendObservabilitySet: hn, getByKeyPath: I, setByKeyPath: L, delByKeyPath: function(l, d) {
      typeof d == "string" ? L(l, d, void 0) : "length" in d && [].map.call(d, function(b) {
        L(l, b, void 0);
      });
    }, shallowClone: P, deepClone: K, getObjectDiff: Xn, cmp: He, asap: q, minKey: -1 / 0, addons: [], connections: kt, errnames: Ae, dependencies: gn, cache: vt, semVer: "4.0.4", version: "4.0.4".split(".").map(function(l) {
      return parseInt(l);
    }).reduce(function(l, d, b) {
      return l + d / Math.pow(10, 2 * b);
    }) })), Et.maxKey = Kt(Et.dependencies.IDBKeyRange), typeof dispatchEvent < "u" && typeof addEventListener < "u" && (pt(Dt, function(l) {
      yt || (l = new CustomEvent(Ln, { detail: l }), yt = !0, dispatchEvent(l), yt = !1);
    }), addEventListener(Ln, function(l) {
      l = l.detail, yt || tr(l);
    }));
    var It, yt = !1, Lr = function() {
    };
    return typeof BroadcastChannel < "u" && ((Lr = function() {
      (It = new BroadcastChannel(Ln)).onmessage = function(l) {
        return l.data && tr(l.data);
      };
    })(), typeof It.unref == "function" && It.unref(), pt(Dt, function(l) {
      yt || It.postMessage(l);
    })), typeof addEventListener < "u" && (addEventListener("pagehide", function(l) {
      if (!at.disableBfCache && l.persisted) {
        nt && console.debug("Dexie: handling persisted pagehide"), It != null && It.close();
        for (var d = 0, b = kt; d < b.length; d++)
          b[d].close({ disableAutoOpen: !1 });
      }
    }), addEventListener("pageshow", function(l) {
      !at.disableBfCache && l.persisted && (nt && console.debug("Dexie: handling persisted pageshow"), Lr(), tr({ all: new We(-1 / 0, [[]]) }));
    })), $e.rejectionMapper = function(l, d) {
      return !l || l instanceof ve || l instanceof TypeError || l instanceof SyntaxError || !l.name || !Ue[l.name] ? l : (d = new Ue[l.name](d || l.message, l), "stack" in l && S(d, "stack", { get: function() {
        return this.inner.stack;
      } }), d);
    }, rr(nt), r(at, Object.freeze({ __proto__: null, Dexie: at, liveQuery: Nr, Entity: fr, cmp: He, PropModSymbol: ot, PropModification: Cn, replacePrefix: function(l, d) {
      return new Cn({ replacePrefix: [l, d] });
    }, default: at, RangeSet: We, mergeRanges: qt, rangesOverlap: fn }), { default: at }), at;
  });
})(dexie_min);
var dexie_minExports = dexie_min.exports;
const _Dexie = /* @__PURE__ */ getDefaultExportFromCjs(dexie_minExports), DexieSymbol = Symbol.for("Dexie"), Dexie = globalThis[DexieSymbol] || (globalThis[DexieSymbol] = _Dexie);
if (_Dexie.semVer !== Dexie.semVer)
  throw new Error(`Two different versions of Dexie loaded in the same app: ${_Dexie.semVer} and ${Dexie.semVer}`);
var Database = class extends Dexie {
  constructor(e) {
    super(e);
    M(this, "users");
    M(this, "events");
    M(this, "eventTags");
    M(this, "nip05");
    M(this, "lnurl");
    this.version(10).stores({
      users: "&pubkey",
      events: "&id, kind",
      eventTags: "&tagValue",
      nip05: "&nip05",
      lnurl: "&pubkey"
    });
  }
}, db;
function createDatabase(t) {
  db = new Database(t);
}
var CacheHandler = class {
  constructor(t) {
    M(this, "cache");
    M(this, "dirtyKeys", /* @__PURE__ */ new Set());
    M(this, "options");
    M(this, "debug");
    M(this, "indexes");
    M(this, "isSet", !1);
    this.debug = t.debug, this.options = t, t.maxSize > 0 && (this.cache = new dist.LRUCache({ maxSize: t.maxSize }), setInterval(() => this.dump(), 1e3 * 10)), this.indexes = /* @__PURE__ */ new Map();
  }
  getSet(t) {
    var e;
    return (e = this.cache) == null ? void 0 : e.get(t);
  }
  /**
   * Get all entries that match the filter.
   */
  getAllWithFilter(t) {
    var n;
    const e = /* @__PURE__ */ new Map();
    return (n = this.cache) == null || n.forEach((r, s) => {
      t(s, r) && e.set(s, r);
    }), e;
  }
  get(t) {
    var e;
    return (e = this.cache) == null ? void 0 : e.get(t);
  }
  async getWithFallback(t, e) {
    let n = this.get(t);
    return n || (this.debug(`Cache miss for key ${JSON.stringify(t)}`), n = await e.get(t), n && this.set(t, n)), n;
  }
  async getManyWithFallback(t, e) {
    const n = [], r = [];
    for (const s of t) {
      const o = this.get(s);
      o ? n.push(o) : r.push(s);
    }
    if (n.length > 0 && this.debug(`Cache hit for keys ${n.length} and miss for ${r.length} keys`), r.length > 0) {
      const s = Date.now(), o = await e.bulkGet(r), a = Date.now();
      let c = 0;
      for (const h of o)
        h && (this.set(h.id, h), n.push(h), c++);
      this.debug(`Time spent querying database: ${a - s}ms for ${r.length} keys, which added ${c} entries to the cache`);
    }
    return n;
  }
  add(t, e, n = !0) {
    var s;
    const r = this.get(t) ?? /* @__PURE__ */ new Set();
    r.add(e), (s = this.cache) == null || s.set(t, r), n && this.dirtyKeys.add(t);
  }
  set(t, e, n = !0) {
    var r;
    (r = this.cache) == null || r.set(t, e), n && this.dirtyKeys.add(t);
    for (const [s, o] of this.indexes.entries()) {
      const a = e[s];
      if (a) {
        const c = o.get(a) || /* @__PURE__ */ new Set();
        c.add(t), o.set(a, c);
      }
    }
  }
  size() {
    var t;
    return ((t = this.cache) == null ? void 0 : t.size) || 0;
  }
  delete(t) {
    var e;
    (e = this.cache) == null || e.delete(t), this.dirtyKeys.add(t);
  }
  async dump() {
    this.dirtyKeys.size > 0 && (await this.options.dump(this.dirtyKeys, this.cache), this.dirtyKeys.clear());
  }
  addIndex(t) {
    this.indexes.set(t, new dist.LRUCache({ maxSize: this.options.maxSize }));
  }
  getFromIndex(t, e) {
    var r, s;
    const n = /* @__PURE__ */ new Set();
    return (s = (r = this.indexes.get(t)) == null ? void 0 : r.get(e)) == null || s.forEach((o) => {
      const a = this.get(o);
      a && n.add(a);
    }), n;
  }
};
async function profilesWarmUp(t, e) {
  await e.each((n) => {
    t.set(n.pubkey, n.profile, !1);
  });
}
var profilesDump = (t, e) => async (n, r) => {
  const s = [];
  for (const o of n) {
    const a = r.get(o);
    a && s.push({
      pubkey: o,
      profile: a,
      createdAt: Date.now()
    });
  }
  s.length && (e(`Saving ${s.length} profiles to database`), await t.bulkPut(s)), n.clear();
};
async function zapperWarmUp(t, e) {
  await e.each((n) => {
    t.set(
      n.pubkey,
      { document: n.document, fetchedAt: n.fetchedAt },
      !1
    );
  });
}
var zapperDump = (t, e) => async (n, r) => {
  const s = [];
  for (const o of n) {
    const a = r.get(o);
    a && s.push({
      pubkey: o,
      ...a
    });
  }
  s.length && (e(`Saving ${s.length} zapper cache entries to database`), await t.bulkPut(s)), n.clear();
};
async function nip05WarmUp(t, e) {
  await e.each((n) => {
    t.set(n.nip05, n, !1);
  });
}
var nip05Dump = (t, e) => async (n, r) => {
  const s = [];
  for (const o of n) {
    const a = r.get(o);
    a && s.push({
      nip05: o,
      ...a
    });
  }
  s.length && (e(`Saving ${s.length} NIP-05 cache entries to database`), await t.bulkPut(s)), n.clear();
};
async function eventsWarmUp(t, e) {
  await e.each((n) => {
    t.set(n.id, n, !1);
  });
}
var eventsDump = (t, e) => async (n, r) => {
  const s = [];
  for (const o of n) {
    const a = r.get(o);
    a && s.push(a);
  }
  s.length > 0 && (e(`Saving ${s.length} events cache entries to database`), await t.bulkPut(s)), n.clear();
};
async function eventTagsWarmUp(t, e) {
  await e.each((n) => {
    t.add(n.tagValue, n.eventId, !1);
  });
}
var eventTagsDump = (t, e) => async (n, r) => {
  const s = [];
  for (const o of n) {
    const a = r.get(o);
    if (a)
      for (const c of a)
        s.push({ tagValue: o, eventId: c });
  }
  s.length > 0 && (e(`Saving ${s.length} events cache entries to database`), await t.bulkPut(s)), n.clear();
}, NDKCacheAdapterDexie = class {
  constructor(t = {}) {
    M(this, "debug");
    M(this, "expirationTime");
    M(this, "locking", !0);
    M(this, "ready", !1);
    M(this, "profiles");
    M(this, "zappers");
    M(this, "nip05s");
    M(this, "events");
    M(this, "eventTags");
    M(this, "warmedUp", !1);
    M(this, "warmUpPromise");
    M(this, "devMode", !1);
    M(this, "_onReady");
    createDatabase(t.dbName || "ndk"), this.debug = t.debug || debug("ndk:dexie-adapter"), this.expirationTime = t.expirationTime || 3600, this.profiles = new CacheHandler({
      maxSize: t.profileCacheSize || 1e5,
      dump: profilesDump(db.users, this.debug),
      debug: this.debug
    }), this.zappers = new CacheHandler({
      maxSize: t.zapperCacheSize || 200,
      dump: zapperDump(db.lnurl, this.debug),
      debug: this.debug
    }), this.nip05s = new CacheHandler({
      maxSize: t.nip05CacheSize || 1e3,
      dump: nip05Dump(db.nip05, this.debug),
      debug: this.debug
    }), this.events = new CacheHandler({
      maxSize: t.eventCacheSize || 15e4,
      dump: eventsDump(db.events, this.debug),
      debug: this.debug
    }), this.events.addIndex("pubkey"), this.eventTags = new CacheHandler({
      maxSize: t.eventTagsCacheSize || 1e5,
      dump: eventTagsDump(db.eventTags, this.debug),
      debug: this.debug
    });
    const e = Date.now();
    this.warmUpPromise = Promise.allSettled([
      profilesWarmUp(this.profiles, db.users),
      zapperWarmUp(this.zappers, db.lnurl),
      nip05WarmUp(this.nip05s, db.nip05),
      eventsWarmUp(this.events, db.events),
      eventTagsWarmUp(this.eventTags, db.eventTags)
    ]), this.warmUpPromise.then(() => {
      const n = Date.now();
      this.warmedUp = !0, this.ready = !0, this.debug("Warm up completed, time", n - e, "ms"), this._onReady && this._onReady();
    });
  }
  onReady(t) {
    this._onReady = t;
  }
  async query(t) {
    if (!this.warmedUp) {
      const r = Date.now();
      await this.warmUpPromise, this.debug("froze query for", Date.now() - r, "ms");
    }
    const e = Date.now();
    t.filters.map((r) => this.processFilter(r, t));
    const n = Date.now() - e;
    n > 100 && this.debug("query took", n, "ms", t.filter);
  }
  async fetchProfile(t) {
    return this.profiles && await this.profiles.getWithFallback(t, db.users) || null;
  }
  async getProfiles(t) {
    if (this.profiles)
      return this.profiles.getAllWithFilter(t);
  }
  saveProfile(t, e) {
    this.profiles.set(t, e);
  }
  async loadNip05(t, e = 3600) {
    var o;
    const n = (o = this.nip05s) == null ? void 0 : o.get(t);
    if (n) {
      if (n.profile === null)
        return n.fetchedAt + e * 1e3 < Date.now() ? "missing" : null;
      try {
        return JSON.parse(n.profile);
      } catch {
        return "missing";
      }
    }
    const r = await db.nip05.get({ nip05: t });
    if (!r)
      return "missing";
    const s = Date.now();
    if (r.profile === null)
      return r.fetchedAt + e * 1e3 < s ? "missing" : null;
    try {
      return JSON.parse(r.profile);
    } catch {
      return "missing";
    }
  }
  async saveNip05(t, e) {
    try {
      const n = e ? JSON.stringify(e) : null;
      this.nip05s.set(t, { profile: n, fetchedAt: Date.now() });
    } catch (n) {
      console.error("Failed to save NIP-05 profile for nip05:", t, n);
    }
  }
  async loadUsersLNURLDoc(t, e = 86400, n = 3600) {
    var a;
    const r = (a = this.zappers) == null ? void 0 : a.get(t);
    if (r) {
      if (r.document === null)
        return r.fetchedAt + n * 1e3 < Date.now() ? "missing" : null;
      try {
        return JSON.parse(r.document);
      } catch {
        return "missing";
      }
    }
    const s = await db.lnurl.get({ pubkey: t });
    if (!s)
      return "missing";
    const o = Date.now();
    if (s.fetchedAt + e * 1e3 < o)
      return "missing";
    if (s.document === null)
      return s.fetchedAt + n * 1e3 < o ? "missing" : null;
    try {
      return JSON.parse(s.document);
    } catch {
      return "missing";
    }
  }
  async saveUsersLNURLDoc(t, e) {
    var n;
    try {
      const r = e ? JSON.stringify(e) : null;
      (n = this.zappers) == null || n.set(t, { document: r, fetchedAt: Date.now() });
    } catch (r) {
      console.error("Failed to save LNURL document for pubkey:", t, r);
    }
  }
  processFilter(t, e) {
    const n = { ...t };
    delete n.limit;
    const r = Object.keys(n || {}).sort();
    try {
      if (this.byNip33Query(r, t, e) || this.byAuthors(t, e) || this.byIdsQuery(t, e) || this.byTags(t, e))
        return;
    } catch (s) {
      console.error(s);
    }
  }
  async deleteEvent(t) {
    this.events.delete(t.tagId()), await db.events.where({ id: t.tagId() }).delete();
  }
  async setEvent(t, e, n) {
    if (t.kind === 0) {
      if (!this.profiles)
        return;
      try {
        const s = profileFromEvent(t);
        this.saveProfile(t.pubkey, s);
      } catch {
        this.debug(`Failed to save profile for pubkey: ${t.pubkey}`);
      }
    }
    let r = !0;
    if (t.isParamReplaceable()) {
      const s = await this.events.get(t.tagId());
      s && t.created_at && s.createdAt > t.created_at && (r = !1);
    }
    r && (this.events.set(t.tagId(), {
      id: t.tagId(),
      pubkey: t.pubkey,
      kind: t.kind,
      createdAt: t.created_at,
      relay: n == null ? void 0 : n.url,
      event: t.serialize(!0, !0)
    }), t.kind !== 3 && t.tags.forEach((s) => {
      s[0].length === 1 && this.eventTags.add(s[0] + s[1], t.tagId());
    }));
  }
  /**
   * Searches by authors
   */
  byAuthors(t, e) {
    if (!t.authors)
      return !1;
    let n = 0;
    for (const r of t.authors) {
      let s = Array.from(this.events.getFromIndex("pubkey", r));
      s.length, t.kinds && (s = s.filter((o) => t.kinds.includes(o.kind))), foundEvents(e, s, t), n += s.length;
    }
    return !0;
  }
  /**
   * Searches by ids
   */
  byIdsQuery(t, e) {
    if (t.ids) {
      for (const n of t.ids) {
        const r = this.events.get(n);
        r && foundEvent(e, r, r.relay);
      }
      return !0;
    }
    return !1;
  }
  /**
   * Searches by NIP-33
   */
  byNip33Query(t, e, n) {
    const r = ["#d", "authors", "kinds"];
    if (t.length === r.length && r.every((o) => t.includes(o)) && e.kinds && e.authors) {
      for (const o of e.kinds)
        if (o >= 3e4 && o < 4e4)
          for (const c of e.authors)
            for (const h of e["#d"]) {
              const p = `${o}:${c}:${h}`, g = this.events.get(p);
              g && foundEvent(n, g, g.relay);
            }
      return !0;
    }
    return !1;
  }
  /**
   * Searches by tags and optionally filters by tags
   */
  byTags(t, e) {
    const n = Object.entries(t).filter(([r]) => r.startsWith("#") && r.length === 2).map(([r, s]) => [r[1], s]);
    if (n.length === 0)
      return !1;
    for (const [r, s] of n)
      for (const o of s) {
        const a = r + o, c = this.eventTags.getSet(a);
        c && c.forEach((h) => {
          const p = this.events.get(h);
          p && (!t.kinds || t.kinds.includes(p.kind)) && foundEvent(e, p, p.relay);
        });
      }
    return !0;
  }
};
function foundEvents(t, e, n) {
  for (const r of e)
    foundEvent(t, r, r.relay, n);
}
function foundEvent(t, e, n, r) {
  try {
    const s = deserialize(e.event);
    if (r && !matchFilter$1(r, s))
      return;
    const o = new NDKEvent(void 0, s), a = n ? t.pool.getRelay(n) : void 0;
    o.relay = a, t.eventReceived(o, a, !0);
  } catch (s) {
    console.error("failed to deserialize event", s);
  }
}
let ndkInstance = null, privateKeySigner, nip07Signer;
const DEFAULT_RELAYS = [
  "wss://strfry.iris.to",
  "wss://relay.damus.io",
  "wss://relay.nostr.band",
  "wss://relay.snort.social"
], ndk = (t) => {
  if (ndkInstance) {
    if (t)
      throw new Error("NDK instance already initialized, cannot pass options");
  } else {
    const e = t || {
      explicitRelayUrls: DEFAULT_RELAYS,
      cacheAdapter: new NDKCacheAdapterDexie({ dbName: "irisdb-nostr" })
    };
    ndkInstance = new NDK(e), watchLocalSettings(ndkInstance), ndkInstance.relayAuthDefaultPolicy = NDKRelayAuthPolicies.signIn({ ndk: ndkInstance }), ndkInstance.connect();
  }
  return ndkInstance;
};
function watchLocalSettings(t) {
  localState.get("user/privateKey").on((e) => {
    const n = e && typeof e == "string";
    if (!privateKeySigner && n)
      try {
        privateKeySigner = new NDKPrivateKeySigner(e), t.signer = privateKeySigner;
      } catch (r) {
        console.error(r);
      }
    else
      privateKeySigner && !n && (privateKeySigner = void 0, t.signer = void 0);
  }), localState.get("user/nip07Login").on((e) => {
    e ? (nip07Signer = new NDKNip07Signer(), t.signer = nip07Signer, nip07Signer.user().then((n) => {
      localState.get("user/publicKey").put(n.pubkey);
    })) : nip07Signer && (nip07Signer = void 0, t.signer = void 0);
  }), localState.get("user/relays").on((e) => {
    if (Array.isArray(e)) {
      e.forEach((n) => {
        t.pool.relays.has(n) || t.pool.addRelay(new NDKRelay(n));
      });
      for (const n of t.pool.relays.keys())
        e.includes(n) || t.pool.removeRelay(n);
    }
  });
}
function newUserLogin(t) {
  ndk();
  const e = generateSecretKey(), n = getPublicKey$1(e), r = bytesToHex$7(e);
  localState.get("user/privateKey").put(r), localState.get("user/publicKey").put(n), privateKeySigner = new NDKPrivateKeySigner(r), ndkInstance.signer = privateKeySigner;
  const s = new NDKEvent(ndkInstance);
  s.kind = 0, s.content = JSON.stringify({ name: t }), s.publish();
}
function privateKeyLogin(t) {
  if (ndk(), t && typeof t == "string") {
    const e = t.indexOf("nsec1") === 0 ? nip19_exports$1.decode(t).data : hexToBytes$7(t), n = bytesToHex$7(e);
    privateKeySigner = new NDKPrivateKeySigner(n), ndkInstance.signer = privateKeySigner;
    const r = getPublicKey$1(e);
    localState.get("user/privateKey").put(n), localState.get("user/publicKey").put(r);
  }
}
const EVENT_KIND = 30078, log = debug("nostree:ndk-adapter");
class NDKAdapter {
  constructor(e, n) {
    M(this, "seenValues", /* @__PURE__ */ new Map());
    M(this, "ndk");
    M(this, "authors");
    this.ndk = e, this.authors = n.map((r) => r.toString());
  }
  get(e, n) {
    const r = { fn: null }, s = this.ndk.subscribe({
      authors: this.authors,
      kinds: [EVENT_KIND],
      "#d": [e]
    });
    return r.fn = () => s.stop(), s.on("event", (o) => {
      const a = nip19_exports$1.npubEncode(o.pubkey);
      n(
        JSON.parse(o.content),
        a + e,
        o.created_at * 1e3,
        () => {
          var c;
          return (c = r.fn) == null ? void 0 : c.call(r);
        }
      );
    }), s.start(), () => {
      var o;
      return (o = r.fn) == null ? void 0 : o.call(r);
    };
  }
  async set(e, n) {
    if (n && n.updatedAt === void 0)
      throw new Error(`Invalid value: ${JSON.stringify(n)}`);
    const r = this.seenValues.get(e);
    if (r && (r.updatedAt > n.updatedAt || r.updatedAt === n.updatedAt && (r.value || "") > (n.value || "")))
      return;
    this.seenValues.set(e, n), log("set state", e, n);
    const s = e.split("/").slice(0, -1).join("/"), o = new NDKEvent(this.ndk);
    o.kind = EVENT_KIND, o.content = JSON.stringify(n.value), o.created_at = Math.floor(n.updatedAt / 1e3), o.tags = [
      ["d", e],
      ["f", s]
    ], n.expiresAt && o.tags.push(["expiration", Math.floor(n.expiresAt / 1e3).toString()]);
    try {
      await o.publish(), log("published state event", o);
    } catch (a) {
      console.error("error publishing state event", a, o);
    }
  }
  list(e, n) {
    const r = { fn: null }, s = this.ndk.subscribe({
      authors: this.authors,
      kinds: [EVENT_KIND]
      // '#f': [path] // TODO we need support for this in strfry. otherwise won't scale to larger datasets
    });
    return r.fn = () => s.stop(), s.on("event", (o) => {
      var c;
      const a = (c = o.tags.find((h) => {
        if (h[0] === "d") {
          const p = h[1].replace(`${e}/`, "");
          if (p.length && h[1].startsWith(`${e}/`) && !p.includes("/"))
            return !0;
        }
      })) == null ? void 0 : c[1];
      if (a) {
        const h = nip19_exports$1.npubEncode(o.pubkey);
        n(
          JSON.parse(o.content),
          h + a,
          o.created_at * 1e3,
          () => {
            var p;
            return (p = r.fn) == null ? void 0 : p.call(r);
          }
        );
      }
    }), s.start(), () => {
      var o;
      return (o = r.fn) == null ? void 0 : o.call(r);
    };
  }
}
const publicState = (t) => {
  let e;
  return typeof t == "string" ? e = [new PublicKey(t)] : e = t.map((n) => n instanceof PublicKey ? n : new PublicKey(n)), new Node({
    adapters: [new Adapters.MemoryAdapter(), new NDKAdapter(ndk(), e)]
  });
}, tt = class tt {
  static id(e) {
    if (e.startsWith("npub"))
      throw new Error("use hex instead of npub " + e);
    const n = tt.strToUniqueId.get(e);
    if (n)
      return n;
    const r = tt.currentUniqueId++;
    return tt.strToUniqueId.set(e, r), tt.uniqueIdToStr.set(r, e), r;
  }
  static str(e) {
    const n = tt.uniqueIdToStr.get(e);
    if (!n)
      throw new Error("pub: invalid id " + e);
    return n;
  }
  static has(e) {
    return tt.strToUniqueId.has(e);
  }
};
M(tt, "strToUniqueId", /* @__PURE__ */ new Map()), M(tt, "uniqueIdToStr", /* @__PURE__ */ new Map()), M(tt, "currentUniqueId", 0);
let UniqueIds = tt;
const STR = UniqueIds.str, ID = UniqueIds.id;
class SocialGraph {
  /**
   * @param root "Root user" of the social graph.
   * Follow distance to this user is 0. Users followed by this user are at distance 1, and so on.
   */
  constructor(e) {
    M(this, "root");
    M(this, "followDistanceByUser", /* @__PURE__ */ new Map());
    M(this, "usersByFollowDistance", /* @__PURE__ */ new Map());
    M(this, "followedByUser", /* @__PURE__ */ new Map());
    M(this, "followersByUser", /* @__PURE__ */ new Map());
    M(this, "latestFollowEventTimestamps", /* @__PURE__ */ new Map());
    this.root = ID(e), this.followDistanceByUser.set(this.root, 0), this.usersByFollowDistance.set(0, /* @__PURE__ */ new Set([this.root]));
  }
  /**
   * Change the root user of the social graph, recalculating follow distances.
   * @param root
   */
  setRoot(e) {
    const n = ID(e);
    if (n === this.root)
      return;
    this.root = n, this.followDistanceByUser.clear(), this.usersByFollowDistance.clear(), this.followDistanceByUser.set(this.root, 0), this.usersByFollowDistance.set(0, /* @__PURE__ */ new Set([this.root]));
    const r = [this.root];
    for (; r.length > 0; ) {
      const s = r.shift(), o = this.followDistanceByUser.get(s), a = this.followersByUser.get(s) || /* @__PURE__ */ new Set();
      for (const c of a)
        if (!this.followDistanceByUser.has(c)) {
          const h = o + 1;
          this.followDistanceByUser.set(c, h), this.usersByFollowDistance.has(h) || this.usersByFollowDistance.set(h, /* @__PURE__ */ new Set()), this.usersByFollowDistance.get(h).add(c), r.push(c);
        }
    }
  }
  /**
   * Handle a follow event, updating the social graph.
   * @param evs
   */
  handleEvent(e) {
    const n = (Array.isArray(e) ? e : [e]).filter((r) => r.kind === 3);
    n.length !== 0 && queueMicrotask(() => {
      try {
        for (const r of n) {
          const s = ID(r.pubkey), o = r.created_at, a = this.latestFollowEventTimestamps.get(s);
          if (a && o <= a)
            return;
          this.latestFollowEventTimestamps.set(s, o);
          const c = /* @__PURE__ */ new Set();
          for (const p of r.tags)
            if (p[0] === "p") {
              const g = ID(p[1]);
              g !== s && c.add(g);
            }
          const h = this.followedByUser.get(s) || /* @__PURE__ */ new Set();
          for (const p of h)
            c.has(p) || this.removeFollower(p, s);
          for (const p of c)
            this.addFollower(p, s);
        }
      } catch {
      }
    });
  }
  /**
   * Check if a user is following another user.
   * @param follower
   * @param followedUser
   */
  isFollowing(e, n) {
    var o;
    const r = ID(n), s = ID(e);
    return !!((o = this.followedByUser.get(s)) != null && o.has(r));
  }
  /**
   * Get the follow distance from the root user to another user.
   * @param user
   */
  getFollowDistance(e) {
    try {
      const n = ID(e);
      if (n === this.root)
        return 0;
      const r = this.followDistanceByUser.get(n);
      return r === void 0 ? 1e3 : r;
    } catch {
      return 1e3;
    }
  }
  addUserByFollowDistance(e, n) {
    var r, s;
    this.usersByFollowDistance.has(e) || this.usersByFollowDistance.set(e, /* @__PURE__ */ new Set()), (r = this.usersByFollowDistance.get(e)) == null || r.add(n);
    for (const o of this.usersByFollowDistance.keys())
      o > e && ((s = this.usersByFollowDistance.get(o)) == null || s.delete(n));
  }
  addFollower(e, n) {
    var r, s;
    if (typeof e != "number" || typeof n != "number")
      throw new Error("Invalid user id");
    if (this.followersByUser.has(e) || this.followersByUser.set(e, /* @__PURE__ */ new Set()), (r = this.followersByUser.get(e)) == null || r.add(n), this.followedByUser.has(n) || this.followedByUser.set(n, /* @__PURE__ */ new Set()), e !== this.root) {
      let o;
      if (n === this.root)
        o = 1, this.addUserByFollowDistance(o, e), this.followDistanceByUser.set(e, o);
      else {
        const a = this.followDistanceByUser.get(e), c = this.followDistanceByUser.get(n);
        o = c && c + 1, (a === void 0 || o && o < a) && (this.followDistanceByUser.set(e, o), this.addUserByFollowDistance(o, e));
      }
    }
    (s = this.followedByUser.get(n)) == null || s.add(e);
  }
  removeFollower(e, n) {
    var s, o;
    if ((s = this.followersByUser.get(e)) == null || s.delete(n), (o = this.followedByUser.get(n)) == null || o.delete(e), e === this.root)
      return;
    let r = 1 / 0;
    for (const a of this.followersByUser.get(e) || []) {
      const c = this.followDistanceByUser.get(a);
      c !== void 0 && c + 1 < r && (r = c + 1);
    }
    r === 1 / 0 ? this.followDistanceByUser.delete(e) : this.followDistanceByUser.set(e, r);
  }
  // TODO subscription methods for followersByUser and followedByUser. and maybe messagesByTime. and replies
  /**
   * Get the number of known followers for a user.
   * @param address
   */
  followerCount(e) {
    var r;
    const n = ID(e);
    return ((r = this.followersByUser.get(n)) == null ? void 0 : r.size) ?? 0;
  }
  /**
   * Get the number of users you follow that follow a given user.
   * @param address
   */
  followedByFriendsCount(e) {
    var s;
    let n = 0;
    const r = ID(e);
    for (const o of this.followersByUser.get(r) ?? [])
      (s = this.followedByUser.get(this.root)) != null && s.has(o) && n++;
    return n;
  }
  /**
   * Get the users you follow that are following a given user.
   * @param address
   */
  followedByFriends(e) {
    var s;
    const n = ID(e), r = /* @__PURE__ */ new Set();
    for (const o of this.followersByUser.get(n) ?? [])
      (s = this.followedByUser.get(this.root)) != null && s.has(o) && r.add(STR(o));
    return r;
  }
  /**
   * Get the users followed by a given user.
   * @param user
   * @param includeSelf
   */
  getFollowedByUser(e, n = !1) {
    const r = ID(e), s = /* @__PURE__ */ new Set();
    for (const o of this.followedByUser.get(r) || [])
      s.add(STR(o));
    return n && s.add(e), s;
  }
  /**
   * Get the known followers of a given user.
   * @param address
   */
  getFollowersByUser(e) {
    const n = ID(e), r = /* @__PURE__ */ new Set();
    for (const s of this.followersByUser.get(n) || [])
      r.add(STR(s));
    return r;
  }
}
export {
  DEFAULT_RELAYS,
  Hex,
  NDKAdapter,
  PublicKey,
  SocialGraph,
  ndk,
  newUserLogin,
  privateKeyLogin,
  publicState
};
